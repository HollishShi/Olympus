/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 40);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return core; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_Dictionary__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__observable_Observable__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_reflect_metadata__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_reflect_metadata___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_reflect_metadata__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__global_Patch__ = __webpack_require__(15);




__WEBPACK_IMPORTED_MODULE_3__global_Patch__;
/**
 * 核心上下文对象，负责内核消息消息转发、对象注入等核心功能的实现
 *
 * @export
 * @class Core
 */
var Core = /** @class */ (function () {
    function Core() {
        /*********************** 下面是内核消息系统 ***********************/
        this._observable = new __WEBPACK_IMPORTED_MODULE_1__observable_Observable__["a" /* default */]();
        /*********************** 下面是依赖注入系统 ***********************/
        /**
         * 记录已经注入过的对象单例
         *
         * @private
         * @type {Dictionary<Function, any>}
         * @memberof Core
         */
        this._injectDict = new __WEBPACK_IMPORTED_MODULE_0__utils_Dictionary__["a" /* default */]();
        /**
         * 注入字符串类型字典，记录注入字符串和类型构造函数的映射
         *
         * @private
         * @type {Dictionary<any, IConstructor>}
         * @memberof Core
         */
        this._injectStrDict = new __WEBPACK_IMPORTED_MODULE_0__utils_Dictionary__["a" /* default */]();
        // 进行单例判断
        if (Core._instance)
            throw new Error("已生成过Core实例，不允许多次生成");
        // 赋值单例
        Core._instance = this;
        // 注入自身
        this.mapInjectValue(this);
    }
    Object.defineProperty(Core.prototype, "observable", {
        /**
         * 将IObservable暴露出来
         *
         * @readonly
         * @type {IObservable}
         * @memberof Core
         */
        get: function () {
            return this._observable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Core.prototype, "parent", {
        /**
         * 获取到父级IObservable
         *
         * @type {IObservable}
         * @memberof Core
         */
        get: function () {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    /** dispatch方法实现 */
    Core.prototype.dispatch = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        this._observable.dispatch.apply(this._observable, params);
    };
    /**
     * 监听内核消息
     *
     * @param {string} type 消息类型
     * @param {Function} handler 消息处理函数
     * @param {*} [thisArg] 消息this指向
     * @memberof Core
     */
    Core.prototype.listen = function (type, handler, thisArg) {
        this._observable.listen(type, handler, thisArg);
    };
    /**
     * 移除内核消息监听
     *
     * @param {string} type 消息类型
     * @param {Function} handler 消息处理函数
     * @param {*} [thisArg] 消息this指向
     * @memberof Core
     */
    Core.prototype.unlisten = function (type, handler, thisArg) {
        this._observable.unlisten(type, handler, thisArg);
    };
    /**
     * 注册命令到特定消息类型上，当这个类型的消息派发到框架内核时会触发Command运行
     *
     * @param {string} type 要注册的消息类型
     * @param {(ICommandConstructor)} cmd 命令处理器，可以是方法形式，也可以使类形式
     * @memberof Core
     */
    Core.prototype.mapCommand = function (type, cmd) {
        this._observable.mapCommand(type, cmd);
    };
    /**
     * 注销命令
     *
     * @param {string} type 要注销的消息类型
     * @param {(ICommandConstructor)} cmd 命令处理器
     * @returns {void}
     * @memberof Core
     */
    Core.prototype.unmapCommand = function (type, cmd) {
        this._observable.unmapCommand(type, cmd);
    };
    /**
     * 添加一个类型注入，会立即生成一个实例并注入到框架内核中
     *
     * @param {IConstructor} target 要注入的类型（注意不是实例）
     * @param {*} [type] 如果提供该参数，则使用该类型代替注入类型的key，否则使用注入类型自身作为key
     * @memberof Core
     */
    Core.prototype.mapInject = function (target, type) {
        // 如果已经注入过了，则使用已经注入的单例再次注入
        var oriTarget = target["__ori_constructor__"] || target;
        var value = this._injectDict.get(oriTarget) || new target();
        this.mapInjectValue(value, type);
    };
    /**
     * 注入一个对象实例
     *
     * @param {*} value 要注入的对象实例
     * @param {*} [type] 如果提供该参数，则使用该类型代替注入类型的key，否则使用注入实例的构造函数作为key
     * @memberof Core
     */
    Core.prototype.mapInjectValue = function (value, type) {
        // 如果是字符串则记录类型构造函数映射
        if (!(type instanceof Function) || !type.prototype)
            type = this._injectStrDict[type] = value.constructor;
        // 记录已注入的单例
        this._injectDict.set(value.constructor, value);
        // 开始注入
        Reflect.defineMetadata("design:type", value, type || value.constructor);
    };
    /**
     * 移除类型注入
     *
     * @param {*} type 要移除注入的类型
     * @memberof Core
     */
    Core.prototype.unmapInject = function (type) {
        // 如果是字符串则记录类型构造函数映射
        if (!(type instanceof Function) || !type.prototype)
            type = this._injectStrDict[type];
        Reflect.deleteMetadata("design:type", type);
    };
    /**
     * 获取注入的对象实例
     *
     * @param {*} type 注入对象的类型
     * @returns {*} 注入的对象实例
     * @memberof Core
     */
    Core.prototype.getInject = function (type) {
        if (!(type instanceof Function) || !type.prototype)
            type = this._injectStrDict[type];
        if (type) {
            // 需要用原始的构造函数取
            type = type["__ori_constructor__"] || type;
            return Reflect.getMetadata("design:type", type);
        }
    };
    return Core;
}());
/* unused harmony default export */ var _unused_webpack_default_export = (Core);
/** 再额外导出一个单例 */
var core = new Core();


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["Injectable"] = Injectable;
/* harmony export (immutable) */ __webpack_exports__["Inject"] = Inject;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__global_Patch__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_ConstructUtil__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_reflect_metadata__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_reflect_metadata___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_reflect_metadata__);




/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-19
 * @modify date 2017-09-19
 *
 * Core模组的装饰器注入模块
*/
/** 生成类型实例并注入，可以进行类型转换注入（即注入类型可以和注册类型不一致，采用@Injectable(AnotherClass)的形式即可） */
function Injectable() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (this === __WEBPACK_IMPORTED_MODULE_1__global_Patch__["decorateThis"]) {
        // 不需要转换注册类型，直接注册
        __WEBPACK_IMPORTED_MODULE_0__Core__["a" /* core */].mapInject(args[0]);
    }
    else {
        // 需要转换注册类型，需要返回一个ClassDecorator
        return function (realCls) {
            for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {
                var cls = args_1[_i];
                // 注入类型
                __WEBPACK_IMPORTED_MODULE_0__Core__["a" /* core */].mapInject(realCls, cls);
            }
            // 需要转换的也要额外将自身注入一个
            __WEBPACK_IMPORTED_MODULE_0__Core__["a" /* core */].mapInject(realCls);
        };
    }
}
;
function Inject(target, key) {
    if (key) {
        var cls = Reflect.getMetadata("design:type", target, key);
        doInject(target.constructor, key, cls);
    }
    else {
        return function (prototype, propertyKey) {
            doInject(prototype.constructor, propertyKey, target);
        };
    }
}
;
function doInject(cls, key, type) {
    // 监听实例化
    var target;
    Object(__WEBPACK_IMPORTED_MODULE_2__utils_ConstructUtil__["b" /* listenConstruct */])(cls, function (instance) {
        Object.defineProperty(instance, key, {
            configurable: true,
            enumerable: true,
            get: function () { return target || (target = __WEBPACK_IMPORTED_MODULE_0__Core__["a" /* core */].getInject(type)); }
        });
    });
}


/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = extendObject;
/* harmony export (immutable) */ __webpack_exports__["a"] = cloneObject;
/* unused harmony export getGUID */
/* unused harmony export getAutoIncId */
/* unused harmony export isEmpty */
/* unused harmony export trimData */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return extendsClass; });
/* harmony export (immutable) */ __webpack_exports__["d"] = getObjectHash;
/* harmony export (immutable) */ __webpack_exports__["e"] = getObjectHashs;
/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-11
 * @modify date 2017-09-11
 *
 * 对象工具集
*/
/**
 * populate properties
 * @param target        目标obj
 * @param sources       来源obj
 */
function extendObject(target) {
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    sources.forEach(function (source) {
        if (!source)
            return;
        for (var propName in source) {
            if (source.hasOwnProperty(propName)) {
                target[propName] = source[propName];
            }
        }
    });
    return target;
}
/**
 * 复制对象
 * @param target 要复制的对象
 * @param deep 是否深表复制，默认浅表复制
 * @returns {any} 复制后的对象
 */
function cloneObject(target, deep) {
    if (deep === void 0) { deep = false; }
    if (target == null)
        return null;
    var newObject = {};
    for (var key in target) {
        var value = target[key];
        if (deep && typeof value == "object") {
            // 如果是深表复制，则需要递归复制子对象
            value = cloneObject(value, true);
        }
        newObject[key] = value;
    }
    return newObject;
}
/**
 * 生成一个随机ID
 */
function getGUID() {
    var s = [];
    var hexDigits = "0123456789abcdef";
    for (var i = 0; i < 36; i++) {
        s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
    }
    s[14] = "4"; // bits 12-15 of the time_hi_and_version field to 0010
    s[19] = hexDigits.substr((parseInt(s[19]) & 0x3) | 0x8, 1); // bits 6-7 of the clock_seq_hi_and_reserved to 01
    s[8] = s[13] = s[18] = s[23] = "-";
    return s.join("");
}
var _getAutoIncIdMap = {};
/**
 * 生成自增id（从0开始）
 * @param type
 */
function getAutoIncId(type) {
    var index = _getAutoIncIdMap[type] || 0;
    _getAutoIncIdMap[type] = index++;
    return type + "-" + index;
}
/**
 * 判断对象是否为null或者空对象
 * @param obj 要判断的对象
 * @returns {boolean} 是否为null或者空对象
 */
function isEmpty(obj) {
    var result = true;
    for (var key in obj) {
        result = false;
        break;
    }
    return result;
}
/**
 * 移除data中包含的空引用或未定义
 * @param data 要被移除空引用或未定义的对象
 */
function trimData(data) {
    for (var key in data) {
        if (data[key] == null) {
            delete data[key];
        }
    }
    return data;
}
/**
 * 让child类继承自parent类
 * @param child 子类
 * @param parent 父类
 */
var extendsClass = (function () {
    var extendStatics = Object["setPrototypeOf"] ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var hash = 0;
var hashTypes = ["object", "function"];
/**
 * 获取一个对象的对象哈希字符串
 *
 * @export
 * @param {*} target 任意对象，可以是基础类型或null
 * @returns {string} 哈希值
 */
function getObjectHash(target) {
    if (target == null)
        return "__object_hash_0__";
    var key = "__object_hash__";
    var value;
    // 只有当前对象上有key才算
    if (target.hasOwnProperty(key))
        value = target[key];
    // 如果已经有哈希值则直接返回
    if (value)
        return value;
    // 如果是基础类型则直接返回对应字符串
    var type = typeof target;
    if (hashTypes.indexOf(type) < 0)
        return type + ":" + target;
    // 如果是复杂类型则返回计算的哈希值并打上标签
    var value = "__object_hash_" + (++hash) + "__";
    Object.defineProperty(target, key, {
        configurable: true,
        enumerable: false,
        writable: false,
        value: value
    });
    return value;
}
/**
 * 获取多个对象的哈希字符串，会对每个对象调用getObjectHash生成单个哈希值，并用|连接
 *
 * @export
 * @param {...any[]} targets 希望获取哈希值的对象列表
 * @returns {string} 多个对象共同作用下的哈希值
 */
function getObjectHashs() {
    var targets = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        targets[_i] = arguments[_i];
    }
    var values = targets.map(function (target) { return getObjectHash(target); });
    return values.join("|");
}


/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ObjectUtil__ = __webpack_require__(2);

/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-15
 * @modify date 2017-09-15
 *
 * 字典，支持key为任意类型的对象
*/
var Dictionary = /** @class */ (function () {
    function Dictionary() {
        this._keyDict = {};
        this._valueDict = {};
    }
    Object.defineProperty(Dictionary.prototype, "size", {
        /**
         * 获取字典内的元素数量
         *
         * @readonly
         * @type {number}
         * @memberof Dictionary
         */
        get: function () {
            var size = 0;
            for (var hash in this._keyDict)
                size++;
            return size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Dictionary.prototype, "keys", {
        /**
         * 获取字典key的集合
         *
         * @readonly
         * @type {K[]}
         * @memberof Dictionary
         */
        get: function () {
            var keys = [];
            for (var hash in this._keyDict) {
                keys.push(this._keyDict[hash]);
            }
            return keys;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Dictionary.prototype, "values", {
        /**
         * 获取字典值的集合
         *
         * @readonly
         * @type {V[]}
         * @memberof Dictionary
         */
        get: function () {
            var values = [];
            for (var hash in this._valueDict) {
                values.push(this._valueDict[hash]);
            }
            return values;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 设置一个键值对
     *
     * @param {K} key 键
     * @param {V} value 值
     * @memberof Dictionary
     */
    Dictionary.prototype.set = function (key, value) {
        var hash = Object(__WEBPACK_IMPORTED_MODULE_0__ObjectUtil__["d" /* getObjectHash */])(key);
        this._keyDict[hash] = key;
        this._valueDict[hash] = value;
    };
    /**
     * 获取一个值
     *
     * @param {K} key 键
     * @returns {V} 值
     * @memberof Dictionary
     */
    Dictionary.prototype.get = function (key) {
        var hash = Object(__WEBPACK_IMPORTED_MODULE_0__ObjectUtil__["d" /* getObjectHash */])(key);
        return this._valueDict[hash];
    };
    /**
     * 删除一个键值对
     *
     * @param {K} key 键
     * @memberof Dictionary
     */
    Dictionary.prototype.delete = function (key) {
        var hash = Object(__WEBPACK_IMPORTED_MODULE_0__ObjectUtil__["d" /* getObjectHash */])(key);
        delete this._keyDict[hash];
        delete this._valueDict[hash];
    };
    /**
     * 遍历字典
     *
     * @param {(key:K, value:V)=>void} callback 每次遍历的回调
     * @memberof Dictionary
     */
    Dictionary.prototype.forEach = function (callback) {
        for (var hash in this._keyDict) {
            var key = this._keyDict[hash];
            var value = this._valueDict[hash];
            callback(key, value);
        }
    };
    return Dictionary;
}());
/* harmony default export */ __webpack_exports__["a"] = (Dictionary);


/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return bridgeManager; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_injector_Injector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__BridgeMessage__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__panel_PanelManager__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__module_ModuleManager__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__mask_MaskManager__ = __webpack_require__(11);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};






/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-06
 * @modify date 2017-09-06
 *
 * 用来管理所有表现层对象
*/
var BridgeManager = /** @class */ (function () {
    function BridgeManager() {
        this._bridgeDict = {};
        this._bridgeList = [];
    }
    Object.defineProperty(BridgeManager.prototype, "currentBridge", {
        /**
         * 获取当前的表现层桥实例（规则是取当前模块的第一个拥有bridge属性的Mediator的bridge）
         *
         * @readonly
         * @type {IBridge}
         * @memberof BridgeManager
         */
        get: function () {
            // 先用当前模块的首个拥有bridge的Mediator的bridge
            var curModule = __WEBPACK_IMPORTED_MODULE_4__module_ModuleManager__["moduleManager"].currentModuleInstance;
            if (curModule) {
                var bridge;
                var mediators = curModule.delegatedMediators;
                for (var _i = 0, mediators_1 = mediators; _i < mediators_1.length; _i++) {
                    var mediator = mediators_1[_i];
                    if (mediator.bridge)
                        return mediator.bridge;
                }
            }
            // 没找到，再用第一个桥代替
            return (this._bridgeList[0] && this._bridgeList[0][0]);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取表现层桥实例
     *
     * @param {string} type 表现层类型
     * @returns {IBridge} 表现层桥实例
     * @memberof BridgeManager
     */
    BridgeManager.prototype.getBridge = function (type) {
        var data = this._bridgeDict[type];
        return (data && data[0]);
    };
    /**
     * 通过给出一个显示对象皮肤实例来获取合适的表现层桥实例
     *
     * @param {*} skin 皮肤实例
     * @returns {IBridge|null} 皮肤所属表现层桥实例
     * @memberof BridgeManager
     */
    BridgeManager.prototype.getBridgeBySkin = function (skin) {
        if (skin) {
            // 遍历所有已注册的表现层桥进行判断
            for (var _i = 0, _a = this._bridgeList; _i < _a.length; _i++) {
                var data = _a[_i];
                var bridge = data[0];
                if (bridge.isMySkin(skin))
                    return bridge;
            }
        }
        return null;
    };
    /**
     * 注册一个表现层桥实例到框架中
     *
     * @param {...IBridge[]} bridges 要注册的所有表现层桥
     * @memberof BridgeManager
     */
    BridgeManager.prototype.registerBridge = function () {
        var _this = this;
        var bridges = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            bridges[_i] = arguments[_i];
        }
        // 进行DOM初始化判断
        if (!document.body) {
            var onLoad = function (evt) {
                window.removeEventListener("load", onLoad);
                // 重新调用注册方法
                _this.registerBridge.apply(_this, bridges);
            };
            window.addEventListener("load", onLoad);
            return;
        }
        // 进行初始化
        if (bridges.length > 0) {
            var self = this;
            // 记录
            for (var _a = 0, bridges_1 = bridges; _a < bridges_1.length; _a++) {
                var bridge = bridges_1[_a];
                var type = bridge.type;
                if (!this._bridgeDict[type]) {
                    var data = [bridge, false];
                    this._bridgeDict[type] = data;
                    this._bridgeList.push(data);
                }
            }
            // 开始初始化
            for (var _b = 0, bridges_2 = bridges; _b < bridges_2.length; _b++) {
                var bridge = bridges_2[_b];
                // 派发消息
                __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].dispatch(__WEBPACK_IMPORTED_MODULE_2__BridgeMessage__["a" /* default */].BRIDGE_BEFORE_INIT, bridge);
                // 初始化Mask
                __WEBPACK_IMPORTED_MODULE_5__mask_MaskManager__["a" /* maskManager */].registerMask(bridge.type, bridge.maskEntity);
                // 注册通用提示框
                __WEBPACK_IMPORTED_MODULE_3__panel_PanelManager__["a" /* panelManager */].registerPrompt(bridge.type, bridge.promptClass);
                // 初始化该表现层实例
                if (bridge.init)
                    bridge.init(afterInitBridge);
                else
                    afterInitBridge(bridge);
                // 先隐藏表现层桥的htmlWrapper
                bridge.htmlWrapper.style.display = "none";
            }
        }
        else {
            this.testAllInit();
        }
        function afterInitBridge(bridge) {
            // 派发消息
            __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].dispatch(__WEBPACK_IMPORTED_MODULE_2__BridgeMessage__["a" /* default */].BRIDGE_AFTER_INIT, bridge);
            // 设置初始化完毕属性
            var data = self._bridgeDict[bridge.type];
            data[1] = true;
            // 测试是否全部初始化完毕
            self.testAllInit();
        }
    };
    BridgeManager.prototype.testAllInit = function () {
        var allInited = true;
        for (var _i = 0, _a = this._bridgeList; _i < _a.length; _i++) {
            var data = _a[_i];
            allInited = allInited && data[1];
        }
        if (allInited)
            __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].dispatch(__WEBPACK_IMPORTED_MODULE_2__BridgeMessage__["a" /* default */].BRIDGE_ALL_INIT);
    };
    BridgeManager = __decorate([
        __WEBPACK_IMPORTED_MODULE_1__core_injector_Injector__["Injectable"]
    ], BridgeManager);
    return BridgeManager;
}());
/* unused harmony default export */ var _unused_webpack_default_export = (BridgeManager);
/** 再额外导出一个单例 */
var bridgeManager = __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].getInject(BridgeManager);


/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "environment", function() { return environment; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_injector_Injector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_URLUtil__ = __webpack_require__(17);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-21
 * @modify date 2017-09-21
 *
 * 环境参数
*/
var Environment = /** @class */ (function () {
    function Environment() {
    }
    Object.defineProperty(Environment.prototype, "env", {
        /**
         * 获取当前环境字符串
         *
         * @readonly
         * @type {string}
         * @memberof Environment
         */
        get: function () {
            return this._env;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Environment.prototype, "hostsDict", {
        /**
         * 获取域名字典
         *
         * @readonly
         * @type {{[env:string]:string[]}}
         * @memberof Environment
         */
        get: function () {
            return this._hostsDict;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取当前环境下某索引处的消息域名
     *
     * @param {number} [index=0] 域名字典索引，默认是0
     * @returns {string} 域名字符串，如果取不到则使用当前域名
     * @memberof Environment
     */
    Environment.prototype.getHost = function (index) {
        if (index === void 0) { index = 0; }
        var hosts = this._hostsDict[this._env];
        if (!hosts)
            return window.location.origin;
        return (hosts[index] || window.location.origin);
    };
    Object.defineProperty(Environment.prototype, "cdnsDict", {
        /**
         * 获取CDN字典
         *
         * @readonly
         * @type {{[env:string]:string[]}}
         * @memberof Environment
         */
        get: function () {
            return this._cdnsDict;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Environment.prototype, "curCDNHost", {
        /**
         * 获取当前使用的CDN域名
         *
         * @readonly
         * @type {string}
         * @memberof Environment
         */
        get: function () {
            var cdns = this._cdnsDict[this._env];
            if (!cdns)
                return window.location.origin;
            return (cdns[this._curCDNIndex] || window.location.origin);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 切换下一个CDN
     *
     * @returns {boolean} 是否已经到达CDN列表的终点，回到了起点
     * @memberof Environment
     */
    Environment.prototype.nextCDN = function () {
        var cdns = this._cdnsDict[this._env];
        if (!cdns)
            return true;
        this._curCDNIndex++;
        if (this._curCDNIndex >= cdns.length) {
            this._curCDNIndex = 0;
            return true;
        }
        return false;
    };
    /**
     * 初始化Environment对象，因为该对象保存的数据基本来自项目初始参数，所以必须有initialize方法
     *
     * @param {string} [env] 当前所属环境字符串
     * @param {{[env:string]:string[]}} [hostsDict] host数组字典
     * @param {{[env:string]:string[]}} [cdnsDict] cdn数组字典
     * @memberof Environment
     */
    Environment.prototype.initialize = function (env, hostsDict, cdnsDict) {
        this._env = env || "dev";
        this._hostsDict = hostsDict || {};
        this._cdnsDict = cdnsDict || {};
        this._curCDNIndex = 0;
    };
    /**
     * 让url的域名变成消息域名
     *
     * @param {string} url 要转变的url
     * @param {number} [index=0] host索引，默认0
     * @returns {string} 转变后的url
     * @memberof Environment
     */
    Environment.prototype.toHostURL = function (url, index) {
        if (index === void 0) { index = 0; }
        // 加上domain
        url = Object(__WEBPACK_IMPORTED_MODULE_2__utils_URLUtil__["d" /* wrapHost */])(url, this.getHost(index));
        // 返回url
        return url;
    };
    /**
     * 让url的域名变成CDN域名
     *
     * @param {string} url 要转变的url
     * @param {boolean} [forced=false] 是否强制替换host
     * @param {boolean} [infix=true] 是否加入路径中缀，即host之后，index.html之前的部分，默认加入
     * @returns {string} 转变后的url
     * @memberof Environment
     */
    Environment.prototype.toCDNHostURL = function (url, forced, infix) {
        if (forced === void 0) { forced = false; }
        if (infix === void 0) { infix = true; }
        if (infix) {
            // 组织中缀
            var midnameIndex = window.location.pathname.lastIndexOf("/");
            var midname = window.location.pathname.substring(0, midnameIndex + 1);
            return Object(__WEBPACK_IMPORTED_MODULE_2__utils_URLUtil__["d" /* wrapHost */])(url, this.curCDNHost + "/" + midname, forced);
        }
        else {
            // 只替换域名
            return Object(__WEBPACK_IMPORTED_MODULE_2__utils_URLUtil__["d" /* wrapHost */])(url, this.curCDNHost, forced);
        }
    };
    Environment = __decorate([
        __WEBPACK_IMPORTED_MODULE_1__core_injector_Injector__["Injectable"]
    ], Environment);
    return Environment;
}());
/* harmony default export */ __webpack_exports__["default"] = (Environment);
/** 再额外导出一个单例 */
var environment = __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].getInject(Environment);


/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["d"] = wrapConstruct;
/* harmony export (immutable) */ __webpack_exports__["a"] = getConstructor;
/* harmony export (immutable) */ __webpack_exports__["b"] = listenConstruct;
/* unused harmony export unlistenConstruct */
/* harmony export (immutable) */ __webpack_exports__["c"] = listenDispose;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_ObjectUtil__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_Dictionary__ = __webpack_require__(3);


/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-13
 * @modify date 2017-09-13
 *
 * 装饰器工具集
*/
var instanceDict = new __WEBPACK_IMPORTED_MODULE_1__utils_Dictionary__["a" /* default */]();
function handleInstance(instance) {
    var cls = instance.constructor;
    cls = cls["__ori_constructor__"] || cls;
    var funcs = instanceDict.get(cls);
    if (funcs)
        for (var _i = 0, funcs_1 = funcs; _i < funcs_1.length; _i++) {
            var func = funcs_1[_i];
            func(instance);
        }
}
/**
 * 包装一个类型，监听类型的实例化操作
 *
 * @export
 * @param {IConstructor} cls 要监听构造的类型构造器
 * @returns {IConstructor} 新的构造函数
 */
function wrapConstruct(cls) {
    // 创建一个新的构造函数
    var func;
    eval('func = function ' + cls["name"] + '(){onConstruct.call(this, arguments)}');
    // 动态设置继承
    Object(__WEBPACK_IMPORTED_MODULE_0__utils_ObjectUtil__["c" /* extendsClass */])(func, cls);
    // 为新的构造函数打一个标签，用以记录原始的构造函数
    func["__ori_constructor__"] = cls;
    // 为原始构造函数也打一个标签，用以记录新构造函数
    cls["__wrap_constructor__"] = func;
    // 返回新的构造函数
    return func;
    function onConstruct(args) {
        // 恢复__proto__
        this["__proto__"] = cls.prototype;
        // 调用父类构造函数构造实例
        cls.apply(this, args);
        // 调用回调
        handleInstance(this);
    }
}
/**
 * 如果传入的类有包装类，则返回包装类，否则返回其本身
 *
 * @export
 * @param {IConstructor} cls 要获取包装类的类构造函数
 * @returns {IConstructor}
 */
function getConstructor(cls) {
    return (cls["__wrap_constructor__"] || cls);
}
/**
 * 监听类型的实例化
 *
 * @export
 * @param {IConstructor} cls 要监听实例化的类
 * @param {(instance?:any)=>void} handler 处理函数
 */
function listenConstruct(cls, handler) {
    cls = cls["__ori_constructor__"] || cls;
    var list = instanceDict.get(cls);
    if (!list)
        instanceDict.set(cls, list = []);
    if (list.indexOf(handler) < 0)
        list.push(handler);
}
/**
 * 移除实例化监听
 *
 * @export
 * @param {IConstructor} cls 要移除监听实例化的类
 * @param {(instance?:any)=>void} handler 处理函数
 */
function unlistenConstruct(cls, handler) {
    cls = cls["__ori_constructor__"] || cls;
    var list = instanceDict.get(cls);
    if (list) {
        var index = list.indexOf(handler);
        if (index >= 0)
            list.splice(index, 1);
    }
}
/**
 * 监听类型销毁（如果能够销毁的话，需要类型具有dispose方法），该监听不需要移除
 *
 * @export
 * @param {IConstructor} cls 要监听销毁的类
 * @param {(instance?:any)=>void} handler 处理函数
 */
function listenDispose(cls, handler) {
    var dispose = cls.prototype.dispose;
    // 判断类型是否具有dispose方法
    if (dispose) {
        // 替换dispose方法
        cls.prototype.dispose = function () {
            // 调用回调
            handler(this);
            // 调用原始dispose方法执行销毁
            return dispose.apply(this, arguments);
        };
    }
}


/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "netManager", function() { return netManager; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_injector_Injector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_message_CoreMessage__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_ObjectUtil__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__RequestData__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__NetMessage__ = __webpack_require__(49);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__mask_MaskManager__ = __webpack_require__(11);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







var NetManager = /** @class */ (function () {
    function NetManager() {
        this._responseDict = {};
        this._responseListeners = {};
        __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].listen(__WEBPACK_IMPORTED_MODULE_2__core_message_CoreMessage__["a" /* default */].MESSAGE_DISPATCHED, this.onMsgDispatched, __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */]);
    }
    NetManager.prototype.onMsgDispatched = function (msg) {
        var observable = this.observable;
        // 如果消息是通讯消息则做处理
        if (msg instanceof __WEBPACK_IMPORTED_MODULE_4__RequestData__["default"]) {
            // 添加遮罩
            __WEBPACK_IMPORTED_MODULE_6__mask_MaskManager__["a" /* maskManager */].showLoading(null, "net");
            // 指定消息参数连接上公共参数作为参数
            Object(__WEBPACK_IMPORTED_MODULE_3__utils_ObjectUtil__["b" /* extendObject */])(msg.__params.data, __WEBPACK_IMPORTED_MODULE_4__RequestData__["commonData"]);
            // 发送消息
            msg.__policy.sendRequest(msg);
            // 派发系统消息
            observable.dispatch(__WEBPACK_IMPORTED_MODULE_5__NetMessage__["a" /* default */].NET_REQUEST, msg);
        }
    };
    /**
     * 注册一个返回结构体
     *
     * @param {string} type 返回类型
     * @param {IResponseDataConstructor} cls 返回结构体构造器
     * @memberof NetManager
     */
    NetManager.prototype.registerResponse = function (cls) {
        this._responseDict[cls.type] = cls;
    };
    /**
     * 添加一个通讯返回监听
     *
     * @param {(IResponseDataConstructor|string)} clsOrType 要监听的返回结构构造器或者类型字符串
     * @param {ResponseHandler} handler 回调函数
     * @param {*} [thisArg] this指向
     * @param {boolean} [once=false] 是否一次性监听
     * @param {IObservable} [observable] 要发送到的内核
     * @memberof NetManager
     */
    NetManager.prototype.listenResponse = function (clsOrType, handler, thisArg, once, observable) {
        if (once === void 0) { once = false; }
        if (!observable)
            observable = __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].observable;
        var type = (typeof clsOrType == "string" ? clsOrType : clsOrType.type);
        var listeners = this._responseListeners[type];
        if (!listeners)
            this._responseListeners[type] = listeners = [];
        for (var _i = 0, listeners_1 = listeners; _i < listeners_1.length; _i++) {
            var listener = listeners_1[_i];
            if (handler == listener[0] && thisArg == listener[1] && once == listener[2])
                return;
        }
        listeners.push([handler, thisArg, once, observable]);
    };
    /**
     * 移除一个通讯返回监听
     *
     * @param {(IResponseDataConstructor|string)} clsOrType 要移除监听的返回结构构造器或者类型字符串
     * @param {ResponseHandler} handler 回调函数
     * @param {*} [thisArg] this指向
     * @param {boolean} [once=false] 是否一次性监听
     * @param {IObservable} [observable] 要发送到的内核
     * @memberof NetManager
     */
    NetManager.prototype.unlistenResponse = function (clsOrType, handler, thisArg, once, observable) {
        if (once === void 0) { once = false; }
        if (!observable)
            observable = __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].observable;
        var type = (typeof clsOrType == "string" ? clsOrType : clsOrType.type);
        var listeners = this._responseListeners[type];
        if (listeners) {
            for (var i = 0, len = listeners.length; i < len; i++) {
                var listener = listeners[i];
                if (handler == listener[0] && thisArg == listener[1] && once == listener[2] && observable == listener[3]) {
                    listeners.splice(i, 1);
                    break;
                }
            }
        }
    };
    /**
     * 发送多条请求，并且等待返回结果（如果有的话），调用回调
     *
     * @param {RequestData[]} [requests 要发送的请求列表
     * @param {(responses?:ResponseData[])=>void} [handler] 收到返回结果后的回调函数
     * @param {*} [thisArg] this指向
     * @param {IObservable} [observable] 要发送到的内核
     * @memberof NetManager
     */
    NetManager.prototype.sendMultiRequests = function (requests, handler, thisArg, observable) {
        var responses = [];
        var leftResCount = 0;
        if (!observable)
            observable = __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].observable;
        for (var _i = 0, _a = requests || []; _i < _a.length; _i++) {
            var request = _a[_i];
            var response = request.__params.response;
            if (response) {
                // 监听一次性返回
                this.listenResponse(response, onResponse, this, true);
                // 记录返回监听
                responses.push(response);
                // 记录数量
                leftResCount++;
            }
            // 发送请求
            observable.dispatch(request);
        }
        // 测试回调
        testCallback();
        function onResponse(response) {
            for (var key in responses) {
                var temp = responses[key];
                if (temp == response.constructor) {
                    responses[key] = response;
                    leftResCount--;
                    // 测试回调
                    testCallback();
                    break;
                }
            }
        }
        function testCallback() {
            // 判断是否全部替换完毕
            if (leftResCount <= 0) {
                handler && handler.call(thisArg, responses);
            }
        }
    };
    /** 这里导出不希望用户使用的方法，供框架内使用 */
    NetManager.prototype.__onResponse = function (type, result, request) {
        // 移除遮罩
        __WEBPACK_IMPORTED_MODULE_6__mask_MaskManager__["a" /* maskManager */].hideLoading("net");
        // 解析结果
        var cls = this._responseDict[type];
        if (cls) {
            var response = new cls();
            // 执行解析
            response.parse(result);
            // 设置配对请求和发送内核
            var observable = __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].observable;
            if (request) {
                response.__params.request = request;
                // 如果有配对请求，则将返回值发送到请求所在的原始内核里
                observable = request.__oriObservable;
            }
            // 派发事件
            observable.dispatch(__WEBPACK_IMPORTED_MODULE_5__NetMessage__["a" /* default */].NET_RESPONSE, response, response.__params.request);
            // 递归处理事件监听
            this.recurseResponse(type, response, observable);
        }
        else {
            console.warn("没有找到返回结构体定义：" + type);
        }
    };
    NetManager.prototype.recurseResponse = function (type, response, observable) {
        // 先递归父级，与消息发送时顺序相反
        if (observable.parent) {
            this.recurseResponse(type, response, observable.parent);
        }
        // 触发事件形式监听
        var listeners = this._responseListeners[type];
        if (listeners) {
            listeners = listeners.concat();
            for (var _i = 0, listeners_2 = listeners; _i < listeners_2.length; _i++) {
                var listener = listeners_2[_i];
                if (listener[3] == observable) {
                    // 必须是同核消息才能触发回调
                    listener[0].call(listener[1], response, response.__params.request);
                    // 如果是一次性监听则移除之
                    if (listener[2])
                        this.unlistenResponse(type, listener[0], listener[1], listener[2], listener[3]);
                }
            }
        }
    };
    NetManager.prototype.__onError = function (err, request) {
        // 移除遮罩
        __WEBPACK_IMPORTED_MODULE_6__mask_MaskManager__["a" /* maskManager */].hideLoading("net");
        // 如果有配对请求，则将返回值发送到请求所在的原始内核里
        var observable = request && request.__oriObservable;
        // 派发事件
        observable.dispatch(__WEBPACK_IMPORTED_MODULE_5__NetMessage__["a" /* default */].NET_ERROR, err, request);
    };
    NetManager = __decorate([
        __WEBPACK_IMPORTED_MODULE_1__core_injector_Injector__["Injectable"],
        __metadata("design:paramtypes", [])
    ], NetManager);
    return NetManager;
}());
/* harmony default export */ __webpack_exports__["default"] = (NetManager);
/** 再额外导出一个单例 */
var netManager = __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].getInject(NetManager);


/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moduleManager", function() { return moduleManager; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_injector_Injector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__net_NetManager__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ModuleMessage__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__env_Environment__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__mask_MaskManager__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__assets_AssetsManager__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__audio_AudioManager__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__version_Version__ = __webpack_require__(13);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};









/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-14
 * @modify date 2017-09-15
 *
 * 模块管理器，管理模块相关的所有操作。模块具有唯一性，同一时间不可以打开两个相同模块，如果打开则会退回到先前的模块处
*/
var ModuleManager = /** @class */ (function () {
    function ModuleManager() {
        this._moduleDict = {};
        this._moduleStack = [];
        this._openCache = [];
        this._opening = null;
    }
    Object.defineProperty(ModuleManager.prototype, "currentModule", {
        /**
         * 获取当前模块
         *
         * @readonly
         * @type {IModuleConstructor|undefined}
         * @memberof ModuleManager
         */
        get: function () {
            var curData = this.getCurrent();
            return (curData && curData[0]);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModuleManager.prototype, "currentModuleInstance", {
        /**
         * 获取当前模块的实例
         *
         * @readonly
         * @type {(IModule|undefined)}
         * @memberof ModuleManager
         */
        get: function () {
            var curData = this.getCurrent();
            return (curData && curData[1]);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModuleManager.prototype, "activeCount", {
        /**
         * 获取活动模块数量
         *
         * @readonly
         * @type {number}
         * @memberof ModuleManager
         */
        get: function () {
            return this._moduleStack.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取模块在栈中的索引
     *
     * @param {IModuleConstructor} cls 模块类型
     * @returns {number} 索引值
     * @memberof ModuleManager
     */
    ModuleManager.prototype.getIndex = function (cls) {
        for (var i = 0, len = this._moduleStack.length; i < len; i++) {
            if (this._moduleStack[i][0] == cls)
                return i;
        }
        return -1;
    };
    /**
     * 获取索引处模块类型
     *
     * @param {number} index 模块索引值
     * @returns {IModuleConstructor} 模块类型
     * @memberof ModuleManager
     */
    ModuleManager.prototype.getModule = function (index) {
        var data = this._moduleStack[index];
        return data && data[0];
    };
    ModuleManager.prototype.getAfter = function (cls) {
        var result = [];
        for (var _i = 0, _a = this._moduleStack; _i < _a.length; _i++) {
            var module = _a[_i];
            if (module[0] == cls)
                return result;
            result.push(module);
        }
        return null;
    };
    ModuleManager.prototype.getCurrent = function () {
        // 按顺序遍历模块，取出最新的没有在开启中的模块
        var target;
        for (var _i = 0, _a = this._moduleStack; _i < _a.length; _i++) {
            var temp = _a[_i];
            if (temp[0] !== this._opening) {
                target = temp;
                break;
            }
        }
        return target;
    };
    ModuleManager.prototype.registerModule = function (cls) {
        this._moduleDict[cls["name"]] = cls;
    };
    /**
     * 获取模块是否开启中
     *
     * @param {IModuleConstructor} cls 要判断的模块类型
     * @returns {boolean} 是否开启
     * @memberof ModuleManager
     */
    ModuleManager.prototype.isOpened = function (cls) {
        return (this._moduleStack.filter(function (temp) { return temp[0] == cls; }).length > 0);
    };
    ModuleManager.prototype.activateModule = function (module, from, data) {
        if (module) {
            // 调用onActivate接口
            module.onActivate(from, data);
            // 播放背景音乐
            var bgMusic = module.bgMusic;
            if (bgMusic) {
                // 使用Music音频播放
                __WEBPACK_IMPORTED_MODULE_7__audio_AudioManager__["audioManager"].playMusic({ url: bgMusic, loop: true, stopOthers: true });
            }
        }
    };
    ModuleManager.prototype.deactivateModule = function (module, to, data) {
        if (module) {
            // 调用onDeactivate接口
            module.onDeactivate(to, data);
        }
    };
    /**
     * 打开模块
     *
     * @param {IModuleConstructor|string} clsOrName 模块类型或名称
     * @param {*} [data] 参数
     * @param {boolean} [replace=false] 是否替换当前模块
     * @memberof ModuleManager
     */
    ModuleManager.prototype.open = function (clsOrName, data, replace) {
        var _this = this;
        if (replace === void 0) { replace = false; }
        // 如果是字符串则获取引用
        var cls = (typeof clsOrName == "string" ? this._moduleDict[clsOrName] : clsOrName);
        // 非空判断
        if (!cls)
            return;
        // 判断是否正在打开模块
        if (this._opening) {
            this._openCache.push([cls, data, replace]);
            return;
        }
        this._opening = cls;
        var after = this.getAfter(cls);
        if (!after) {
            // 尚未打开过，正常开启模块
            var target = new cls();
            // 赋值打开参数
            target.data = data;
            // 数据先行
            var from = this.getCurrent();
            var fromModule = from && from[1];
            this._moduleStack.unshift([cls, target]);
            // 记一个是否需要遮罩的flag
            var maskFlag = true;
            // 加载所有已托管中介者的资源
            var mediators = target.delegatedMediators.concat();
            var loadMediatorAssets = function (err) {
                if (err) {
                    // 隐藏Loading
                    if (!maskFlag)
                        __WEBPACK_IMPORTED_MODULE_5__mask_MaskManager__["a" /* maskManager */].hideLoading("module");
                    maskFlag = false;
                    // 停止加载，调用模块加载失败接口
                    target.onLoadAssets(err);
                }
                else if (mediators.length > 0) {
                    var mediator = mediators.shift();
                    mediator.loadAssets(loadMediatorAssets);
                }
                else {
                    // 隐藏Loading
                    if (!maskFlag)
                        __WEBPACK_IMPORTED_MODULE_5__mask_MaskManager__["a" /* maskManager */].hideLoading("module");
                    maskFlag = false;
                    // 调用onLoadAssets接口
                    target.onLoadAssets();
                    // 开始加载css文件，css文件必须用link标签从CDN加载，因为图片需要从CDN加载
                    var cssFiles = target.listStyleFiles();
                    if (cssFiles) {
                        for (var _i = 0, cssFiles_1 = cssFiles; _i < cssFiles_1.length; _i++) {
                            var cssFile = cssFiles_1[_i];
                            var cssNode = document.createElement("link");
                            cssNode.rel = "stylesheet";
                            cssNode.type = "text/css";
                            cssNode.href = __WEBPACK_IMPORTED_MODULE_4__env_Environment__["environment"].toCDNHostURL(__WEBPACK_IMPORTED_MODULE_8__version_Version__["a" /* version */].wrapHashUrl(cssFile));
                            document.body.appendChild(cssNode);
                        }
                    }
                    // 开始加载js文件，这里js文件使用嵌入html的方式，以为这样js不会跨域，报错信息可以收集到
                    __WEBPACK_IMPORTED_MODULE_6__assets_AssetsManager__["a" /* assetsManager */].loadAssets(target.listJsFiles(), function (results) {
                        if (results instanceof Error) {
                            target.onLoadAssets(results);
                            return;
                        }
                        if (results) {
                            // 使用script标签将js文件加入html中
                            var jsNode = document.createElement("script");
                            jsNode.innerHTML = results.join("\n");
                            document.body.appendChild(jsNode);
                        }
                        // 发送所有模块消息，模块消息默认发送全局内核
                        var requests = target.listInitRequests();
                        __WEBPACK_IMPORTED_MODULE_2__net_NetManager__["netManager"].sendMultiRequests(requests, function (responses) {
                            // 赋值responses
                            target.responses = responses;
                            // 关闭标识符
                            this._opening = null;
                            // 调用onOpen接口
                            target.onOpen(data);
                            // 调用onDeactivate接口
                            this.deactivateModule(fromModule && fromModule, cls, data);
                            // 调用onActivate接口
                            this.activateModule(target, from && from[0], data);
                            // 如果replace是true，则关掉上一个模块
                            if (replace)
                                this.close(from && from[0], data);
                            // 派发消息
                            __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].dispatch(__WEBPACK_IMPORTED_MODULE_3__ModuleMessage__["default"].MODULE_CHANGE, cls, from && from[0]);
                            // 如果有缓存的模块需要打开则打开之
                            if (this._openCache.length > 0)
                                this.open.apply(this, this._openCache.shift());
                        }, _this, target.observable);
                    });
                }
            };
            loadMediatorAssets();
            // 显示Loading
            if (maskFlag) {
                __WEBPACK_IMPORTED_MODULE_5__mask_MaskManager__["a" /* maskManager */].showLoading(null, "module");
                maskFlag = false;
            }
        }
        else if (after.length > 0) {
            // 已经打开且不是当前模块，先关闭当前模块到目标模块之间的所有模块
            for (var i = 1, len = after.length; i < len; i++) {
                this.close(after[i][0], data);
            }
            // 最后关闭当前模块，以实现从当前模块直接跳回到目标模块
            this.close(after[0][0], data);
            // 关闭标识符
            this._opening = null;
        }
        else {
            // 关闭标识符
            this._opening = null;
        }
    };
    /**
     * 关闭模块，只有关闭的是当前模块时才会触发onDeactivate和onActivate，否则只会触发onClose
     *
     * @param {IModuleConstructor|string} clsOrName 模块类型或名称
     * @param {*} [data] 参数
     * @memberof ModuleManager
     */
    ModuleManager.prototype.close = function (clsOrName, data) {
        // 如果是字符串则获取引用
        var cls = (typeof clsOrName == "string" ? this._moduleDict[clsOrName] : clsOrName);
        // 非空判断
        if (!cls)
            return;
        // 数量判断，不足一个模块时不关闭
        if (this.activeCount <= 1)
            return;
        // 存在性判断
        var index = this.getIndex(cls);
        if (index < 0)
            return;
        // 取到目标模块
        var target = this._moduleStack[index][1];
        // 如果是当前模块，则需要调用onDeactivate和onActivate接口，否则不用
        if (index == 0) {
            // 数据先行
            this._moduleStack.shift();
            // 获取前一个模块
            var to = this._moduleStack[0];
            var toModule = to && to[1];
            // 调用onDeactivate接口
            this.deactivateModule(target, to && to[0], data);
            // 调用onClose接口
            target.onClose(data);
            // 调用onActivate接口
            this.activateModule(toModule && toModule, cls, data);
            // 派发消息
            __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].dispatch(__WEBPACK_IMPORTED_MODULE_3__ModuleMessage__["default"].MODULE_CHANGE, to && to[0], cls);
        }
        else {
            // 数据先行
            this._moduleStack.splice(index, 1);
            // 调用onClose接口
            target.onClose(data);
        }
    };
    ModuleManager = __decorate([
        __WEBPACK_IMPORTED_MODULE_1__core_injector_Injector__["Injectable"]
    ], ModuleManager);
    return ModuleManager;
}());
/* harmony default export */ __webpack_exports__["default"] = (ModuleManager);
/** 再额外导出一个单例 */
var moduleManager = __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].getInject(ModuleManager);


/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return assetsManager; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_injector_Injector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_HTTPUtil__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__version_Version__ = __webpack_require__(13);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};




/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-10-26
 * @modify date 2017-10-26
 *
 * 资源管理器
*/
var AssetsManager = /** @class */ (function () {
    function AssetsManager() {
        this._keyDict = {};
        this._assetsDict = {};
    }
    /**
     * @private
     */
    AssetsManager.prototype.configPath = function (arg1, arg2) {
        if (typeof arg1 == "string") {
            this._keyDict[arg1] = arg2;
        }
        else {
            for (var key in arg1) {
                this._keyDict[key] = arg1[key];
            }
        }
    };
    /**
     * 获取资源，同步的，且如果找不到资源并不会触发加载
     *
     * @param {string} keyOrPath 资源的短名称或路径
     * @returns {*}
     * @memberof AssetsManager
     */
    AssetsManager.prototype.getAssets = function (keyOrPath) {
        var path = this._keyDict[keyOrPath] || keyOrPath;
        return this._assetsDict[path];
    };
    /**
     * 加载资源，如果已加载过则同步回调，如果未加载则加载后异步回调
     *
     * @param {string|string[]} keyOrPath 资源短名称或资源路径
     * @param {(assets?:any|any[])=>void} complete 完成回调，如果加载失败则参数是个Error对象
     * @param {XMLHttpRequestResponseType} [responseType] 加载类型
     * @param {(keyOrPath?:string, assets?:any)=>void} [oneComplete] 一个资源加载完毕会调用这个回调，如果有的话。仅在keyOrPath是数组情况下生效
     * @returns {void}
     * @memberof AssetsManager
     */
    AssetsManager.prototype.loadAssets = function (keyOrPath, complete, responseType, oneComplete) {
        var _this = this;
        // 非空判断
        if (!keyOrPath) {
            complete();
            return;
        }
        // 获取路径
        if (keyOrPath instanceof Array) {
            // 使用副本，防止修改原始数组
            var temp = keyOrPath.concat();
            // 是个数组，转换成单一名称或对象
            var results = [];
            var curKey;
            var onGetOne = function (result) {
                // 记录结果
                results.push(result);
                // 调用回调
                oneComplete && oneComplete(curKey, result);
                // 获取下一个
                getOne();
            };
            var getOne = function () {
                if (temp.length <= 0) {
                    complete(results);
                }
                else {
                    curKey = temp.shift();
                    _this.loadAssets(curKey, onGetOne);
                }
            };
            getOne();
        }
        else {
            // 是单一名称或对象
            var path = this._keyDict[keyOrPath] || keyOrPath;
            // 获取值
            var value = this._assetsDict[path];
            if (value instanceof Array) {
                // 正在加载中，等待之
                value.push(complete);
            }
            else if (value) {
                // 已经加载过了，直接返回
                complete(value);
            }
            else {
                // 没有就去加载
                this._assetsDict[path] = value = [complete];
                Object(__WEBPACK_IMPORTED_MODULE_2__utils_HTTPUtil__["a" /* load */])({
                    url: __WEBPACK_IMPORTED_MODULE_3__version_Version__["a" /* version */].wrapHashUrl(path),
                    useCDN: true,
                    responseType: responseType,
                    onResponse: function (result) {
                        // 记录结果
                        _this._assetsDict[path] = result;
                        // 通知各个回调
                        for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {
                            var handler = value_1[_i];
                            handler(result);
                        }
                    },
                    onError: function (err) {
                        // 移除结果
                        delete _this._assetsDict[path];
                        // 通知各个回调
                        for (var _i = 0, value_2 = value; _i < value_2.length; _i++) {
                            var handler = value_2[_i];
                            handler(err);
                        }
                    }
                });
            }
        }
    };
    AssetsManager = __decorate([
        __WEBPACK_IMPORTED_MODULE_0__core_injector_Injector__["Injectable"]
    ], AssetsManager);
    return AssetsManager;
}());
/* unused harmony default export */ var _unused_webpack_default_export = (AssetsManager);
/** 再额外导出一个单例 */
var assetsManager = __WEBPACK_IMPORTED_MODULE_1__core_Core__["a" /* core */].getInject(AssetsManager);


/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["ModelClass"] = ModelClass;
/* harmony export (immutable) */ __webpack_exports__["MediatorClass"] = MediatorClass;
/* harmony export (immutable) */ __webpack_exports__["ModuleClass"] = ModuleClass;
/* harmony export (immutable) */ __webpack_exports__["MessageHandler"] = MessageHandler;
/* harmony export (immutable) */ __webpack_exports__["GlobalMessageHandler"] = GlobalMessageHandler;
/* harmony export (immutable) */ __webpack_exports__["ResponseHandler"] = ResponseHandler;
/* harmony export (immutable) */ __webpack_exports__["GlobalResponseHandler"] = GlobalResponseHandler;
/* harmony export (immutable) */ __webpack_exports__["DelegateMediator"] = DelegateMediator;
/* harmony export (immutable) */ __webpack_exports__["BindValue"] = BindValue;
/* harmony export (immutable) */ __webpack_exports__["BindFunc"] = BindFunc;
/* harmony export (immutable) */ __webpack_exports__["BindOn"] = BindOn;
/* harmony export (immutable) */ __webpack_exports__["BindIf"] = BindIf;
/* harmony export (immutable) */ __webpack_exports__["BindFor"] = BindFor;
/* harmony export (immutable) */ __webpack_exports__["BindMessage"] = BindMessage;
/* harmony export (immutable) */ __webpack_exports__["BindGlobalMessage"] = BindGlobalMessage;
/* harmony export (immutable) */ __webpack_exports__["BindResponse"] = BindResponse;
/* harmony export (immutable) */ __webpack_exports__["BindGlobalResponse"] = BindGlobalResponse;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_injector_Injector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_message_Message__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_ConstructUtil__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__net_ResponseData__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__net_NetManager__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__bridge_BridgeManager__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__mediator_Mediator__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__module_ModuleManager__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__core_global_Patch__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__utils_Dictionary__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__BindUtil__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_reflect_metadata__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_reflect_metadata___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_reflect_metadata__);














/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-19
 * @modify date 2017-09-19
 *
 * 负责注入的模块
*/
/** 定义数据模型，支持实例注入，并且自身也会被注入 */
function ModelClass() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    // 转调Injectable方法
    if (this === __WEBPACK_IMPORTED_MODULE_9__core_global_Patch__["decorateThis"]) {
        var cls = Object(__WEBPACK_IMPORTED_MODULE_3__utils_ConstructUtil__["d" /* wrapConstruct */])(args[0]);
        __WEBPACK_IMPORTED_MODULE_1__core_injector_Injector__["Injectable"].call(this, cls);
        return cls;
    }
    else {
        var result = __WEBPACK_IMPORTED_MODULE_1__core_injector_Injector__["Injectable"].apply(this, args);
        return function (realCls) {
            realCls = Object(__WEBPACK_IMPORTED_MODULE_3__utils_ConstructUtil__["d" /* wrapConstruct */])(realCls);
            result.call(this, realCls);
            return realCls;
        };
    }
}
/** 定义界面中介者，支持实例注入，并可根据所赋显示对象自动调整所使用的表现层桥 */
function MediatorClass(cls) {
    // 判断一下Mediator是否有dispose方法，没有的话弹一个警告
    if (!cls.prototype.dispose)
        console.warn("Mediator[" + cls["name"] + "]不具有dispose方法，可能会造成内存问题，请让该Mediator实现IDisposable接口");
    // 监听实例化
    Object(__WEBPACK_IMPORTED_MODULE_3__utils_ConstructUtil__["b" /* listenConstruct */])(cls, function (instance) {
        // 替换setSkin方法
        var $skin;
        Object.defineProperty(instance, "skin", {
            configurable: true,
            enumerable: true,
            get: function () {
                return $skin;
            },
            set: function (value) {
                // 记录值
                $skin = value;
                // 根据skin类型选取表现层桥
                this.bridge = __WEBPACK_IMPORTED_MODULE_6__bridge_BridgeManager__["a" /* bridgeManager */].getBridgeBySkin(value);
            }
        });
    });
    return Object(__WEBPACK_IMPORTED_MODULE_3__utils_ConstructUtil__["d" /* wrapConstruct */])(cls);
}
/** 定义模块，支持实例注入 */
function ModuleClass(cls) {
    // 判断一下Module是否有dispose方法，没有的话弹一个警告
    if (!cls.prototype.dispose)
        console.warn("Module[" + cls["name"] + "]不具有dispose方法，可能会造成内存问题，请让该Module实现IDisposable接口");
    // 包装类
    var wrapperCls = Object(__WEBPACK_IMPORTED_MODULE_3__utils_ConstructUtil__["d" /* wrapConstruct */])(cls);
    // 注册模块
    __WEBPACK_IMPORTED_MODULE_8__module_ModuleManager__["moduleManager"].registerModule(wrapperCls);
    // 返回包装类
    return wrapperCls;
}
function MessageHandler(target, key) {
    if (key) {
        var defs = Reflect.getMetadata("design:paramtypes", target, key);
        var resClass = defs[0];
        if (!(resClass.prototype instanceof __WEBPACK_IMPORTED_MODULE_2__core_message_Message__["a" /* default */]))
            throw new Error("@MessageHandler装饰器装饰的方法的首个参数必须是Message");
        doMessageHandler(target.constructor, key, resClass, true);
    }
    else {
        return function (prototype, propertyKey, descriptor) {
            doMessageHandler(prototype.constructor, propertyKey, target, true);
        };
    }
}
;
function GlobalMessageHandler(target, key) {
    if (key) {
        var defs = Reflect.getMetadata("design:paramtypes", target, key);
        var resClass = defs[0];
        if (!(resClass.prototype instanceof __WEBPACK_IMPORTED_MODULE_2__core_message_Message__["a" /* default */]))
            throw new Error("@GlobalMessageHandler装饰器装饰的方法的首个参数必须是Message");
        doMessageHandler(target.constructor, key, resClass, false);
    }
    else {
        return function (prototype, propertyKey, descriptor) {
            doMessageHandler(prototype.constructor, propertyKey, target, false);
        };
    }
}
;
function doMessageHandler(cls, key, type, inModule) {
    // 监听实例化
    Object(__WEBPACK_IMPORTED_MODULE_3__utils_ConstructUtil__["b" /* listenConstruct */])(cls, function (instance) {
        if (instance instanceof __WEBPACK_IMPORTED_MODULE_7__mediator_Mediator__["a" /* default */]) {
            // 如果是Mediator，则需要等到被托管后再执行注册
            addDelegateHandler(instance, function () {
                var observable = inModule ? instance : __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */];
                observable.listen(type, instance[key], instance);
            });
        }
        else {
            var observable = inModule ? instance : __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */];
            observable.listen(type, instance[key], instance);
        }
    });
    // 监听销毁
    Object(__WEBPACK_IMPORTED_MODULE_3__utils_ConstructUtil__["c" /* listenDispose */])(cls, function (instance) {
        var observable = inModule ? instance : __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */];
        observable.unlisten(type, instance[key], instance);
    });
}
function ResponseHandler(target, key) {
    if (key) {
        var defs = Reflect.getMetadata("design:paramtypes", target, key);
        var resClass = defs[0];
        if (!(resClass.prototype instanceof __WEBPACK_IMPORTED_MODULE_4__net_ResponseData__["default"]))
            throw new Error("无参数@ResponseHandler装饰器装饰的方法的首个参数必须是ResponseData");
        doResponseHandler(target.constructor, key, defs[0], true);
    }
    else {
        return function (prototype, propertyKey, descriptor) {
            doResponseHandler(prototype.constructor, propertyKey, target, true);
        };
    }
}
function GlobalResponseHandler(target, key) {
    if (key) {
        var defs = Reflect.getMetadata("design:paramtypes", target, key);
        var resClass = defs[0];
        if (!(resClass.prototype instanceof __WEBPACK_IMPORTED_MODULE_4__net_ResponseData__["default"]))
            throw new Error("无参数@GlobalResponseHandler装饰器装饰的方法的首个参数必须是ResponseData");
        doResponseHandler(target.constructor, key, defs[0], false);
    }
    else {
        return function (prototype, propertyKey, descriptor) {
            doResponseHandler(prototype.constructor, propertyKey, target, false);
        };
    }
}
function doResponseHandler(cls, key, type, inModule) {
    // 监听实例化
    Object(__WEBPACK_IMPORTED_MODULE_3__utils_ConstructUtil__["b" /* listenConstruct */])(cls, function (instance) {
        if (instance instanceof __WEBPACK_IMPORTED_MODULE_7__mediator_Mediator__["a" /* default */]) {
            // 如果是Mediator，则需要等到被托管后再执行注册
            addDelegateHandler(instance, function () {
                __WEBPACK_IMPORTED_MODULE_5__net_NetManager__["netManager"].listenResponse(type, instance[key], instance, false, (inModule ? instance.observable : undefined));
            });
        }
        else {
            __WEBPACK_IMPORTED_MODULE_5__net_NetManager__["netManager"].listenResponse(type, instance[key], instance, false, (inModule ? instance.observable : undefined));
        }
    });
    // 监听销毁
    Object(__WEBPACK_IMPORTED_MODULE_3__utils_ConstructUtil__["c" /* listenDispose */])(cls, function (instance) {
        __WEBPACK_IMPORTED_MODULE_5__net_NetManager__["netManager"].unlistenResponse(type, instance[key], instance, false, (inModule ? instance.observable : undefined));
    });
}
var delegateHandlerDict = new __WEBPACK_IMPORTED_MODULE_10__utils_Dictionary__["a" /* default */]();
function addDelegateHandler(instance, handler) {
    if (!instance)
        return;
    var handlers = delegateHandlerDict.get(instance);
    if (!handlers)
        delegateHandlerDict.set(instance, handlers = []);
    if (handlers.indexOf(handler) < 0)
        handlers.push(handler);
}
/** 在Module内托管Mediator */
function DelegateMediator(prototype, propertyKey) {
    if (prototype.delegateMediator instanceof Function && prototype.undelegateMediator instanceof Function) {
        // 监听实例化
        Object(__WEBPACK_IMPORTED_MODULE_3__utils_ConstructUtil__["b" /* listenConstruct */])(prototype.constructor, function (instance) {
            // 实例化
            var mediator = instance[propertyKey];
            if (mediator === undefined) {
                var cls = Reflect.getMetadata("design:type", prototype, propertyKey);
                instance[propertyKey] = mediator = new cls();
            }
            // 赋值所属模块
            mediator["_dependModuleInstance"] = instance;
            mediator["_dependModule"] = Object(__WEBPACK_IMPORTED_MODULE_3__utils_ConstructUtil__["a" /* getConstructor */])(prototype.constructor);
            // 执行回调
            var handlers = delegateHandlerDict.get(mediator);
            if (handlers) {
                for (var _i = 0, handlers_1 = handlers; _i < handlers_1.length; _i++) {
                    var handler = handlers_1[_i];
                    handler(mediator);
                }
                // 移除记录
                delegateHandlerDict.delete(mediator);
            }
        });
        // 监听销毁
        Object(__WEBPACK_IMPORTED_MODULE_3__utils_ConstructUtil__["c" /* listenDispose */])(prototype.constructor, function (instance) {
            var mediator = instance[propertyKey];
            if (mediator) {
                // 移除所属模块
                mediator["_dependModuleInstance"] = undefined;
                mediator["_dependModule"] = undefined;
                // 移除实例
                instance[propertyKey] = undefined;
            }
        });
        // 篡改属性
        var mediator;
        return {
            configurable: true,
            enumerable: true,
            get: function () {
                return mediator;
            },
            set: function (value) {
                if (value == mediator)
                    return;
                // 取消托管中介者
                if (mediator) {
                    this.undelegateMediator(mediator);
                }
                // 设置中介者
                mediator = value;
                // 托管新的中介者
                if (mediator) {
                    this.delegateMediator(mediator);
                }
            }
        };
    }
}
var onOpenDict = new __WEBPACK_IMPORTED_MODULE_10__utils_Dictionary__["a" /* default */]();
function listenOnOpen(prototype, propertyKey, before, after) {
    Object(__WEBPACK_IMPORTED_MODULE_3__utils_ConstructUtil__["b" /* listenConstruct */])(prototype.constructor, function (mediator) {
        // 篡改onOpen方法
        var oriFunc = mediator.hasOwnProperty("onOpen") ? mediator.onOpen : null;
        mediator.onOpen = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            // 注册到字典中
            var target = mediator[propertyKey];
            // 调用回调
            before && before(mediator);
            // 恢复原始方法
            if (oriFunc)
                mediator.onOpen = oriFunc;
            else
                delete mediator.onOpen;
            // 调用原始方法
            mediator.onOpen.apply(this, args);
            // 调用回调
            after && after(mediator);
            // 递减篡改次数
            var count = onOpenDict.get(mediator) - 1;
            onOpenDict.set(mediator, count);
            // 判断是否所有onOpen都调用完毕，如果完毕了，则启动编译过程
            if (count <= 0) {
                // 移除数据
                onOpenDict.delete(mediator);
                // 全调用完毕了，按层级顺序由浅入深编译
                var bindTargets = mediator.bindTargets;
                for (var depth in bindTargets) {
                    var dict = bindTargets[depth];
                    dict.forEach(function (target) { return __WEBPACK_IMPORTED_MODULE_11__BindUtil__["compile"](mediator, target); });
                }
            }
        };
        // 记录onOpen篡改次数
        var count = onOpenDict.get(mediator) || 0;
        onOpenDict.set(mediator, count + 1);
    });
}
/**
 * 获取显示对象在mediator.skin中的嵌套层级
 *
 * @param {IMediator} mediator 中介者
 * @param {*} target 目标显示对象
 * @returns {number}
 */
function getDepth(mediator, target) {
    var skin = mediator.skin;
    var bridge = mediator.bridge;
    var depth = 0;
    if (bridge.isMySkin(target)) {
        while (target && target !== skin) {
            depth++;
            target = bridge.getParent(target);
        }
        // 如果显示对象是没有根的，或者不在skin的显示树中，则返回0
        if (!target)
            depth = 0;
    }
    return depth;
}
function searchUIDepth(values, mediator, target, callback, addressing) {
    if (addressing === void 0) { addressing = false; }
    // 获取显示层级
    var depth = getDepth(mediator, target);
    // 如果有中断编译则将遍历的工作推迟到中断重启后，否则直接开始遍历
    var stopLeftHandlers = target.__stop_left_handlers__;
    if (stopLeftHandlers)
        stopLeftHandlers.push(handler);
    else
        handler(target, mediator.bindTargets, stopLeftHandlers);
    function handler(target, bindTargets, leftHandlers) {
        var index = -1;
        if (leftHandlers)
            index = leftHandlers.indexOf(handler);
        // 遍历绑定的目标，将编译指令绑定到目标身上，而不是指令所在的显示对象身上
        Object(__WEBPACK_IMPORTED_MODULE_11__BindUtil__["searchUI"])(values, target, function (target, name, exp, depth) {
            if (addressing)
                target = target[name];
            // 记录编译目标到bindTargets中
            var dict = bindTargets[depth];
            if (!dict)
                bindTargets[depth] = dict = new __WEBPACK_IMPORTED_MODULE_10__utils_Dictionary__["a" /* default */]();
            dict.set(target, target);
            // 调用回调
            callback(target, name, exp, leftHandlers, index);
        }, depth);
    }
}
/**
 * @private
 */
function BindValue(arg1, arg2) {
    return function (prototype, propertyKey) {
        listenOnOpen(prototype, propertyKey, function (mediator) {
            // 组织参数字典
            var uiDict;
            if (typeof arg1 == "string") {
                uiDict = {};
                uiDict[arg1] = arg2;
            }
            else {
                uiDict = arg1;
            }
            // 遍历绑定的目标，将编译指令绑定到目标身上，而不是指令所在的显示对象身上
            searchUIDepth(uiDict, mediator, mediator[propertyKey], function (target, name, exp) {
                // 添加编译指令
                __WEBPACK_IMPORTED_MODULE_11__BindUtil__["pushCompileCommand"](target, __WEBPACK_IMPORTED_MODULE_11__BindUtil__["compileValue"], name, exp);
            });
        });
    };
}
/**
 * @private
 */
function BindFunc(arg1, arg2) {
    return function (prototype, propertyKey) {
        listenOnOpen(prototype, propertyKey, function (mediator) {
            // 组织参数字典
            var funcDict;
            if (typeof arg1 == "string") {
                funcDict = {};
                funcDict[arg1] = arg2;
            }
            else {
                funcDict = arg1;
            }
            // 遍历绑定的目标，将编译指令绑定到目标身上，而不是指令所在的显示对象身上
            searchUIDepth(funcDict, mediator, mediator[propertyKey], function (target, name, argExps) {
                // 统一参数类型为字符串数组
                if (typeof argExps == "string")
                    argExps = [argExps];
                // 添加编译指令
                __WEBPACK_IMPORTED_MODULE_11__BindUtil__["pushCompileCommand"].apply(__WEBPACK_IMPORTED_MODULE_11__BindUtil__, [target, __WEBPACK_IMPORTED_MODULE_11__BindUtil__["compileFunc"], name].concat(argExps));
            });
        });
    };
}
/**
 * @private
 */
function BindOn(arg1, arg2, arg3) {
    return function (prototype, propertyKey) {
        listenOnOpen(prototype, propertyKey, function (mediator) {
            // 获取编译启动目标
            var target = mediator[propertyKey];
            // 组织参数字典
            var evtDict;
            if (typeof arg1 == "string") {
                evtDict = {};
                if (arg3) {
                    // 指定了UI对象，先去寻找
                    var nameDict = {};
                    nameDict[arg1] = "";
                    Object(__WEBPACK_IMPORTED_MODULE_11__BindUtil__["searchUI"])(nameDict, target, function (ui, key, value) {
                        target = ui[key];
                    });
                    evtDict[arg2] = arg3;
                }
                else {
                    evtDict[arg1] = arg2;
                }
            }
            else {
                evtDict = arg1;
            }
            // 遍历绑定的目标，将编译指令绑定到目标身上，而不是指令所在的显示对象身上
            searchUIDepth(evtDict, mediator, target, function (target, type, exp) {
                // 添加编译指令
                __WEBPACK_IMPORTED_MODULE_11__BindUtil__["pushCompileCommand"](target, __WEBPACK_IMPORTED_MODULE_11__BindUtil__["compileOn"], type, exp);
            });
        });
    };
}
/**
 * @private
 */
function BindIf(arg1, arg2) {
    return function (prototype, propertyKey) {
        listenOnOpen(prototype, propertyKey, function (mediator) {
            if (typeof arg1 == "string") {
                if (!arg2) {
                    // 没有指定寻址路径，就是要操作当前对象，但也要经过一次searchUIDepth操作
                    searchUIDepth({ r: 13 }, mediator, mediator[propertyKey], function (target, name, exp) {
                        // 添加编译指令
                        __WEBPACK_IMPORTED_MODULE_11__BindUtil__["pushCompileCommand"](target, __WEBPACK_IMPORTED_MODULE_11__BindUtil__["compileIf"], arg1);
                    });
                }
                else {
                    // 指定了寻址路径，需要寻址
                    var uiDict = {};
                    uiDict[arg1] = arg2;
                    // 遍历绑定的目标，将编译指令绑定到目标身上，而不是指令所在的显示对象身上
                    searchUIDepth(uiDict, mediator, mediator[propertyKey], function (target, name, exp) {
                        // 添加编译指令
                        __WEBPACK_IMPORTED_MODULE_11__BindUtil__["pushCompileCommand"](target, __WEBPACK_IMPORTED_MODULE_11__BindUtil__["compileIf"], exp);
                    }, true);
                }
            }
            else {
                // 遍历绑定的目标，将编译指令绑定到目标身上，而不是指令所在的显示对象身上
                searchUIDepth(arg1, mediator, mediator[propertyKey], function (target, name, exp) {
                    // 添加编译指令
                    __WEBPACK_IMPORTED_MODULE_11__BindUtil__["pushCompileCommand"](target, __WEBPACK_IMPORTED_MODULE_11__BindUtil__["compileIf"], exp);
                }, true);
            }
        });
    };
}
/**
 * @private
 */
function BindFor(arg1, arg2) {
    return function (prototype, propertyKey) {
        listenOnOpen(prototype, propertyKey, function (mediator) {
            // 取到编译目标对象
            var target = mediator[propertyKey];
            // 开始赋值指令
            if (typeof arg1 == "string") {
                if (!arg2) {
                    // 没有指定寻址路径，就是要操作当前对象，但也要经过一次searchUIDepth操作
                    searchUIDepth({ r: 13 }, mediator, mediator[propertyKey], function (target, name, exp, leftHandlers, index) {
                        // 添加编译指令
                        __WEBPACK_IMPORTED_MODULE_11__BindUtil__["pushCompileCommand"](target, __WEBPACK_IMPORTED_MODULE_11__BindUtil__["compileFor"], arg1);
                        // 设置中断编译
                        target.__stop_left_handlers__ = leftHandlers ? leftHandlers.splice(index + 1, leftHandlers.length - index - 1) : [];
                    });
                }
                else {
                    // 指定了寻址路径，需要寻址
                    var uiDict = {};
                    uiDict[arg1] = arg2;
                    // 遍历绑定的目标，将编译指令绑定到目标身上，而不是指令所在的显示对象身上
                    searchUIDepth(uiDict, mediator, target, function (target, name, exp, leftHandlers, index) {
                        // 添加编译指令
                        __WEBPACK_IMPORTED_MODULE_11__BindUtil__["pushCompileCommand"](target, __WEBPACK_IMPORTED_MODULE_11__BindUtil__["compileFor"], exp);
                        // 设置中断编译
                        target.__stop_left_handlers__ = leftHandlers ? leftHandlers.splice(index + 1, leftHandlers.length - index - 1) : [];
                    }, true);
                }
            }
            else {
                // 遍历绑定的目标，将编译指令绑定到目标身上，而不是指令所在的显示对象身上
                searchUIDepth(arg1, mediator, target, function (target, name, exp, leftHandlers, index) {
                    // 添加编译指令
                    __WEBPACK_IMPORTED_MODULE_11__BindUtil__["pushCompileCommand"](target, __WEBPACK_IMPORTED_MODULE_11__BindUtil__["compileFor"], exp);
                    // 设置中断编译
                    target.__stop_left_handlers__ = leftHandlers ? leftHandlers.splice(index + 1, leftHandlers.length - index - 1) : [];
                }, true);
            }
        });
    };
}
function doBindMessage(mediator, target, type, uiDict, observable) {
    searchUIDepth(uiDict, mediator, target, function (target, name, exp) {
        __WEBPACK_IMPORTED_MODULE_11__BindUtil__["pushCompileCommand"](target, __WEBPACK_IMPORTED_MODULE_11__BindUtil__["compileMessage"], type, name, exp, observable);
    });
}
/**
 * @private
 */
function BindMessage(arg1, arg2) {
    return function (prototype, propertyKey) {
        listenOnOpen(prototype, propertyKey, function (mediator) {
            if (typeof arg1 == "string" || arg1 instanceof Function) {
                // 是类型方式
                doBindMessage(mediator, mediator[propertyKey], arg1, arg2, mediator.observable);
            }
            else {
                // 是字典方式
                for (var type in arg1) {
                    doBindMessage(mediator, mediator[propertyKey], type, arg1[type], mediator.observable);
                }
            }
        });
    };
}
/**
 * @private
 */
function BindGlobalMessage(arg1, arg2) {
    return function (prototype, propertyKey) {
        listenOnOpen(prototype, propertyKey, function (mediator) {
            if (typeof arg1 == "string" || arg1 instanceof Function) {
                // 是类型方式
                doBindMessage(mediator, mediator[propertyKey], arg1, arg2);
            }
            else {
                // 是字典方式
                for (var type in arg1) {
                    doBindMessage(mediator, mediator[propertyKey], type, arg1[type]);
                }
            }
        });
    };
}
function doBindResponse(mediator, target, type, uiDict, observable) {
    searchUIDepth(uiDict, mediator, target, function (target, name, exp) {
        __WEBPACK_IMPORTED_MODULE_11__BindUtil__["pushCompileCommand"](target, __WEBPACK_IMPORTED_MODULE_11__BindUtil__["compileResponse"], type, name, exp, observable);
    });
}
/**
 * @private
 */
function BindResponse(arg1, arg2) {
    return function (prototype, propertyKey) {
        // Response需要在onOpen之后执行，因为可能有初始化消息需要绑定，要在onOpen后有了viewModel再首次更新显示
        listenOnOpen(prototype, propertyKey, function (mediator) {
            if (typeof arg1 == "string" || arg1 instanceof Function) {
                // 是类型方式
                doBindResponse(mediator, mediator[propertyKey], arg1, arg2, mediator.observable);
            }
            else {
                // 是字典方式
                for (var type in arg1) {
                    doBindResponse(mediator, mediator[propertyKey], type, arg1[type], mediator.observable);
                }
            }
        });
    };
}
/**
 * @private
 */
function BindGlobalResponse(arg1, arg2) {
    return function (prototype, propertyKey) {
        listenOnOpen(prototype, propertyKey, function (mediator) {
            if (typeof arg1 == "string" || arg1 instanceof Function) {
                // 是类型方式
                doBindResponse(mediator, mediator[propertyKey], arg1, arg2);
            }
            else {
                // 是字典方式
                for (var type in arg1) {
                    doBindResponse(mediator, mediator[propertyKey], type, arg1[type]);
                }
            }
        });
    };
}


/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return maskManager; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_injector_Injector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__bridge_BridgeManager__ = __webpack_require__(4);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-10-25
 * @modify date 2017-10-25
 *
 * 遮罩管理器
*/
var MaskManager = /** @class */ (function () {
    function MaskManager() {
        this._entityDict = {};
        this._loadingMaskDict = {};
    }
    MaskManager.prototype.getLoadingMaskCount = function () {
        var count = 0;
        for (var key in this._loadingMaskDict) {
            var temp = this._loadingMaskDict[key];
            if (temp > 0)
                count += temp;
        }
        return count;
    };
    MaskManager.prototype.plusLoadingMaskCount = function (key) {
        var count = this._loadingMaskDict[key] || 0;
        if (count < 0)
            count = 0;
        this._loadingMaskDict[key] = ++count;
        return count;
    };
    MaskManager.prototype.minusLoadingMaskCount = function (key) {
        var count = this._loadingMaskDict[key] || 0;
        count--;
        if (count < 0)
            count = 0;
        this._loadingMaskDict[key] = count;
        if (count == 0)
            delete this._loadingMaskDict[key];
        return count;
    };
    /**
     * 初始化MaskUtil
     * @param type 所属表现层桥
     * @param entity 遮罩实体
     */
    MaskManager.prototype.registerMask = function (type, entity) {
        this._entityDict[type] = entity;
    };
    /**
     * 显示遮罩
     */
    MaskManager.prototype.showMask = function (alpha) {
        var type = __WEBPACK_IMPORTED_MODULE_2__bridge_BridgeManager__["a" /* bridgeManager */].currentBridge.type;
        var entity = this._entityDict[type];
        if (entity != null) {
            // 显示遮罩
            entity.showMask(alpha);
            // 调用回调
            entity.maskData.onShowMask && entity.maskData.onShowMask();
        }
    };
    /**
     * 隐藏遮罩
     */
    MaskManager.prototype.hideMask = function () {
        var type = __WEBPACK_IMPORTED_MODULE_2__bridge_BridgeManager__["a" /* bridgeManager */].currentBridge.type;
        var entity = this._entityDict[type];
        if (entity != null) {
            // 调用回调
            entity.maskData.onHideMask && entity.maskData.onHideMask();
            // 隐藏遮罩
            entity.hideMask();
        }
    };
    /**当前是否在显示遮罩*/
    MaskManager.prototype.isShowingMask = function () {
        var type = __WEBPACK_IMPORTED_MODULE_2__bridge_BridgeManager__["a" /* bridgeManager */].currentBridge.type;
        var entity = this._entityDict[type];
        if (entity != null)
            return entity.isShowingMask();
        return false;
    };
    /**
     * 显示加载图
     */
    MaskManager.prototype.showLoading = function (alpha, key) {
        if (key === void 0) { key = null; }
        // 若当前你没有loading则显示loading
        if (this.getLoadingMaskCount() == 0) {
            var type = __WEBPACK_IMPORTED_MODULE_2__bridge_BridgeManager__["a" /* bridgeManager */].currentBridge.type;
            var entity = this._entityDict[type];
            if (entity != null) {
                // 显示遮罩
                entity.showLoading(alpha);
                // 调用回调
                entity.maskData.onShowLoading && entity.maskData.onShowLoading(entity.loadingSkin);
            }
        }
        // 增计数
        this.plusLoadingMaskCount(key);
    };
    /**
     * 隐藏加载图
     */
    MaskManager.prototype.hideLoading = function (key) {
        if (key === void 0) { key = null; }
        // 减计数
        this.minusLoadingMaskCount(key);
        if (this.getLoadingMaskCount() == 0) {
            // 移除loading
            var type = __WEBPACK_IMPORTED_MODULE_2__bridge_BridgeManager__["a" /* bridgeManager */].currentBridge.type;
            var entity = this._entityDict[type];
            if (entity != null) {
                // 调用回调
                entity.maskData.onHideLoading && entity.maskData.onHideLoading(entity.loadingSkin);
                // 隐藏遮罩
                entity.hideLoading();
            }
        }
    };
    /**当前是否在显示loading*/
    MaskManager.prototype.isShowingLoading = function () {
        var type = __WEBPACK_IMPORTED_MODULE_2__bridge_BridgeManager__["a" /* bridgeManager */].currentBridge.type;
        var entity = this._entityDict[type];
        if (entity != null)
            return entity.isShowingLoading();
        return false;
    };
    /** 显示模态窗口遮罩 */
    MaskManager.prototype.showModalMask = function (popup, alpha) {
        var type = popup.bridge.type;
        var entity = this._entityDict[type];
        if (entity != null) {
            // 显示遮罩
            entity.showModalMask(popup, alpha);
            // 调用回调
            entity.maskData.onShowModalMask && entity.maskData.onShowModalMask(popup);
        }
    };
    /** 隐藏模态窗口遮罩 */
    MaskManager.prototype.hideModalMask = function (popup) {
        var type = popup.bridge.type;
        var entity = this._entityDict[type];
        if (entity != null) {
            // 调用回调
            entity.maskData.onHideModalMask && entity.maskData.onHideModalMask(popup);
            // 隐藏遮罩
            entity.hideModalMask(popup);
        }
    };
    /** 当前是否在显示模态窗口遮罩 */
    MaskManager.prototype.isShowingModalMask = function (popup) {
        var type = popup.bridge.type;
        var entity = this._entityDict[type];
        if (entity != null)
            return entity.isShowingModalMask(popup);
        return false;
    };
    MaskManager = __decorate([
        __WEBPACK_IMPORTED_MODULE_0__core_injector_Injector__["Injectable"]
    ], MaskManager);
    return MaskManager;
}());
/* unused harmony default export */ var _unused_webpack_default_export = (MaskManager);
/** 再额外导出一个单例 */
var maskManager = __WEBPACK_IMPORTED_MODULE_1__core_Core__["a" /* core */].getInject(MaskManager);


/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-18
 * @modify date 2017-09-18
 *
 * 模块消息
*/
var ModuleMessage = /** @class */ (function () {
    function ModuleMessage() {
    }
    /**
     * 切换模块消息
     *
     * @static
     * @type {string}
     * @memberof ModuleMessage
     */
    ModuleMessage.MODULE_CHANGE = "moduleChange";
    /**
     * 加载模块失败消息
     *
     * @static
     * @type {string}
     * @memberof ModuleMessage
     */
    ModuleMessage.MODULE_LOAD_ASSETS_ERROR = "moduleLoadAssetsError";
    return ModuleMessage;
}());
/* harmony default export */ __webpack_exports__["default"] = (ModuleMessage);


/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return version; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_injector_Injector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_URLUtil__ = __webpack_require__(17);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-21
 * @modify date 2017-09-21
 *
 * 管理文件哈希版本号
*/
var Version = /** @class */ (function () {
    function Version() {
        this._hashDict = {};
    }
    /**
     * 初始化哈希版本工具
     *
     * @param {()=>void} handler 回调
     * @memberof Version
     */
    Version.prototype.initialize = function (handler) {
        var _this = this;
        if (window["__Olympus_Version_hashDict__"]) {
            // 之前在哪加载过，无需再次加载，直接使用
            this._hashDict = window["__Olympus_Version_hashDict__"];
            handler();
        }
        else {
            // 去加载version.cfg
            var request = null;
            if (window["XMLHttpRequest"]) {
                // code for IE7+, Firefox, Chrome, Opera, Safari
                request = new XMLHttpRequest();
            }
            else if (window["ActiveXObject"]) {
                // code for IE6, IE5
                request = new ActiveXObject("Microsoft.XMLHTTP");
            }
            // 注册回调函数
            request.onreadystatechange = function (evt) {
                var request = evt.target;
                //判断对象状态是交互完成，接收服务器返回的数据
                if (request.readyState == 4) {
                    if (request.status == 200) {
                        var fileName = request["fileName"];
                        var responseText = request.responseText;
                        var lines = responseText.split("\n");
                        for (var i in lines) {
                            var line = lines[i];
                            var arr = line.split("  ");
                            if (arr.length == 2) {
                                var key = arr[1].substr(2);
                                var value = arr[0];
                                _this._hashDict[key] = value;
                            }
                        }
                        // 在window上挂一份
                        window["__Olympus_Version_hashDict__"] = _this._hashDict;
                    }
                    handler();
                }
            };
            // 设置连接信息
            request.open("GET", "version.cfg?v=" + new Date().getTime(), true);
            // 发送数据，开始和服务器进行交互
            request.send();
        }
    };
    /**
     * 获取文件哈希值，如果没有文件哈希值则返回null
     *
     * @param {string} url 文件的URL
     * @returns {string} 文件的哈希值，或者null
     * @memberof Version
     */
    Version.prototype.getHash = function (url) {
        url = Object(__WEBPACK_IMPORTED_MODULE_2__utils_URLUtil__["b" /* trimURL */])(url);
        var result = null;
        for (var path in this._hashDict) {
            if (url.indexOf(path) >= 0) {
                result = this._hashDict[path];
                break;
            }
        }
        return result;
    };
    /**
     * 将url转换为哈希版本url
     *
     * @param {string} url 原始url
     * @returns {string} 哈希版本url
     * @memberof Version
     */
    Version.prototype.wrapHashUrl = function (url) {
        var hash = this.getHash(url);
        if (hash != null) {
            url = this.joinVersion(url, hash);
        }
        return url;
    };
    /**
     * 添加-r_XXX形式版本号
     *
     * @param {string} url
     * @param {string} version 版本号，以数字和小写字母组成
     * @returns {string} 加版本号后的url，如果没有查到版本号则返回原始url
     * @memberof Version
     */
    Version.prototype.joinVersion = function (url, version) {
        if (version == null)
            return url;
        // 去掉version中的非法字符
        version = version.replace(/[^0-9a-z]+/ig, "");
        // 插入版本号
        var reg = /(([a-zA-Z]+:\/+[^\/\?#]+\/)?[^\?#]+)\.([^\?]+)(\?.+)?/;
        var result = reg.exec(url);
        if (result != null) {
            url = result[1] + "-r_" + version + "." + result[3] + (result[4] || "");
        }
        return url;
    };
    /**
     * 移除-r_XXX形式版本号
     *
     * @param {string} url url
     * @returns {string} 移除版本号后的url
     * @memberof Version
     */
    Version.prototype.removeVersion = function (url) {
        // 去掉-r_XXX版本号，如果有
        url = url.replace(/\-r_[a-z0-9]+\./ig, ".");
        return url;
    };
    Version = __decorate([
        __WEBPACK_IMPORTED_MODULE_1__core_injector_Injector__["Injectable"]
    ], Version);
    return Version;
}());
/* unused harmony default export */ var _unused_webpack_default_export = (Version);
/** 再额外导出一个单例 */
var version = __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].getInject(Version);


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, global) {/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var Reflect;
(function (Reflect) {
    "use strict";
    var hasOwn = Object.prototype.hasOwnProperty;
    // feature test for Symbol support
    var supportsSymbol = typeof Symbol === "function";
    var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== "undefined" ? Symbol.toPrimitive : "@@toPrimitive";
    var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== "undefined" ? Symbol.iterator : "@@iterator";
    var HashMap;
    (function (HashMap) {
        var supportsCreate = typeof Object.create === "function"; // feature test for Object.create support
        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support
        var downLevel = !supportsCreate && !supportsProto;
        // create an object in dictionary mode (a.k.a. "slow" mode in v8)
        HashMap.create = supportsCreate
            ? function () { return MakeDictionary(Object.create(null)); }
            : supportsProto
                ? function () { return MakeDictionary({ __proto__: null }); }
                : function () { return MakeDictionary({}); };
        HashMap.has = downLevel
            ? function (map, key) { return hasOwn.call(map, key); }
            : function (map, key) { return key in map; };
        HashMap.get = downLevel
            ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }
            : function (map, key) { return map[key]; };
    })(HashMap || (HashMap = {}));
    // Load global or shim versions of Map, Set, and WeakMap
    var functionPrototype = Object.getPrototypeOf(Function);
    var usePolyfill = typeof process === "object" && process.env && process.env["REFLECT_METADATA_USE_MAP_POLYFILL"] === "true";
    var _Map = !usePolyfill && typeof Map === "function" && typeof Map.prototype.entries === "function" ? Map : CreateMapPolyfill();
    var _Set = !usePolyfill && typeof Set === "function" && typeof Set.prototype.entries === "function" ? Set : CreateSetPolyfill();
    var _WeakMap = !usePolyfill && typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
    // [[Metadata]] internal slot
    // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots
    var Metadata = new _WeakMap();
    /**
      * Applies a set of decorators to a property of a target object.
      * @param decorators An array of decorators.
      * @param target The target object.
      * @param propertyKey (Optional) The property key to decorate.
      * @param attributes (Optional) The property descriptor for the target key.
      * @remarks Decorators are applied in reverse order.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     Example = Reflect.decorate(decoratorsArray, Example);
      *
      *     // property (on constructor)
      *     Reflect.decorate(decoratorsArray, Example, "staticProperty");
      *
      *     // property (on prototype)
      *     Reflect.decorate(decoratorsArray, Example.prototype, "property");
      *
      *     // method (on constructor)
      *     Object.defineProperty(Example, "staticMethod",
      *         Reflect.decorate(decoratorsArray, Example, "staticMethod",
      *             Object.getOwnPropertyDescriptor(Example, "staticMethod")));
      *
      *     // method (on prototype)
      *     Object.defineProperty(Example.prototype, "method",
      *         Reflect.decorate(decoratorsArray, Example.prototype, "method",
      *             Object.getOwnPropertyDescriptor(Example.prototype, "method")));
      *
      */
    function decorate(decorators, target, propertyKey, attributes) {
        if (!IsUndefined(propertyKey)) {
            if (!IsArray(decorators))
                throw new TypeError();
            if (!IsObject(target))
                throw new TypeError();
            if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))
                throw new TypeError();
            if (IsNull(attributes))
                attributes = undefined;
            propertyKey = ToPropertyKey(propertyKey);
            return DecorateProperty(decorators, target, propertyKey, attributes);
        }
        else {
            if (!IsArray(decorators))
                throw new TypeError();
            if (!IsConstructor(target))
                throw new TypeError();
            return DecorateConstructor(decorators, target);
        }
    }
    Reflect.decorate = decorate;
    // 4.1.2 Reflect.metadata(metadataKey, metadataValue)
    // https://rbuckton.github.io/reflect-metadata/#reflect.metadata
    /**
      * A default metadata decorator factory that can be used on a class, class member, or parameter.
      * @param metadataKey The key for the metadata entry.
      * @param metadataValue The value for the metadata entry.
      * @returns A decorator function.
      * @remarks
      * If `metadataKey` is already defined for the target and target key, the
      * metadataValue for that key will be overwritten.
      * @example
      *
      *     // constructor
      *     @Reflect.metadata(key, value)
      *     class Example {
      *     }
      *
      *     // property (on constructor, TypeScript only)
      *     class Example {
      *         @Reflect.metadata(key, value)
      *         static staticProperty;
      *     }
      *
      *     // property (on prototype, TypeScript only)
      *     class Example {
      *         @Reflect.metadata(key, value)
      *         property;
      *     }
      *
      *     // method (on constructor)
      *     class Example {
      *         @Reflect.metadata(key, value)
      *         static staticMethod() { }
      *     }
      *
      *     // method (on prototype)
      *     class Example {
      *         @Reflect.metadata(key, value)
      *         method() { }
      *     }
      *
      */
    function metadata(metadataKey, metadataValue) {
        function decorator(target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))
                throw new TypeError();
            OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
        }
        return decorator;
    }
    Reflect.metadata = metadata;
    /**
      * Define a unique metadata entry on the target.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param metadataValue A value that contains attached metadata.
      * @param target The target object on which to define metadata.
      * @param propertyKey (Optional) The property key for the target.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     Reflect.defineMetadata("custom:annotation", options, Example);
      *
      *     // property (on constructor)
      *     Reflect.defineMetadata("custom:annotation", options, Example, "staticProperty");
      *
      *     // property (on prototype)
      *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "property");
      *
      *     // method (on constructor)
      *     Reflect.defineMetadata("custom:annotation", options, Example, "staticMethod");
      *
      *     // method (on prototype)
      *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "method");
      *
      *     // decorator factory as metadata-producing annotation.
      *     function MyAnnotation(options): Decorator {
      *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
      *     }
      *
      */
    function defineMetadata(metadataKey, metadataValue, target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
    }
    Reflect.defineMetadata = defineMetadata;
    /**
      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.hasMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.hasMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.hasMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function hasMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryHasMetadata(metadataKey, target, propertyKey);
    }
    Reflect.hasMetadata = hasMetadata;
    /**
      * Gets a value indicating whether the target object has the provided metadata key defined.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function hasOwnMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);
    }
    Reflect.hasOwnMetadata = hasOwnMetadata;
    /**
      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.getMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.getMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.getMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function getMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryGetMetadata(metadataKey, target, propertyKey);
    }
    Reflect.getMetadata = getMetadata;
    /**
      * Gets the metadata value for the provided metadata key on the target object.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.getOwnMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function getOwnMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);
    }
    Reflect.getOwnMetadata = getOwnMetadata;
    /**
      * Gets the metadata keys defined on the target object or its prototype chain.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns An array of unique metadata keys.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.getMetadataKeys(Example);
      *
      *     // property (on constructor)
      *     result = Reflect.getMetadataKeys(Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.getMetadataKeys(Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.getMetadataKeys(Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.getMetadataKeys(Example.prototype, "method");
      *
      */
    function getMetadataKeys(target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryMetadataKeys(target, propertyKey);
    }
    Reflect.getMetadataKeys = getMetadataKeys;
    /**
      * Gets the unique metadata keys defined on the target object.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns An array of unique metadata keys.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.getOwnMetadataKeys(Example);
      *
      *     // property (on constructor)
      *     result = Reflect.getOwnMetadataKeys(Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.getOwnMetadataKeys(Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.getOwnMetadataKeys(Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.getOwnMetadataKeys(Example.prototype, "method");
      *
      */
    function getOwnMetadataKeys(target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryOwnMetadataKeys(target, propertyKey);
    }
    Reflect.getOwnMetadataKeys = getOwnMetadataKeys;
    /**
      * Deletes the metadata entry from the target object with the provided key.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns `true` if the metadata entry was found and deleted; otherwise, false.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.deleteMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function deleteMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);
        if (IsUndefined(metadataMap))
            return false;
        if (!metadataMap.delete(metadataKey))
            return false;
        if (metadataMap.size > 0)
            return true;
        var targetMetadata = Metadata.get(target);
        targetMetadata.delete(propertyKey);
        if (targetMetadata.size > 0)
            return true;
        Metadata.delete(target);
        return true;
    }
    Reflect.deleteMetadata = deleteMetadata;
    function DecorateConstructor(decorators, target) {
        for (var i = decorators.length - 1; i >= 0; --i) {
            var decorator = decorators[i];
            var decorated = decorator(target);
            if (!IsUndefined(decorated) && !IsNull(decorated)) {
                if (!IsConstructor(decorated))
                    throw new TypeError();
                target = decorated;
            }
        }
        return target;
    }
    function DecorateProperty(decorators, target, propertyKey, descriptor) {
        for (var i = decorators.length - 1; i >= 0; --i) {
            var decorator = decorators[i];
            var decorated = decorator(target, propertyKey, descriptor);
            if (!IsUndefined(decorated) && !IsNull(decorated)) {
                if (!IsObject(decorated))
                    throw new TypeError();
                descriptor = decorated;
            }
        }
        return descriptor;
    }
    function GetOrCreateMetadataMap(O, P, Create) {
        var targetMetadata = Metadata.get(O);
        if (IsUndefined(targetMetadata)) {
            if (!Create)
                return undefined;
            targetMetadata = new _Map();
            Metadata.set(O, targetMetadata);
        }
        var metadataMap = targetMetadata.get(P);
        if (IsUndefined(metadataMap)) {
            if (!Create)
                return undefined;
            metadataMap = new _Map();
            targetMetadata.set(P, metadataMap);
        }
        return metadataMap;
    }
    // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata
    function OrdinaryHasMetadata(MetadataKey, O, P) {
        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
        if (hasOwn)
            return true;
        var parent = OrdinaryGetPrototypeOf(O);
        if (!IsNull(parent))
            return OrdinaryHasMetadata(MetadataKey, parent, P);
        return false;
    }
    // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata
    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
        if (IsUndefined(metadataMap))
            return false;
        return ToBoolean(metadataMap.has(MetadataKey));
    }
    // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata
    function OrdinaryGetMetadata(MetadataKey, O, P) {
        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
        if (hasOwn)
            return OrdinaryGetOwnMetadata(MetadataKey, O, P);
        var parent = OrdinaryGetPrototypeOf(O);
        if (!IsNull(parent))
            return OrdinaryGetMetadata(MetadataKey, parent, P);
        return undefined;
    }
    // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata
    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
        if (IsUndefined(metadataMap))
            return undefined;
        return metadataMap.get(MetadataKey);
    }
    // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata
    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);
        metadataMap.set(MetadataKey, MetadataValue);
    }
    // 3.1.6.1 OrdinaryMetadataKeys(O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys
    function OrdinaryMetadataKeys(O, P) {
        var ownKeys = OrdinaryOwnMetadataKeys(O, P);
        var parent = OrdinaryGetPrototypeOf(O);
        if (parent === null)
            return ownKeys;
        var parentKeys = OrdinaryMetadataKeys(parent, P);
        if (parentKeys.length <= 0)
            return ownKeys;
        if (ownKeys.length <= 0)
            return parentKeys;
        var set = new _Set();
        var keys = [];
        for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
            var key = ownKeys_1[_i];
            var hasKey = set.has(key);
            if (!hasKey) {
                set.add(key);
                keys.push(key);
            }
        }
        for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {
            var key = parentKeys_1[_a];
            var hasKey = set.has(key);
            if (!hasKey) {
                set.add(key);
                keys.push(key);
            }
        }
        return keys;
    }
    // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys
    function OrdinaryOwnMetadataKeys(O, P) {
        var keys = [];
        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
        if (IsUndefined(metadataMap))
            return keys;
        var keysObj = metadataMap.keys();
        var iterator = GetIterator(keysObj);
        var k = 0;
        while (true) {
            var next = IteratorStep(iterator);
            if (!next) {
                keys.length = k;
                return keys;
            }
            var nextValue = IteratorValue(next);
            try {
                keys[k] = nextValue;
            }
            catch (e) {
                try {
                    IteratorClose(iterator);
                }
                finally {
                    throw e;
                }
            }
            k++;
        }
    }
    // 6 ECMAScript Data Typ0es and Values
    // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values
    function Type(x) {
        if (x === null)
            return 1 /* Null */;
        switch (typeof x) {
            case "undefined": return 0 /* Undefined */;
            case "boolean": return 2 /* Boolean */;
            case "string": return 3 /* String */;
            case "symbol": return 4 /* Symbol */;
            case "number": return 5 /* Number */;
            case "object": return x === null ? 1 /* Null */ : 6 /* Object */;
            default: return 6 /* Object */;
        }
    }
    // 6.1.1 The Undefined Type
    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type
    function IsUndefined(x) {
        return x === undefined;
    }
    // 6.1.2 The Null Type
    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type
    function IsNull(x) {
        return x === null;
    }
    // 6.1.5 The Symbol Type
    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type
    function IsSymbol(x) {
        return typeof x === "symbol";
    }
    // 6.1.7 The Object Type
    // https://tc39.github.io/ecma262/#sec-object-type
    function IsObject(x) {
        return typeof x === "object" ? x !== null : typeof x === "function";
    }
    // 7.1 Type Conversion
    // https://tc39.github.io/ecma262/#sec-type-conversion
    // 7.1.1 ToPrimitive(input [, PreferredType])
    // https://tc39.github.io/ecma262/#sec-toprimitive
    function ToPrimitive(input, PreferredType) {
        switch (Type(input)) {
            case 0 /* Undefined */: return input;
            case 1 /* Null */: return input;
            case 2 /* Boolean */: return input;
            case 3 /* String */: return input;
            case 4 /* Symbol */: return input;
            case 5 /* Number */: return input;
        }
        var hint = PreferredType === 3 /* String */ ? "string" : PreferredType === 5 /* Number */ ? "number" : "default";
        var exoticToPrim = GetMethod(input, toPrimitiveSymbol);
        if (exoticToPrim !== undefined) {
            var result = exoticToPrim.call(input, hint);
            if (IsObject(result))
                throw new TypeError();
            return result;
        }
        return OrdinaryToPrimitive(input, hint === "default" ? "number" : hint);
    }
    // 7.1.1.1 OrdinaryToPrimitive(O, hint)
    // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive
    function OrdinaryToPrimitive(O, hint) {
        if (hint === "string") {
            var toString_1 = O.toString;
            if (IsCallable(toString_1)) {
                var result = toString_1.call(O);
                if (!IsObject(result))
                    return result;
            }
            var valueOf = O.valueOf;
            if (IsCallable(valueOf)) {
                var result = valueOf.call(O);
                if (!IsObject(result))
                    return result;
            }
        }
        else {
            var valueOf = O.valueOf;
            if (IsCallable(valueOf)) {
                var result = valueOf.call(O);
                if (!IsObject(result))
                    return result;
            }
            var toString_2 = O.toString;
            if (IsCallable(toString_2)) {
                var result = toString_2.call(O);
                if (!IsObject(result))
                    return result;
            }
        }
        throw new TypeError();
    }
    // 7.1.2 ToBoolean(argument)
    // https://tc39.github.io/ecma262/2016/#sec-toboolean
    function ToBoolean(argument) {
        return !!argument;
    }
    // 7.1.12 ToString(argument)
    // https://tc39.github.io/ecma262/#sec-tostring
    function ToString(argument) {
        return "" + argument;
    }
    // 7.1.14 ToPropertyKey(argument)
    // https://tc39.github.io/ecma262/#sec-topropertykey
    function ToPropertyKey(argument) {
        var key = ToPrimitive(argument, 3 /* String */);
        if (IsSymbol(key))
            return key;
        return ToString(key);
    }
    // 7.2 Testing and Comparison Operations
    // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations
    // 7.2.2 IsArray(argument)
    // https://tc39.github.io/ecma262/#sec-isarray
    function IsArray(argument) {
        return Array.isArray
            ? Array.isArray(argument)
            : argument instanceof Object
                ? argument instanceof Array
                : Object.prototype.toString.call(argument) === "[object Array]";
    }
    // 7.2.3 IsCallable(argument)
    // https://tc39.github.io/ecma262/#sec-iscallable
    function IsCallable(argument) {
        // NOTE: This is an approximation as we cannot check for [[Call]] internal method.
        return typeof argument === "function";
    }
    // 7.2.4 IsConstructor(argument)
    // https://tc39.github.io/ecma262/#sec-isconstructor
    function IsConstructor(argument) {
        // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.
        return typeof argument === "function";
    }
    // 7.2.7 IsPropertyKey(argument)
    // https://tc39.github.io/ecma262/#sec-ispropertykey
    function IsPropertyKey(argument) {
        switch (Type(argument)) {
            case 3 /* String */: return true;
            case 4 /* Symbol */: return true;
            default: return false;
        }
    }
    // 7.3 Operations on Objects
    // https://tc39.github.io/ecma262/#sec-operations-on-objects
    // 7.3.9 GetMethod(V, P)
    // https://tc39.github.io/ecma262/#sec-getmethod
    function GetMethod(V, P) {
        var func = V[P];
        if (func === undefined || func === null)
            return undefined;
        if (!IsCallable(func))
            throw new TypeError();
        return func;
    }
    // 7.4 Operations on Iterator Objects
    // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects
    function GetIterator(obj) {
        var method = GetMethod(obj, iteratorSymbol);
        if (!IsCallable(method))
            throw new TypeError(); // from Call
        var iterator = method.call(obj);
        if (!IsObject(iterator))
            throw new TypeError();
        return iterator;
    }
    // 7.4.4 IteratorValue(iterResult)
    // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue
    function IteratorValue(iterResult) {
        return iterResult.value;
    }
    // 7.4.5 IteratorStep(iterator)
    // https://tc39.github.io/ecma262/#sec-iteratorstep
    function IteratorStep(iterator) {
        var result = iterator.next();
        return result.done ? false : result;
    }
    // 7.4.6 IteratorClose(iterator, completion)
    // https://tc39.github.io/ecma262/#sec-iteratorclose
    function IteratorClose(iterator) {
        var f = iterator["return"];
        if (f)
            f.call(iterator);
    }
    // 9.1 Ordinary Object Internal Methods and Internal Slots
    // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots
    // 9.1.1.1 OrdinaryGetPrototypeOf(O)
    // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof
    function OrdinaryGetPrototypeOf(O) {
        var proto = Object.getPrototypeOf(O);
        if (typeof O !== "function" || O === functionPrototype)
            return proto;
        // TypeScript doesn't set __proto__ in ES5, as it's non-standard.
        // Try to determine the superclass constructor. Compatible implementations
        // must either set __proto__ on a subclass constructor to the superclass constructor,
        // or ensure each class has a valid `constructor` property on its prototype that
        // points back to the constructor.
        // If this is not the same as Function.[[Prototype]], then this is definately inherited.
        // This is the case when in ES6 or when using __proto__ in a compatible browser.
        if (proto !== functionPrototype)
            return proto;
        // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
        var prototype = O.prototype;
        var prototypeProto = prototype && Object.getPrototypeOf(prototype);
        if (prototypeProto == null || prototypeProto === Object.prototype)
            return proto;
        // If the constructor was not a function, then we cannot determine the heritage.
        var constructor = prototypeProto.constructor;
        if (typeof constructor !== "function")
            return proto;
        // If we have some kind of self-reference, then we cannot determine the heritage.
        if (constructor === O)
            return proto;
        // we have a pretty good guess at the heritage.
        return constructor;
    }
    // naive Map shim
    function CreateMapPolyfill() {
        var cacheSentinel = {};
        var arraySentinel = [];
        var MapIterator = (function () {
            function MapIterator(keys, values, selector) {
                this._index = 0;
                this._keys = keys;
                this._values = values;
                this._selector = selector;
            }
            MapIterator.prototype["@@iterator"] = function () { return this; };
            MapIterator.prototype[iteratorSymbol] = function () { return this; };
            MapIterator.prototype.next = function () {
                var index = this._index;
                if (index >= 0 && index < this._keys.length) {
                    var result = this._selector(this._keys[index], this._values[index]);
                    if (index + 1 >= this._keys.length) {
                        this._index = -1;
                        this._keys = arraySentinel;
                        this._values = arraySentinel;
                    }
                    else {
                        this._index++;
                    }
                    return { value: result, done: false };
                }
                return { value: undefined, done: true };
            };
            MapIterator.prototype.throw = function (error) {
                if (this._index >= 0) {
                    this._index = -1;
                    this._keys = arraySentinel;
                    this._values = arraySentinel;
                }
                throw error;
            };
            MapIterator.prototype.return = function (value) {
                if (this._index >= 0) {
                    this._index = -1;
                    this._keys = arraySentinel;
                    this._values = arraySentinel;
                }
                return { value: value, done: true };
            };
            return MapIterator;
        }());
        return (function () {
            function Map() {
                this._keys = [];
                this._values = [];
                this._cacheKey = cacheSentinel;
                this._cacheIndex = -2;
            }
            Object.defineProperty(Map.prototype, "size", {
                get: function () { return this._keys.length; },
                enumerable: true,
                configurable: true
            });
            Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };
            Map.prototype.get = function (key) {
                var index = this._find(key, /*insert*/ false);
                return index >= 0 ? this._values[index] : undefined;
            };
            Map.prototype.set = function (key, value) {
                var index = this._find(key, /*insert*/ true);
                this._values[index] = value;
                return this;
            };
            Map.prototype.delete = function (key) {
                var index = this._find(key, /*insert*/ false);
                if (index >= 0) {
                    var size = this._keys.length;
                    for (var i = index + 1; i < size; i++) {
                        this._keys[i - 1] = this._keys[i];
                        this._values[i - 1] = this._values[i];
                    }
                    this._keys.length--;
                    this._values.length--;
                    if (key === this._cacheKey) {
                        this._cacheKey = cacheSentinel;
                        this._cacheIndex = -2;
                    }
                    return true;
                }
                return false;
            };
            Map.prototype.clear = function () {
                this._keys.length = 0;
                this._values.length = 0;
                this._cacheKey = cacheSentinel;
                this._cacheIndex = -2;
            };
            Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };
            Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };
            Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };
            Map.prototype["@@iterator"] = function () { return this.entries(); };
            Map.prototype[iteratorSymbol] = function () { return this.entries(); };
            Map.prototype._find = function (key, insert) {
                if (this._cacheKey !== key) {
                    this._cacheIndex = this._keys.indexOf(this._cacheKey = key);
                }
                if (this._cacheIndex < 0 && insert) {
                    this._cacheIndex = this._keys.length;
                    this._keys.push(key);
                    this._values.push(undefined);
                }
                return this._cacheIndex;
            };
            return Map;
        }());
        function getKey(key, _) {
            return key;
        }
        function getValue(_, value) {
            return value;
        }
        function getEntry(key, value) {
            return [key, value];
        }
    }
    // naive Set shim
    function CreateSetPolyfill() {
        return (function () {
            function Set() {
                this._map = new _Map();
            }
            Object.defineProperty(Set.prototype, "size", {
                get: function () { return this._map.size; },
                enumerable: true,
                configurable: true
            });
            Set.prototype.has = function (value) { return this._map.has(value); };
            Set.prototype.add = function (value) { return this._map.set(value, value), this; };
            Set.prototype.delete = function (value) { return this._map.delete(value); };
            Set.prototype.clear = function () { this._map.clear(); };
            Set.prototype.keys = function () { return this._map.keys(); };
            Set.prototype.values = function () { return this._map.values(); };
            Set.prototype.entries = function () { return this._map.entries(); };
            Set.prototype["@@iterator"] = function () { return this.keys(); };
            Set.prototype[iteratorSymbol] = function () { return this.keys(); };
            return Set;
        }());
    }
    // naive WeakMap shim
    function CreateWeakMapPolyfill() {
        var UUID_SIZE = 16;
        var keys = HashMap.create();
        var rootKey = CreateUniqueKey();
        return (function () {
            function WeakMap() {
                this._key = CreateUniqueKey();
            }
            WeakMap.prototype.has = function (target) {
                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                return table !== undefined ? HashMap.has(table, this._key) : false;
            };
            WeakMap.prototype.get = function (target) {
                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                return table !== undefined ? HashMap.get(table, this._key) : undefined;
            };
            WeakMap.prototype.set = function (target, value) {
                var table = GetOrCreateWeakMapTable(target, /*create*/ true);
                table[this._key] = value;
                return this;
            };
            WeakMap.prototype.delete = function (target) {
                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                return table !== undefined ? delete table[this._key] : false;
            };
            WeakMap.prototype.clear = function () {
                // NOTE: not a real clear, just makes the previous data unreachable
                this._key = CreateUniqueKey();
            };
            return WeakMap;
        }());
        function CreateUniqueKey() {
            var key;
            do
                key = "@@WeakMap@@" + CreateUUID();
            while (HashMap.has(keys, key));
            keys[key] = true;
            return key;
        }
        function GetOrCreateWeakMapTable(target, create) {
            if (!hasOwn.call(target, rootKey)) {
                if (!create)
                    return undefined;
                Object.defineProperty(target, rootKey, { value: HashMap.create() });
            }
            return target[rootKey];
        }
        function FillRandomBytes(buffer, size) {
            for (var i = 0; i < size; ++i)
                buffer[i] = Math.random() * 0xff | 0;
            return buffer;
        }
        function GenRandomBytes(size) {
            if (typeof Uint8Array === "function") {
                if (typeof crypto !== "undefined")
                    return crypto.getRandomValues(new Uint8Array(size));
                if (typeof msCrypto !== "undefined")
                    return msCrypto.getRandomValues(new Uint8Array(size));
                return FillRandomBytes(new Uint8Array(size), size);
            }
            return FillRandomBytes(new Array(size), size);
        }
        function CreateUUID() {
            var data = GenRandomBytes(UUID_SIZE);
            // mark as random - RFC 4122 § 4.4
            data[6] = data[6] & 0x4f | 0x40;
            data[8] = data[8] & 0xbf | 0x80;
            var result = "";
            for (var offset = 0; offset < UUID_SIZE; ++offset) {
                var byte = data[offset];
                if (offset === 4 || offset === 6 || offset === 8)
                    result += "-";
                if (byte < 16)
                    result += "0";
                result += byte.toString(16).toLowerCase();
            }
            return result;
        }
    }
    // uses a heuristic used by v8 and chakra to force an object into dictionary mode.
    function MakeDictionary(obj) {
        obj.__ = undefined;
        delete obj.__;
        return obj;
    }
    // patch global Reflect
    (function (__global) {
        if (typeof __global.Reflect !== "undefined") {
            if (__global.Reflect !== Reflect) {
                for (var p in Reflect) {
                    if (hasOwn.call(Reflect, p)) {
                        __global.Reflect[p] = Reflect[p];
                    }
                }
            }
        }
        else {
            __global.Reflect = Reflect;
        }
    })(typeof global !== "undefined" ? global :
        typeof self !== "undefined" ? self :
            Function("return this;")());
})(Reflect || (Reflect = {}));
//# sourceMappingURL=Reflect.js.map
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(43), __webpack_require__(44)))

/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decorateThis", function() { return decorateThis; });
/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-06
 * @modify date 2017-09-06
 *
 * 这个文件的存在是为了对现有js功能打补丁修bug等
*/
/** 修复Array.findIndex会被遍历到的问题 */
if (Array.prototype.hasOwnProperty("findIndex")) {
    var desc = Object.getOwnPropertyDescriptor(Array.prototype, "findIndex");
    if (desc.enumerable) {
        desc.enumerable = false;
        Object.defineProperty(Array.prototype, "findIndex", desc);
    }
}
var decorateThis = {};
/** 篡改Reflect.decorate方法，用于为装饰器方法打个flag，标记装饰器是否为参数化装饰 */
if (Reflect && Reflect.decorate) {
    var oriDecorate = Reflect.decorate;
    Reflect.decorate = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        // 篡改args[0][0]（装饰器方法引用），在调用时为其提供一个this指向，指向window
        var oriRef = args[0][0];
        args[0][0] = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return oriRef.apply(decorateThis, args);
        };
        // 调用原始方法
        var result = oriDecorate.apply(this, args);
        // 还原篡改项
        args[0][0] = oriRef;
        // 返回结果
        return result;
    };
}


/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__mediator_Mediator__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__SceneManager__ = __webpack_require__(56);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-08
 * @modify date 2017-09-08
 *
 * 实现了IScene接口的场景中介者基类
*/
var SceneMediator = /** @class */ (function (_super) {
    __extends(SceneMediator, _super);
    function SceneMediator(skin, policy) {
        var _this = _super.call(this, skin) || this;
        _this.policy = policy;
        return _this;
    }
    /**
     * 打开当前场景（相当于调用SceneManager.push方法）
     *
     * @param {*} [data] 数据
     * @returns {IScene} 场景本体
     * @memberof SceneMediator
     */
    SceneMediator.prototype.open = function (data) {
        return __WEBPACK_IMPORTED_MODULE_1__SceneManager__["a" /* sceneManager */].push(this, data);
    };
    /**
     * 打开当前场景（只能由SceneManager调用）
     *
     * @param {*} [data] 数据
     * @memberof SceneMediator
     */
    SceneMediator.prototype.__open = function (data) {
        _super.prototype.open.call(this, data);
    };
    /**
     * 关闭当前场景（相当于调用SceneManager.pop方法）
     *
     * @param {*} [data] 数据
     * @returns {IScene} 场景本体
     * @memberof SceneMediator
     */
    SceneMediator.prototype.close = function (data) {
        return __WEBPACK_IMPORTED_MODULE_1__SceneManager__["a" /* sceneManager */].pop(this, data);
    };
    /**
     * 关闭当前场景（只能由SceneManager调用）
     *
     * @param {*} [data] 数据
     * @memberof SceneMediator
     */
    SceneMediator.prototype.__close = function (data) {
        _super.prototype.close.call(this, data);
    };
    /**
     * 切入场景开始前调用
     * @param fromScene 从哪个场景切入
     * @param data 切场景时可能的参数
     */
    SceneMediator.prototype.onBeforeIn = function (fromScene, data) {
        // 可重写
    };
    /**
     * 切入场景开始后调用
     * @param fromScene 从哪个场景切入
     * @param data 切场景时可能的参数
     */
    SceneMediator.prototype.onAfterIn = function (fromScene, data) {
        // 可重写
    };
    /**
     * 切出场景开始前调用
     * @param toScene 要切入到哪个场景
     * @param data 切场景时可能的参数
     */
    SceneMediator.prototype.onBeforeOut = function (toScene, data) {
        // 可重写
    };
    /**
     * 切出场景开始后调用
     * @param toScene 要切入到哪个场景
     * @param data 切场景时可能的参数
     */
    SceneMediator.prototype.onAfterOut = function (toScene, data) {
        // 可重写
    };
    return SceneMediator;
}(__WEBPACK_IMPORTED_MODULE_0__mediator_Mediator__["a" /* default */]));
/* harmony default export */ __webpack_exports__["default"] = (SceneMediator);


/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = trimURL;
/* unused harmony export isAbsolutePath */
/* harmony export (immutable) */ __webpack_exports__["c"] = validateProtocol;
/* harmony export (immutable) */ __webpack_exports__["d"] = wrapHost;
/* unused harmony export wrapAbsolutePath */
/* unused harmony export getHostAndPathname */
/* unused harmony export getPath */
/* unused harmony export getName */
/* unused harmony export parseUrl */
/* unused harmony export getQueryParams */
/* harmony export (immutable) */ __webpack_exports__["a"] = joinQueryParams;
/* unused harmony export joinHashParams */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ObjectUtil__ = __webpack_require__(2);

/**
 * 规整url
 * @param url
 */
function trimURL(url) {
    // 去除多余的"/"
    url = url.replace(/([^:/])(\/)+/g, "$1/");
    if (url.charAt(0) == "/")
        url = url.substr(1);
    // 处理"/./"
    var index;
    while ((index = url.indexOf("/./")) >= 0) {
        url = url.replace("/./", "/");
    }
    // 处理"/xx/../"
    var reg = /\/[^\/\.]+?\/\.\.\//;
    while (reg.test(url)) {
        url = url.replace(reg, "/");
    }
    return url;
}
/**
 * 检查URL是否是绝对路径（具有协议头）
 * @param url 要判断的URL
 * @returns {any} 是否是绝对路径
 */
function isAbsolutePath(url) {
    if (url == null)
        return false;
    return (url.indexOf("://") >= 0);
}
/**
 * 如果url有protocol，使其与当前域名的protocol统一，否则会跨域
 * @param url 要统一protocol的url
 */
function validateProtocol(url) {
    if (url == null)
        return null;
    var index = url.indexOf("://");
    if (index < 0)
        return url;
    var protocol = url.substring(0, index);
    // 调整http和https
    if (protocol == "http" || protocol == "https") {
        return window.location.protocol + url.substr(index + 1);
    }
    // 调整ws和wss
    if (protocol == "ws" || protocol == "wss") {
        if (window.location.protocol == "https:")
            protocol = "wss";
        else
            protocol = "ws";
        return protocol + url.substr(index);
    }
    // 不需要调整
    return url;
}
/**
 * 替换url中的host
 * @param url       url
 * @param host      要替换的host
 * @param forced    是否强制替换（默认false）
 */
function wrapHost(url, host, forced) {
    if (forced === void 0) { forced = false; }
    host = host || window.location.origin;
    var re = /^(?:[^\/]+):\/{2,}(?:[^\/]+)\//;
    var arr = url.match(re);
    if (arr && arr.length > 0) {
        if (forced) {
            url = url.substr(arr[0].length);
            url = host + "/" + url;
        }
    }
    else {
        url = host + "/" + url;
    }
    // 合法化一下protocol
    url = validateProtocol(url);
    // 最后规整一下url
    url = trimURL(url);
    return url;
}
/**
 * 将相对于当前页面的相对路径包装成绝对路径
 * @param relativePath 相对于当前页面的相对路径
 * @param host 传递该参数会用该host替换当前host
 */
function wrapAbsolutePath(relativePath, host) {
    // 获取当前页面的url
    var curPath = getPath(window.location.href);
    var url = trimURL(curPath + "/" + relativePath);
    if (host != null) {
        url = wrapHost(url, host, true);
    }
    return url;
}
/**
 * 获取URL的host+pathname部分，即问号(?)以前的部分
 *
 */
function getHostAndPathname(url) {
    if (url == null)
        throw new Error("url不能为空");
    // 去掉get参数和hash
    url = url.split("#")[0].split("?")[0];
    // 去掉多余的/
    url = trimURL(url);
    return url;
}
/**
 * 获取URL路径（文件名前的部分）
 * @param url 要分析的URL
 */
function getPath(url) {
    // 首先去掉多余的/
    url = getHostAndPathname(url);
    // 然后获取到路径
    var urlArr = url.split("/");
    urlArr.pop();
    return urlArr.join("/") + "/";
}
/**
 * 获取URL的文件名
 * @param url 要分析的URL
 */
function getName(url) {
    // 先去掉get参数和hash
    url = url.split("#")[0].split("?")[0];
    // 然后获取到文件名
    var urlArr = url.split("/");
    var fileName = urlArr[urlArr.length - 1];
    return fileName;
}
/**
 * 解析URL
 * @param url 要被解析的URL字符串
 * @returns {any} 解析后的URLLocation结构体
 */
function parseUrl(url) {
    var regExp = /(([^:]+:)\/\/(([^:\/\?#]+)(:(\d+))?))(\/[^?#]*)?(\?[^#]*)?(#.*)?/;
    var match = regExp.exec(url);
    if (match) {
        return {
            href: match[0] || "",
            origin: match[1] || "",
            protocol: match[2] || "",
            host: match[3] || "",
            hostname: match[4] || "",
            port: match[6] || "",
            pathname: match[7] || "",
            search: match[8] || "",
            hash: (match[9] == "#" ? "" : match[9]) || ""
        };
    }
    else {
        throw new Error("传入parseUrl方法的参数不是一个完整的URL：" + url);
    }
}
/**
 * 解析url查询参数
 * @TODO 添加对jquery编码方式的支持
 * @param url url
 */
function getQueryParams(url) {
    var index = url.indexOf("#");
    if (index >= 0) {
        url = url.substring(0, index);
    }
    index = url.indexOf("?");
    if (index < 0)
        return {};
    var queryString = url.substring(index + 1);
    var params = {};
    var kvs = queryString.split("&");
    kvs.forEach(function (kv) {
        var pair = kv.split("=", 2);
        if (pair.length !== 2 || !pair[0]) {
            console.log("[URLUtil] invalid query params: " + kv);
            return;
        }
        var name = decodeURIComponent(pair[0]);
        var value = decodeURIComponent(pair[1]);
        params[name] = value;
    });
    return params;
}
/**
 * 将参数连接到指定URL后面
 * @param url url
 * @param params 一个map，包含要连接的参数
 * @return string 连接后的URL地址
 */
function joinQueryParams(url, params) {
    if (url == null)
        throw new Error("url不能为空");
    var oriParams = getQueryParams(url);
    var targetParams = Object(__WEBPACK_IMPORTED_MODULE_0__ObjectUtil__["b" /* extendObject */])(oriParams, params);
    var hash = parseUrl(url).hash;
    url = getHostAndPathname(url);
    var isFirst = true;
    for (var key in targetParams) {
        if (isFirst) {
            url += "?" + encodeURIComponent(key) + "=" + encodeURIComponent(targetParams[key]);
            isFirst = false;
        }
        else {
            url += "&" + encodeURIComponent(key) + "=" + encodeURIComponent(targetParams[key]);
        }
    }
    // 加上hash
    url += hash;
    return url;
}
/**
 * 将参数链接到URL的hash后面
 * @param url 如果传入的url没有注明hash模块，则不会进行操作
 * @param params 一个map，包含要连接的参数
 */
function joinHashParams(url, params) {
    if (url == null)
        throw new Error("url不能为空");
    var hash = parseUrl(url).hash;
    if (hash == null || hash == "")
        return url;
    for (var key in params) {
        var value = params[key];
        if (value && typeof value != "string")
            value = value.toString();
        hash += ((hash.indexOf("?") < 0 ? "?" : "&") + encodeURIComponent(key) + "=" + encodeURIComponent(value));
    }
    return (url.split("#")[0] + hash);
}


/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_olympus_r_core_Core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_olympus_r_engine_module_ModuleMessage__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__egret_RenderMode__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__egret_AssetsLoader__ = __webpack_require__(63);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__egret_panel_BackPanelPolicy__ = __webpack_require__(66);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__egret_scene_FadeScenePolicy__ = __webpack_require__(68);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__egret_mask_MaskEntity__ = __webpack_require__(69);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__egret_utils_UIUtil__ = __webpack_require__(70);
/// <amd-module name="EgretBridge"/>








/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-18
 * @modify date 2017-09-18
 *
 * Egret的表现层桥实现，当前Egret版本：5.0.7
*/
var EgretBridge = /** @class */ (function () {
    function EgretBridge(params) {
        /**
         * 默认弹窗策略
         *
         * @type {IPanelPolicy}
         * @memberof EgretBridge
         */
        this.defaultPanelPolicy = new __WEBPACK_IMPORTED_MODULE_4__egret_panel_BackPanelPolicy__["a" /* default */]();
        /**
         * 默认场景切换策略
         *
         * @type {IScenePolicy}
         * @memberof EgretBridge
         */
        this.defaultScenePolicy = new __WEBPACK_IMPORTED_MODULE_5__egret_scene_FadeScenePolicy__["a" /* default */]();
        this._initParams = params;
    }
    Object.defineProperty(EgretBridge.prototype, "type", {
        /**
         * 获取表现层类型名称
         *
         * @readonly
         * @type {string}
         * @memberof EgretBridge
         */
        get: function () {
            return EgretBridge.TYPE;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EgretBridge.prototype, "htmlWrapper", {
        /**
         * 获取表现层HTML包装器，可以对其样式进行自定义调整
         *
         * @readonly
         * @type {HTMLElement}
         * @memberof EgretBridge
         */
        get: function () {
            return this._initParams.container;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EgretBridge.prototype, "root", {
        /**
         * 获取根显示节点
         *
         * @readonly
         * @type {egret.DisplayObjectContainer}
         * @memberof EgretBridge
         */
        get: function () {
            return this._root;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EgretBridge.prototype, "stage", {
        /**
         * 获取舞台引用
         *
         * @readonly
         * @type {egret.Stage}
         * @memberof EgretBridge
         */
        get: function () {
            return this._stage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EgretBridge.prototype, "bgLayer", {
        /**
         * 获取背景容器
         *
         * @readonly
         * @type {egret.DisplayObjectContainer}
         * @memberof EgretBridge
         */
        get: function () {
            return this._bgLayer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EgretBridge.prototype, "sceneLayer", {
        /**
         * 获取场景容器
         *
         * @readonly
         * @type {egret.DisplayObjectContainer}
         * @memberof EgretBridge
         */
        get: function () {
            return this._sceneLayer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EgretBridge.prototype, "frameLayer", {
        /**
         * 获取框架容器
         *
         * @readonly
         * @type {egret.DisplayObjectContainer}
         * @memberof EgretBridge
         */
        get: function () {
            return this._frameLayer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EgretBridge.prototype, "panelLayer", {
        /**
         * 获取弹窗容器
         *
         * @readonly
         * @type {egret.DisplayObjectContainer}
         * @memberof EgretBridge
         */
        get: function () {
            return this._panelLayer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EgretBridge.prototype, "maskLayer", {
        /**
         * 获取遮罩容器
         *
         * @readonly
         * @type {egret.DisplayObjectContainer}
         * @memberof EgretBridge
         */
        get: function () {
            return this._maskLayer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EgretBridge.prototype, "topLayer", {
        /**
         * 获取顶级容器
         *
         * @readonly
         * @type {egret.DisplayObjectContainer}
         * @memberof EgretBridge
         */
        get: function () {
            return this._topLayer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EgretBridge.prototype, "promptClass", {
        /**
         * 获取通用提示框
         *
         * @readonly
         * @type {IPromptPanelConstructor}
         * @memberof EgretBridge
         */
        get: function () {
            return this._initParams.promptClass;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EgretBridge.prototype, "maskEntity", {
        /**
         * 获取遮罩实体
         *
         * @readonly
         * @type {IMaskEntity}
         * @memberof EgretBridge
         */
        get: function () {
            return new __WEBPACK_IMPORTED_MODULE_6__egret_mask_MaskEntity__["a" /* default */](this._initParams.maskData);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 初始化表现层桥
     * @param {()=>void} complete 初始化完毕后的回调
     * @memberof EgretBridge
     */
    EgretBridge.prototype.init = function (complete) {
        // 生成html和body的样式节点
        var style = document.createElement("style");
        style.textContent = "\n            html, body {\n                -ms-touch-action: none;\n                background: " + egret.toColorString(this._initParams.backgroundColor || 0) + ";\n                padding: 0;\n                border: 0;\n                margin: 0;\n                height: 100%;\n            }\n        ";
        document.head.appendChild(style);
        // 统一容器
        if (typeof this._initParams.container == "string") {
            this._initParams.container = document.querySelector(this._initParams.container);
        }
        if (!this._initParams.container) {
            this._initParams.container = document.createElement("div");
            document.body.appendChild(this._initParams.container);
        }
        var container = this._initParams.container;
        // 构建容器参数
        container.style.margin = "auto";
        container.style.width = "100%";
        container.style.height = "100%";
        container.className = "egret-player";
        container.setAttribute("data-entry-class", "__EgretRoot__");
        container.setAttribute("data-orientation", "auto");
        container.setAttribute("data-scale-mode", this._initParams.scaleMode || egret.StageScaleMode.FIXED_NARROW);
        container.setAttribute("data-frame-rate", (this._initParams.frameRate || 60) + "");
        container.setAttribute("data-content-width", this._initParams.width + "");
        container.setAttribute("data-content-height", this._initParams.height + "");
        container.setAttribute("data-show-paint-rect", (this._initParams.showPaintRect || false) + "");
        container.setAttribute("data-multi-fingered", (this._initParams.multiFingered || 2) + "");
        container.setAttribute("data-show-fps", (this._initParams.showFPS || false) + "");
        container.setAttribute("data-show-fps-style", this._initParams.showFPSStyle || "x:0,y:0,size:12,textColor:0xffffff,bgAlpha:0.9");
        container.setAttribute("data-show-log", (this._initParams.showLog || false) + "");
        // 构建__EgretRoot__类，使得Egret引擎可以通过window寻址的方式找到该类，同时又可以让其将控制权转交给Application
        var self = this;
        window["__EgretRoot__"] = function () {
            eui.UILayer.call(this);
            this.touchEnabled = false;
        };
        window["__EgretRoot__"].prototype = new eui.UILayer();
        window["__EgretRoot__"].prototype.$onAddToStage = function (stage, nestLevel) {
            // 调用父类方法
            eui.UILayer.prototype.$onAddToStage.call(this, stage, nestLevel);
            // 移除引用
            delete window["__EgretRoot__"];
            // 将控制权移交给Application对象
            onRootInitialized(this);
        };
        // 根据渲染模式初始化Egret引擎
        switch (this._initParams.renderMode) {
            case __WEBPACK_IMPORTED_MODULE_2__egret_RenderMode__["a" /* default */].WEBGL:
                initEgret("webgl");
                break;
            case __WEBPACK_IMPORTED_MODULE_2__egret_RenderMode__["a" /* default */].CANVAS:
            default:
                initEgret("canvas");
                break;
        }
        function initEgret(renderMode) {
            // 启动Egret引擎
            egret.runEgret({
                renderMode: renderMode,
                audioType: 0
            });
        }
        function onRootInitialized(root) {
            self._root = root;
            self._stage = root.stage;
            // 创建背景显示层
            self._bgLayer = new eui.UILayer();
            self._bgLayer.touchEnabled = false;
            root.addChild(self._bgLayer);
            // 创建场景显示层
            self._sceneLayer = new eui.UILayer();
            self._sceneLayer.touchEnabled = false;
            root.addChild(self._sceneLayer);
            // 创建框架显示层
            self._frameLayer = new eui.UILayer();
            self._frameLayer.touchEnabled = false;
            root.addChild(self._frameLayer);
            // 创建弹出层
            self._panelLayer = new eui.UILayer();
            self._panelLayer.touchEnabled = false;
            root.addChild(self._panelLayer);
            // 创建遮罩层
            self._maskLayer = new eui.UILayer();
            self._maskLayer.touchEnabled = false;
            root.addChild(self._maskLayer);
            // 创建顶级显示层
            self._topLayer = new eui.UILayer();
            self._topLayer.touchEnabled = false;
            root.addChild(self._topLayer);
            // 设置资源和主题适配器
            egret.registerImplementation("eui.IAssetAdapter", new AssetAdapter());
            egret.registerImplementation("eui.IThemeAdapter", new ThemeAdapter(self._initParams));
            // 加载资源配置
            RES.addEventListener(RES.ResourceEvent.CONFIG_COMPLETE, onConfigComplete, self);
            RES.loadConfig(self._initParams.pathPrefix + "resource/default.res.json", self._initParams.pathPrefix + "resource/");
        }
        function onConfigComplete(evt) {
            RES.removeEventListener(RES.ResourceEvent.CONFIG_COMPLETE, onConfigComplete, self);
            // 加载主题配置
            var theme = new eui.Theme(this._initParams.pathPrefix + "resource/default.thm.json", self._root.stage);
            theme.addEventListener(eui.UIEvent.COMPLETE, onThemeLoadComplete, self);
        }
        function onThemeLoadComplete(evt) {
            evt.target.removeEventListener(eui.UIEvent.COMPLETE, onThemeLoadComplete, self);
            // 加载预加载资源组
            var preloadGroups = this._initParams.preloadGroups;
            self.loadAssets(preloadGroups, null, function (err) { return complete(self); });
        }
    };
    /**
     * 判断皮肤是否是Egret显示对象
     *
     * @param {*} skin 皮肤对象
     * @returns {boolean} 是否是Egret显示对象
     * @memberof EgretBridge
     */
    EgretBridge.prototype.isMySkin = function (skin) {
        return (skin instanceof egret.DisplayObject);
    };
    /**
     * 创建一个空的显示对象
     *
     * @returns {egret.Sprite}
     * @memberof EgretBridge
     */
    EgretBridge.prototype.createEmptyDisplay = function () {
        return new egret.Sprite();
    };
    /**
     * 添加显示
     *
     * @param {egret.DisplayObjectContainer} parent 要添加到的父容器
     * @param {egret.DisplayObject} target 被添加的显示对象
     * @return {egret.DisplayObject} 返回被添加的显示对象
     * @memberof EgretBridge
     */
    EgretBridge.prototype.addChild = function (parent, target) {
        if (parent && target)
            return parent.addChild(target);
        else
            return target;
    };
    /**
     * 按索引添加显示
     *
     * @param {egret.DisplayObjectContainer} parent 要添加到的父容器
     * @param {egret.DisplayObject} target 被添加的显示对象
     * @param {number} index 要添加到的父级索引
     * @return {egret.DisplayObject} 返回被添加的显示对象
     * @memberof EgretBridge
     */
    EgretBridge.prototype.addChildAt = function (parent, target, index) {
        if (parent && target)
            return parent.addChildAt(target, index);
        else
            return target;
    };
    /**
     * 移除显示对象
     *
     * @param {egret.DisplayObjectContainer} parent 父容器
     * @param {egret.DisplayObject} target 被移除的显示对象
     * @return {egret.DisplayObject} 返回被移除的显示对象
     * @memberof EgretBridge
     */
    EgretBridge.prototype.removeChild = function (parent, target) {
        if (parent && target && target.parent == parent)
            return parent.removeChild(target);
        else
            return target;
    };
    /**
     * 按索引移除显示
     *
     * @param {egret.DisplayObjectContainer} parent 父容器
     * @param {number} index 索引
     * @return {egret.DisplayObject} 返回被移除的显示对象
     * @memberof EgretBridge
     */
    EgretBridge.prototype.removeChildAt = function (parent, index) {
        return parent.removeChildAt(index);
    };
    /**
     * 移除所有显示对象
     *
     * @param {egret.DisplayObjectContainer} parent 父容器
     * @memberof EgretBridge
     */
    EgretBridge.prototype.removeChildren = function (parent) {
        parent.removeChildren();
    };
    /**
     * 获取父容器
     *
     * @param {egret.DisplayObject} target 目标对象
     * @returns {egret.DisplayObjectContainer} 父容器
     * @memberof EgretBridge
     */
    EgretBridge.prototype.getParent = function (target) {
        return target.parent;
    };
    /**
     * 获取指定索引处的显示对象
     *
     * @param {egret.DisplayObjectContainer} parent 父容器
     * @param {number} index 指定父级索引
     * @return {egret.DisplayObject} 索引处的显示对象
     * @memberof EgretBridge
     */
    EgretBridge.prototype.getChildAt = function (parent, index) {
        return parent.getChildAt(index);
    };
    /**
     * 获取显示索引
     *
     * @param {egret.DisplayObjectContainer} parent 父容器
     * @param {egret.DisplayObject} target 子显示对象
     * @return {number} target在parent中的索引
     * @memberof EgretBridge
     */
    EgretBridge.prototype.getChildIndex = function (parent, target) {
        return parent.getChildIndex(target);
    };
    /**
     * 通过名称获取显示对象
     *
     * @param {egret.DisplayObjectContainer} parent 父容器
     * @param {string} name 对象名称
     * @return {egret.DisplayObject} 显示对象
     * @memberof EgretBridge
     */
    EgretBridge.prototype.getChildByName = function (parent, name) {
        return parent.getChildByName(name);
    };
    /**
     * 获取子显示对象数量
     *
     * @param {egret.DisplayObjectContainer} parent 父容器
     * @return {number} 子显示对象数量
     * @memberof EgretBridge
     */
    EgretBridge.prototype.getChildCount = function (parent) {
        return parent.numChildren;
    };
    /**
     * 加载资源
     *
     * @param {string[]} assets 资源数组
     * @param {IMediator} mediator 资源列表
     * @param {(err?:Error)=>void} handler 回调函数
     * @memberof EgretBridge
     */
    EgretBridge.prototype.loadAssets = function (assets, mediator, handler) {
        var loader = new __WEBPACK_IMPORTED_MODULE_3__egret_AssetsLoader__["a" /* default */]({
            oneError: function (evt) {
                // 调用回调
                handler(new Error("资源加载失败"));
                // 派发加载错误事件
                __WEBPACK_IMPORTED_MODULE_0_olympus_r_core_Core__["a" /* core */].dispatch(__WEBPACK_IMPORTED_MODULE_1_olympus_r_engine_module_ModuleMessage__["default"].MODULE_LOAD_ASSETS_ERROR, evt);
            },
            complete: function (dict) {
                // 调用回调
                handler();
            }
        });
        loader.loadGroups(assets);
    };
    /**
     * 监听事件，从这个方法监听的事件会在中介者销毁时被自动移除监听
     *
     * @param {egret.EventDispatcher} target 事件目标对象
     * @param {string} type 事件类型
     * @param {Function} handler 事件处理函数
     * @param {*} [thisArg] this指向对象
     * @memberof EgretBridge
     */
    EgretBridge.prototype.mapListener = function (target, type, handler, thisArg) {
        target.addEventListener(type, handler, thisArg);
    };
    /**
     * 注销监听事件
     *
     * @param {egret.EventDispatcher} target 事件目标对象
     * @param {string} type 事件类型
     * @param {Function} handler 事件处理函数
     * @param {*} [thisArg] this指向对象
     * @memberof EgretBridge
     */
    EgretBridge.prototype.unmapListener = function (target, type, handler, thisArg) {
        target.removeEventListener(type, handler, thisArg);
    };
    /**
     * 为绑定的列表显示对象包装一个渲染器创建回调
     *
     * @param {eui.DataGroup} target BindFor指令指向的显示对象
     * @param {(key?:any, value?:any, renderer?:eui.IItemRenderer)=>void} rendererHandler 渲染器创建回调
     * @returns {*} 返回一个备忘录对象，会在赋值时提供
     * @memberof IBridge
     */
    EgretBridge.prototype.wrapBindFor = function (target, rendererHandler) {
        var memento = {};
        Object(__WEBPACK_IMPORTED_MODULE_7__egret_utils_UIUtil__["a" /* wrapEUIList */])(target, function (data, renderer) {
            // 取出key
            var key;
            var datas = memento.datas;
            // 遍历memento的datas属性（在valuateBindFor时被赋值）
            for (var i in datas) {
                if (datas[i] == data) {
                    // 这就是我们要找的key
                    key = i;
                    break;
                }
            }
            // 调用回调
            rendererHandler(key, data, renderer);
        });
        return memento;
    };
    /**
     * 为列表显示对象赋值
     *
     * @param {eui.DataGroup} target BindFor指令指向的显示对象
     * @param {*} datas 数据集合
     * @param {*} memento wrapBindFor返回的备忘录对象
     * @memberof IBridge
     */
    EgretBridge.prototype.valuateBindFor = function (target, datas, memento) {
        var provider;
        if (datas instanceof Array) {
            provider = new eui.ArrayCollection(datas);
        }
        else {
            // 是字典，将其变为数组
            var list = [];
            for (var key in datas) {
                list.push(datas[key]);
            }
            provider = new eui.ArrayCollection(list);
        }
        // 设置memento
        memento.datas = datas;
        // 赋值
        target.dataProvider = provider;
    };
    /** 提供静态类型常量 */
    EgretBridge.TYPE = "Egret";
    return EgretBridge;
}());
/* harmony default export */ __webpack_exports__["default"] = (EgretBridge);
var AssetAdapter = /** @class */ (function () {
    function AssetAdapter() {
    }
    /**
     * @language zh_CN
     * 解析素材
     * @param source 待解析的新素材标识符
     * @param compFunc 解析完成回调函数，示例：callBack(content:any,source:string):void;
     * @param thisObject callBack的 this 引用
     */
    AssetAdapter.prototype.getAsset = function (source, compFunc, thisObject) {
        if (RES.hasRes(source)) {
            var data = RES.getRes(source);
            if (data)
                onGetRes(data);
            else
                RES.getResAsync(source, onGetRes, this);
        }
        else {
            RES.getResByUrl(source, onGetRes, this, RES.ResourceItem.TYPE_IMAGE);
        }
        function onGetRes(data) {
            compFunc.call(thisObject, data, source);
        }
    };
    return AssetAdapter;
}());
var ThemeAdapter = /** @class */ (function () {
    function ThemeAdapter(initParams) {
        this._initParams = initParams;
    }
    /**
     * 解析主题
     * @param url 待解析的主题url
     * @param compFunc 解析完成回调函数，示例：compFunc(e:egret.Event):void;
     * @param errorFunc 解析失败回调函数，示例：errorFunc():void;
     * @param thisObject 回调的this引用
     */
    ThemeAdapter.prototype.getTheme = function (url, compFunc, errorFunc, thisObject) {
        RES.addEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, onError, null);
        RES.getResByUrl(url, onGetRes, this, RES.ResourceItem.TYPE_TEXT);
        function onGetRes(e) {
            try {
                // 需要为所有主题资源添加路径前缀
                var data = JSON.parse(e);
                for (var key in data.skins)
                    data.skins[key] = this._initParams.pathPrefix + data.skins[key];
                for (var key in data.exmls) {
                    // 如果只是URL则直接添加前缀，否则是内容集成方式，需要单独修改path属性
                    var exml = data.exmls[key];
                    if (typeof exml == "string")
                        data.exmls[key] = this._initParams.pathPrefix + exml;
                    else
                        exml.path = this._initParams.pathPrefix + exml.path;
                }
                e = JSON.stringify(data);
            }
            catch (err) { }
            compFunc.call(thisObject, e);
        }
        function onError(e) {
            if (e.resItem.url == url) {
                RES.removeEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, onError, null);
                errorFunc.call(thisObject);
            }
        }
    };
    return ThemeAdapter;
}());


/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_olympus_r_utils_ObjectUtil__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_olympus_r_engine_assets_AssetsManager__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__dom_mask_MaskEntity__ = __webpack_require__(76);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__dom_utils_SkinUtil__ = __webpack_require__(39);
/// <amd-module name="DOMBridge"/>




/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-18
 * @modify date 2017-09-18
 *
 * 基于DOM的表现层桥实现
*/
var DOMBridge = /** @class */ (function () {
    function DOMBridge(params) {
        /**
         * 获取默认弹窗策略
         *
         * @type {IPanelPolicy}
         * @memberof EgretBridge
         */
        this.defaultPanelPolicy = null;
        /**
         * 获取默认场景切换策略
         *
         * @type {IScenePolicy}
         * @memberof EgretBridge
         */
        this.defaultScenePolicy = null;
        this._listenerDict = {};
        this._initParams = params;
    }
    Object.defineProperty(DOMBridge.prototype, "type", {
        /**
         * 获取表现层类型名称
         *
         * @readonly
         * @type {string}
         * @memberof DOMBridge
         */
        get: function () {
            return DOMBridge.TYPE;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DOMBridge.prototype, "htmlWrapper", {
        /**
         * 获取表现层HTML包装器，可以对其样式进行自定义调整
         *
         * @readonly
         * @type {HTMLElement}
         * @memberof DOMBridge
         */
        get: function () {
            return this._initParams.container;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DOMBridge.prototype, "root", {
        /**
         * 获取根显示节点
         *
         * @readonly
         * @type {HTMLElement}
         * @memberof DOMBridge
         */
        get: function () {
            return this._initParams.container;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DOMBridge.prototype, "stage", {
        /**
         * 获取舞台引用，DOM的舞台指向root所在的Document对象
         *
         * @readonly
         * @type {Document}
         * @memberof DOMBridge
         */
        get: function () {
            return this.root.ownerDocument;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DOMBridge.prototype, "bgLayer", {
        /**
         * 获取背景容器
         *
         * @readonly
         * @type {HTMLElement}
         * @memberof DOMBridge
         */
        get: function () {
            return this._initParams.container;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DOMBridge.prototype, "sceneLayer", {
        /**
         * 获取场景容器
         *
         * @readonly
         * @type {HTMLElement}
         * @memberof DOMBridge
         */
        get: function () {
            return this._initParams.container;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DOMBridge.prototype, "frameLayer", {
        /**
         * 获取框架容器
         *
         * @readonly
         * @type {HTMLElement}
         * @memberof DOMBridge
         */
        get: function () {
            return this._initParams.container;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DOMBridge.prototype, "panelLayer", {
        /**
         * 获取弹窗容器
         *
         * @readonly
         * @type {HTMLElement}
         * @memberof DOMBridge
         */
        get: function () {
            return this._initParams.container;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DOMBridge.prototype, "maskLayer", {
        /**
         * 获取遮罩容器
         *
         * @readonly
         * @type {HTMLElement}
         * @memberof DOMBridge
         */
        get: function () {
            return this._initParams.container;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DOMBridge.prototype, "topLayer", {
        /**
         * 获取顶级容器
         *
         * @readonly
         * @type {HTMLElement}
         * @memberof DOMBridge
         */
        get: function () {
            return this._initParams.container;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DOMBridge.prototype, "promptClass", {
        /**
         * 获取通用提示框
         *
         * @readonly
         * @type {IPromptPanelConstructor}
         * @memberof DOMBridge
         */
        get: function () {
            return this._initParams.promptClass;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DOMBridge.prototype, "maskEntity", {
        /**
         * 获取遮罩实体
         *
         * @readonly
         * @type {IMaskEntity}
         * @memberof DOMBridge
         */
        get: function () {
            return new __WEBPACK_IMPORTED_MODULE_2__dom_mask_MaskEntity__["a" /* default */](this._initParams.maskData);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 初始化表现层桥，可以没有该方法，没有该方法则表示该表现层无需初始化
     * @param {()=>void} complete 初始化完毕后的回调
     * @memberof DOMBridge
     */
    DOMBridge.prototype.init = function (complete) {
        // 如果是名称，则转变成引用
        if (typeof this._initParams.container == "string") {
            this._initParams.container = document.querySelector(this._initParams.container);
        }
        // 如果是空，则生成一个
        if (!this._initParams.container) {
            this._initParams.container = document.createElement("div");
            document.body.appendChild(this._initParams.container);
        }
        // 调用回调
        complete(this);
    };
    /**
     * 判断皮肤是否是DOM显示节点
     *
     * @param {*} skin 皮肤对象
     * @returns {boolean} 是否是DOM显示节点
     * @memberof DOMBridge
     */
    DOMBridge.prototype.isMySkin = function (skin) {
        return (skin instanceof HTMLElement);
    };
    /**
     * 创建一个空的显示对象
     *
     * @returns {HTMLElement}
     * @memberof DOMBridge
     */
    DOMBridge.prototype.createEmptyDisplay = function () {
        return document.createElement("div");
    };
    /**
     * 添加显示
     *
     * @param {Element} parent 要添加到的父容器
     * @param {Element} target 被添加的显示对象
     * @return {Element} 返回被添加的显示对象
     * @memberof DOMBridge
     */
    DOMBridge.prototype.addChild = function (parent, target) {
        return parent.appendChild(target);
    };
    /**
     * 按索引添加显示
     *
     * @param {Element} parent 要添加到的父容器
     * @param {Element} target 被添加的显示对象
     * @param {number} index 要添加到的父级索引
     * @return {Element} 返回被添加的显示对象
     * @memberof DOMBridge
     */
    DOMBridge.prototype.addChildAt = function (parent, target, index) {
        return parent.insertBefore(target, this.getChildAt(parent, index));
    };
    /**
     * 移除显示对象
     *
     * @param {Element} parent 父容器
     * @param {Element} target 被移除的显示对象
     * @return {Element} 返回被移除的显示对象
     * @memberof DOMBridge
     */
    DOMBridge.prototype.removeChild = function (parent, target) {
        return parent.removeChild(target);
    };
    /**
     * 按索引移除显示
     *
     * @param {Element} parent 父容器
     * @param {number} index 索引
     * @return {Element} 返回被移除的显示对象
     * @memberof DOMBridge
     */
    DOMBridge.prototype.removeChildAt = function (parent, index) {
        return parent.removeChild(this.getChildAt(parent, index));
    };
    /**
     * 移除所有显示对象
     *
     * @param {Element} parent 父容器
     * @memberof DOMBridge
     */
    DOMBridge.prototype.removeChildren = function (parent) {
        for (var i = 0, len = parent.children.length; i < len; i++) {
            parent.removeChild(parent.children.item(i));
        }
    };
    /**
     * 获取父容器
     *
     * @param {Element} target 目标对象
     * @returns {Element} 父容器
     * @memberof DOMBridge
     */
    DOMBridge.prototype.getParent = function (target) {
        return target.parentElement;
    };
    /**
     * 获取指定索引处的显示对象
     *
     * @param {Element} parent 父容器
     * @param {number} index 指定父级索引
     * @return {Element} 索引处的显示对象
     * @memberof DOMBridge
     */
    DOMBridge.prototype.getChildAt = function (parent, index) {
        return parent.children.item(index);
    };
    /**
     * 获取显示索引
     *
     * @param {Element} parent 父容器
     * @param {Element} target 子显示对象
     * @return {number} target在parent中的索引
     * @memberof DOMBridge
     */
    DOMBridge.prototype.getChildIndex = function (parent, target) {
        for (var i = 0, len = parent.children.length; i < len; i++) {
            if (target === parent.children.item(i))
                return i;
        }
        return -1;
    };
    /**
     * 通过名称获取显示对象
     *
     * @param {Element} parent 父容器
     * @param {string} name 对象名称
     * @return {Element} 显示对象
     * @memberof DOMBridge
     */
    DOMBridge.prototype.getChildByName = function (parent, name) {
        return parent.children.namedItem(name);
    };
    /**
     * 获取子显示对象数量
     *
     * @param {Element} parent 父容器
     * @return {number} 子显示对象数量
     * @memberof DOMBridge
     */
    DOMBridge.prototype.getChildCount = function (parent) {
        return parent.childElementCount;
    };
    /**
     * 加载资源
     *
     * @param {string[]} assets 资源数组
     * @param {IMediator} mediator 资源列表
     * @param {(err?:Error)=>void} handler 回调函数
     * @memberof DOMBridge
     */
    DOMBridge.prototype.loadAssets = function (assets, mediator, handler) {
        // 开始加载皮肤列表
        if (assets)
            assets = assets.concat();
        loadNext();
        function loadNext() {
            if (!assets || assets.length <= 0) {
                // 调用回调
                handler();
            }
            else {
                var skin = assets.shift();
                __WEBPACK_IMPORTED_MODULE_1_olympus_r_engine_assets_AssetsManager__["a" /* assetsManager */].loadAssets(skin, function (result) {
                    if (result instanceof Error)
                        handler(result);
                    else
                        loadNext();
                });
            }
        }
    };
    /**
     * 监听事件，从这个方法监听的事件会在中介者销毁时被自动移除监听
     *
     * @param {EventTarget} target 事件目标对象
     * @param {string} type 事件类型
     * @param {(evt:Event)=>void} handler 事件处理函数
     * @param {*} [thisArg] this指向对象
     * @memberof DOMBridge
     */
    DOMBridge.prototype.mapListener = function (target, type, handler, thisArg) {
        var key = Object(__WEBPACK_IMPORTED_MODULE_0_olympus_r_utils_ObjectUtil__["e" /* getObjectHashs */])(target, type, handler, thisArg);
        // 判断是否已经存在该监听，如果存在则不再监听
        if (this._listenerDict[key])
            return;
        // 监听
        var listener = function (evt) {
            // 调用回调
            handler.call(thisArg || this, evt);
        };
        target.addEventListener(type, listener);
        // 记录监听
        this._listenerDict[key] = listener;
    };
    /**
     * 注销监听事件
     *
     * @param {EventTarget} target 事件目标对象
     * @param {string} type 事件类型
     * @param {(evt:Event)=>void} handler 事件处理函数
     * @param {*} [thisArg] this指向对象
     * @memberof DOMBridge
     */
    DOMBridge.prototype.unmapListener = function (target, type, handler, thisArg) {
        var key = Object(__WEBPACK_IMPORTED_MODULE_0_olympus_r_utils_ObjectUtil__["e" /* getObjectHashs */])(target, type, handler, thisArg);
        // 判断是否已经存在该监听，如果存在则移除监听
        var listener = this._listenerDict[key];
        if (listener) {
            target.removeEventListener(type, listener);
            // 移除记录
            delete this._listenerDict[key];
        }
    };
    /**
     * 为绑定的列表显示对象包装一个渲染器创建回调
     *
     * @param {HTMLElement} target BindFor指令指向的显示对象
     * @param {(key?:any, value?:any, renderer?:HTMLElement)=>void} handler 渲染器创建回调
     * @returns {*} 返回一个备忘录对象，会在赋值时提供
     * @memberof IBridge
     */
    DOMBridge.prototype.wrapBindFor = function (target, handler) {
        var parent = target.parentElement;
        // 生成一个from节点和一个to节点，用来占位
        var from = document.createElement("div");
        var to = document.createElement("div");
        parent && parent.insertBefore(from, target);
        parent && parent.insertBefore(to, target);
        // 移除显示
        parent && parent.removeChild(target);
        // 返回备忘录
        return { parent: parent, from: from, to: to, handler: handler };
    };
    /**
     * 为列表显示对象赋值
     *
     * @param {HTMLElement} target BindFor指令指向的显示对象
     * @param {*} datas 数据集合
     * @param {*} memento wrapBindFor返回的备忘录对象
     * @memberof IBridge
     */
    DOMBridge.prototype.valuateBindFor = function (target, datas, memento) {
        // 移除已有的列表项显示
        var parent = memento.parent;
        if (parent) {
            var fromIndex = this.getChildIndex(parent, memento.from);
            var toIndex = this.getChildIndex(parent, memento.to);
            for (var i = fromIndex + 1; i < toIndex; i++) {
                this.removeChildAt(parent, fromIndex + 1);
            }
        }
        // 添加新的渲染器
        for (var key in datas) {
            var newElement = target.cloneNode(true);
            // 拷贝子孙对象引用
            Object(__WEBPACK_IMPORTED_MODULE_3__dom_utils_SkinUtil__["a" /* copyRef */])(newElement, newElement);
            // 添加显示
            parent && parent.insertBefore(newElement, memento.to);
            // 使用cloneNode方法复制渲染器
            memento.handler(key, datas[key], newElement);
        }
    };
    /** 提供静态类型常量 */
    DOMBridge.TYPE = "DOM";
    return DOMBridge;
}());
/* harmony default export */ __webpack_exports__["default"] = (DOMBridge);


/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__message_CommonMessage__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__message_CoreMessage__ = __webpack_require__(22);


/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-10-31
 * @modify date 2017-10-31
 *
 * 可观察接口的默认实现对象，会将收到的消息通知给注册的回调
*/
var Observable = /** @class */ (function () {
    function Observable(parent) {
        this._listenerDict = {};
        this._commandDict = {};
        this._disposed = false;
        this._parent = parent && parent.observable;
    }
    Object.defineProperty(Observable.prototype, "observable", {
        /**
         * 获取到IObservable实体，若本身就是IObservable实体则返回本身
         *
         * @type {IObservable}
         * @memberof Observable
         */
        get: function () {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Observable.prototype, "parent", {
        /**
         * 获取到父级IObservable
         *
         * @type {IObservable}
         * @memberof Observable
         */
        get: function () {
            return this._parent;
        },
        enumerable: true,
        configurable: true
    });
    Observable.prototype.handleMessages = function (msg) {
        var listeners1 = this._listenerDict[msg.type];
        var listeners2 = this._listenerDict[msg.constructor.toString()];
        var listeners = (listeners1 && listeners2 ? listeners1.concat(listeners2) : listeners1 || listeners2);
        if (listeners) {
            listeners = listeners.concat();
            for (var _i = 0, listeners_1 = listeners; _i < listeners_1.length; _i++) {
                var temp = listeners_1[_i];
                // 调用处理函数
                if (msg instanceof __WEBPACK_IMPORTED_MODULE_0__message_CommonMessage__["a" /* default */])
                    // 如果是通用消息，则将参数结构后调用回调
                    (_a = temp.handler).call.apply(_a, [temp.thisArg].concat(msg.params));
                else
                    // 如果是其他消息，则直接将消息体传给回调
                    temp.handler.call(temp.thisArg, msg);
            }
        }
        var _a;
    };
    Observable.prototype.doDispatch = function (msg) {
        // 设置所属内核
        Object.defineProperty(msg, "__observable", {
            configurable: true,
            enumerable: false,
            value: this,
            writable: false
        });
        // 设置所属原始内核
        if (!msg.__oriObservable) {
            Object.defineProperty(msg, "__oriObservable", {
                configurable: true,
                enumerable: false,
                value: this,
                writable: false
            });
        }
        // 触发命令
        this.handleCommands(msg);
        // 触发用listen形式监听的消息
        this.handleMessages(msg);
    };
    /** dispatch方法实现 */
    Observable.prototype.dispatch = function (typeOrMsg) {
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        // 销毁判断
        if (this._disposed)
            return;
        // 统一消息对象
        var msg = typeOrMsg;
        if (typeof typeOrMsg == "string") {
            msg = new __WEBPACK_IMPORTED_MODULE_0__message_CommonMessage__["a" /* default */](typeOrMsg);
            msg.params = params;
        }
        // 派发消息
        this.doDispatch(msg);
        // 额外派发一个通用事件
        this.doDispatch(new __WEBPACK_IMPORTED_MODULE_0__message_CommonMessage__["a" /* default */](__WEBPACK_IMPORTED_MODULE_1__message_CoreMessage__["a" /* default */].MESSAGE_DISPATCHED, msg));
        // 将事件转发到上一层
        this._parent && this._parent.dispatch(msg);
    };
    /**
     * 监听内核消息
     *
     * @param {string} type 消息类型
     * @param {Function} handler 消息处理函数
     * @param {*} [thisArg] 消息this指向
     * @memberof Observable
     */
    Observable.prototype.listen = function (type, handler, thisArg) {
        // 销毁判断
        if (this._disposed)
            return;
        type = (typeof type == "string" ? type : type.toString());
        var listeners = this._listenerDict[type];
        if (!listeners)
            this._listenerDict[type] = listeners = [];
        // 检查存在性
        for (var i = 0, len = listeners.length; i < len; i++) {
            var temp = listeners[i];
            // 如果已经存在监听则直接返回
            if (temp.handler == handler && temp.thisArg == thisArg)
                return;
        }
        // 添加监听
        listeners.push({ handler: handler, thisArg: thisArg });
    };
    /**
     * 移除内核消息监听
     *
     * @param {string} type 消息类型
     * @param {Function} handler 消息处理函数
     * @param {*} [thisArg] 消息this指向
     * @memberof Observable
     */
    Observable.prototype.unlisten = function (type, handler, thisArg) {
        // 销毁判断
        if (this._disposed)
            return;
        type = (typeof type == "string" ? type : type.toString());
        var listeners = this._listenerDict[type];
        // 检查存在性
        if (listeners) {
            for (var i = 0, len = listeners.length; i < len; i++) {
                var temp = listeners[i];
                // 如果已经存在监听则直接返回
                if (temp.handler == handler && temp.thisArg == thisArg) {
                    listeners.splice(i, 1);
                    break;
                }
            }
        }
    };
    Observable.prototype.handleCommands = function (msg) {
        var commands = this._commandDict[msg.type];
        if (commands) {
            commands = commands.concat();
            for (var _i = 0, commands_1 = commands; _i < commands_1.length; _i++) {
                var cls = commands_1[_i];
                // 执行命令
                new cls(msg).exec();
            }
        }
    };
    /**
     * 注册命令到特定消息类型上，当这个类型的消息派发到框架内核时会触发Command运行
     *
     * @param {string} type 要注册的消息类型
     * @param {(ICommandConstructor)} cmd 命令处理器，可以是方法形式，也可以使类形式
     * @memberof Observable
     */
    Observable.prototype.mapCommand = function (type, cmd) {
        // 销毁判断
        if (this._disposed)
            return;
        var commands = this._commandDict[type];
        if (!commands)
            this._commandDict[type] = commands = [];
        if (commands.indexOf(cmd) < 0)
            commands.push(cmd);
    };
    /**
     * 注销命令
     *
     * @param {string} type 要注销的消息类型
     * @param {(ICommandConstructor)} cmd 命令处理器
     * @returns {void}
     * @memberof Observable
     */
    Observable.prototype.unmapCommand = function (type, cmd) {
        // 销毁判断
        if (this._disposed)
            return;
        var commands = this._commandDict[type];
        if (!commands)
            return;
        var index = commands.indexOf(cmd);
        if (index < 0)
            return;
        commands.splice(index, 1);
    };
    Object.defineProperty(Observable.prototype, "disposed", {
        /** 是否已经被销毁 */
        get: function () {
            return this._disposed;
        },
        enumerable: true,
        configurable: true
    });
    /** 销毁 */
    Observable.prototype.dispose = function () {
        // 销毁判断
        if (this._disposed)
            return;
        // 移除上一层观察者引用
        this._parent = null;
        // 清空所有消息监听
        this._listenerDict = null;
        // 清空所有命令
        this._commandDict = null;
        // 标记销毁
        this._disposed = true;
    };
    return Observable;
}());
/* harmony default export */ __webpack_exports__["a"] = (Observable);


/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-18
 * @modify date 2017-09-18
 *
 * 消息基类
*/
var Message = /** @class */ (function () {
    function Message(type) {
        this._type = type;
    }
    Object.defineProperty(Message.prototype, "type", {
        /**
         * 获取消息类型字符串
         *
         * @readonly
         * @type {string}
         * @memberof Message
         */
        get: function () {
            return this._type;
        },
        enumerable: true,
        configurable: true
    });
    return Message;
}());
/* harmony default export */ __webpack_exports__["a"] = (Message);


/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-13
 * @modify date 2017-09-13
 *
 * 核心事件类型
*/
var CoreMessage = /** @class */ (function () {
    function CoreMessage() {
    }
    /**
     * 任何消息派发到框架后都会派发这个消息
     *
     * @static
     * @type {string}
     * @memberof CoreMessage
     */
    CoreMessage.MESSAGE_DISPATCHED = "messageDispatched";
    return CoreMessage;
}());
/* harmony default export */ __webpack_exports__["a"] = (CoreMessage);


/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__bind_Mutator__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__bind_BindManager__ = __webpack_require__(26);



/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-04
 * @modify date 2017-09-04
 *
 * 组件界面中介者基类
*/
var Mediator = /** @class */ (function () {
    function Mediator(skin) {
        /**
         * 绑定目标数组，第一层key是调用层级，第二层是该层级需要编译的对象数组
         *
         * @type {Dictionary<any, any>[]}
         * @memberof Mediator
         */
        this.bindTargets = [];
        this._disposed = false;
        this._listeners = [];
        if (skin)
            this.skin = skin;
        // 初始化绑定
        __WEBPACK_IMPORTED_MODULE_2__bind_BindManager__["a" /* bindManager */].bind(this);
    }
    Object.defineProperty(Mediator.prototype, "viewModel", {
        /**
         * 获取或设置ViewModel
         *
         * @type {*}
         * @memberof Mediator
         */
        get: function () {
            return this._viewModel;
        },
        set: function (value) {
            // 设置的时候进行一次变异
            this._viewModel = Object(__WEBPACK_IMPORTED_MODULE_1__bind_Mutator__["a" /* mutate */])(value);
            // 更新绑定
            __WEBPACK_IMPORTED_MODULE_2__bind_BindManager__["a" /* bindManager */].bind(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Mediator.prototype, "disposed", {
        /**
         * 获取中介者是否已被销毁
         *
         * @readonly
         * @type {boolean}
         * @memberof Mediator
         */
        get: function () {
            return this._disposed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Mediator.prototype, "dependModuleInstance", {
        /**
         * 所属的模块引用，需要配合@DelegateMediator使用
         *
         * @readonly
         * @type {IModule}
         * @memberof IMediator
         */
        get: function () {
            return this._dependModuleInstance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Mediator.prototype, "dependModule", {
        /**
         * 所属的模块类型，需要配合@DelegateMediator使用
         *
         * @readonly
         * @type {IModuleConstructor}
         * @memberof IMediator
         */
        get: function () {
            return this._dependModule;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Mediator.prototype, "initResponses", {
        /**
         * 便捷获取被托管到的模块的初始化消息数组
         *
         * @type {ResponseData[]}
         * @memberof IModuleMediator
         */
        get: function () {
            return (this._dependModuleInstance ? this._dependModuleInstance.responses : []);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Mediator.prototype, "data", {
        /**
         * 打开时传递的data对象
         *
         * @readonly
         * @type {*}
         * @memberof Mediator
         */
        get: function () {
            return this._data;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 列出中介者所需的资源数组，可重写
     * 但如果Mediator没有被托管在Module中则该方法不应该被重写，否则可能会有问题
     *
     * @returns {string[]} 资源数组，请根据该Mediator所操作的渲染模组的需求给出资源地址或组名
     * @memberof Mediator
     */
    Mediator.prototype.listAssets = function () {
        return null;
    };
    /**
     * 加载从listAssets中获取到的所有资源
     *
     * @param {(err?:Error)=>void} handler 加载完毕后的回调，如果出错则会给出err参数
     * @returns {void}
     * @memberof Mediator
     */
    Mediator.prototype.loadAssets = function (handler) {
        var self = this;
        this.bridge.loadAssets(this.listAssets(), this, function (err) {
            // 调用onLoadAssets接口
            self.onLoadAssets(err);
            // 调用回调
            handler(err);
        });
    };
    /**
     * 当所需资源加载完毕后调用
     *
     * @param {Error} [err] 加载出错会给出错误对象，没错则不给
     * @memberof Mediator
     */
    Mediator.prototype.onLoadAssets = function (err) {
    };
    /**
     * 打开，为了实现IOpenClose接口
     *
     * @param {*} [data]
     * @returns {*}
     * @memberof Mediator
     */
    Mediator.prototype.open = function (data) {
        this._data = data;
        this.onOpen(data);
        // 初始化绑定，如果子类并没有在onOpen中设置viewModel，则给一个默认值以启动绑定功能
        if (!this._viewModel)
            this.viewModel = {};
        return this;
    };
    /**
     * 关闭，为了实现IOpenClose接口
     *
     * @param {*} [data]
     * @returns {*}
     * @memberof Mediator
     */
    Mediator.prototype.close = function (data) {
        this.onClose(data);
        this.dispose();
        return this;
    };
    /**
     * 当打开时调用
     *
     * @param {*} [data] 可能的打开参数
     * @memberof Mediator
     */
    Mediator.prototype.onOpen = function (data) {
        // 可重写
    };
    /**
     * 当关闭时调用
     *
     * @param {*} [data] 可能的关闭参数
     * @memberof Mediator
     */
    Mediator.prototype.onClose = function (data) {
        // 可重写
    };
    /**
     * 监听事件，从这个方法监听的事件会在中介者销毁时被自动移除监听
     *
     * @param {*} target 事件目标对象
     * @param {string} type 事件类型
     * @param {Function} handler 事件处理函数
     * @param {*} [thisArg] this指向对象
     * @memberof Mediator
     */
    Mediator.prototype.mapListener = function (target, type, handler, thisArg) {
        for (var i = 0, len = this._listeners.length; i < len; i++) {
            var data = this._listeners[i];
            if (data.target == target && data.type == type && data.handler == handler && data.thisArg == thisArg) {
                // 已经存在一样的监听，不再监听
                return;
            }
        }
        // 记录监听
        this._listeners.push({ target: target, type: type, handler: handler, thisArg: thisArg });
        // 调用桥接口
        this.bridge.mapListener(target, type, handler, thisArg);
    };
    /**
     * 注销监听事件
     *
     * @param {*} target 事件目标对象
     * @param {string} type 事件类型
     * @param {Function} handler 事件处理函数
     * @param {*} [thisArg] this指向对象
     * @memberof Mediator
     */
    Mediator.prototype.unmapListener = function (target, type, handler, thisArg) {
        for (var i = 0, len = this._listeners.length; i < len; i++) {
            var data = this._listeners[i];
            if (data.target == target && data.type == type && data.handler == handler && data.thisArg == thisArg) {
                // 调用桥接口
                this.bridge.unmapListener(target, type, handler, thisArg);
                // 移除记录
                this._listeners.splice(i, 1);
                break;
            }
        }
    };
    /**
     * 注销所有注册在当前中介者上的事件监听
     *
     * @memberof Mediator
     */
    Mediator.prototype.unmapAllListeners = function () {
        for (var i = 0, len = this._listeners.length; i < len; i++) {
            var data = this._listeners.pop();
            // 调用桥接口
            this.bridge.unmapListener(data.target, data.type, data.handler, data.thisArg);
        }
    };
    Object.defineProperty(Mediator.prototype, "observable", {
        /*********************** 下面是模块消息系统 ***********************/
        /**
         * 暴露IObservable
         *
         * @readonly
         * @type {IObservable}
         * @memberof Mediator
         */
        get: function () {
            return (this._dependModuleInstance || __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */]).observable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Mediator.prototype, "parent", {
        /**
         * 获取到父级IObservable
         *
         * @type {IObservable}
         * @memberof Mediator
         */
        get: function () {
            return this.observable.parent;
        },
        enumerable: true,
        configurable: true
    });
    /** dispatch方法实现 */
    Mediator.prototype.dispatch = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        var observable = this.observable;
        observable.dispatch.apply(observable, params);
    };
    /**
     * 监听消息
     *
     * @param {string} type 消息类型
     * @param {Function} handler 消息处理函数
     * @param {*} [thisArg] 消息this指向
     * @memberof IModuleObservable
     */
    Mediator.prototype.listen = function (type, handler, thisArg) {
        this.observable.listen(type, handler, thisArg);
    };
    /**
     * 移除消息监听
     *
     * @param {string} type 消息类型
     * @param {Function} handler 消息处理函数
     * @param {*} [thisArg] 消息this指向
     * @memberof IModuleObservable
     */
    Mediator.prototype.unlisten = function (type, handler, thisArg) {
        this.observable.unlisten(type, handler, thisArg);
    };
    /**
     * 注册命令到特定消息类型上，当这个类型的消息派发到框架内核时会触发Command运行
     *
     * @param {string} type 要注册的消息类型
     * @param {(ICommandConstructor)} cmd 命令处理器，可以是方法形式，也可以使类形式
     * @memberof IModuleObservable
     */
    Mediator.prototype.mapCommand = function (type, cmd) {
        this.observable.mapCommand(type, cmd);
    };
    /**
     * 注销命令
     *
     * @param {string} type 要注销的消息类型
     * @param {(ICommandConstructor)} cmd 命令处理器
     * @returns {void}
     * @memberof IModuleObservable
     */
    Mediator.prototype.unmapCommand = function (type, cmd) {
        this.observable.unmapCommand(type, cmd);
    };
    /**
     * 销毁中介者
     *
     * @memberof Mediator
     */
    Mediator.prototype.dispose = function () {
        if (this._disposed)
            return;
        // 调用模板方法
        this.onDispose();
        // 移除显示
        if (this.skin && this.bridge) {
            var parent = this.bridge.getParent(this.skin);
            if (parent)
                this.bridge.removeChild(parent, this.skin);
        }
        // 注销事件监听
        this.unmapAllListeners();
        // 移除表现层桥
        this.bridge = null;
        // 移除绑定
        __WEBPACK_IMPORTED_MODULE_2__bind_BindManager__["a" /* bindManager */].unbind(this);
        // 移除ViewModel
        this._viewModel = null;
        // 移除绑定目标数组
        this.bindTargets = null;
        // 移除皮肤
        this.skin = null;
        // 设置已被销毁
        this._disposed = true;
    };
    /**
     * 当销毁时调用
     *
     * @memberof Mediator
     */
    Mediator.prototype.onDispose = function () {
        // 可重写
    };
    return Mediator;
}());
/* harmony default export */ __webpack_exports__["a"] = (Mediator);


/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils__ = __webpack_require__(25);

/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-11-06
 * @modify date 2017-11-06
 *
 * 数据更新订阅者，当依赖的数据有更新时会触发callback通知外面
*/
var Watcher = /** @class */ (function () {
    function Watcher(bind, target, exp, callback) {
        var scopes = [];
        for (var _i = 4; _i < arguments.length; _i++) {
            scopes[_i - 4] = arguments[_i];
        }
        this._disposed = false;
        // 记录Bind实例
        this._bind = bind;
        // 记录作用目标、表达式和作用域
        this._target = target;
        this._exp = exp;
        this._scopes = scopes;
        // 将表达式和作用域解析为一个Function
        this._expFunc = Object(__WEBPACK_IMPORTED_MODULE_0__Utils__["a" /* createEvalFunc */])(exp, 1 + scopes.length);
        // 记录回调函数
        this._callback = callback;
        // 进行首次更新
        this.update();
    }
    /**
     * 获取到表达式当前最新值
     * @returns {any} 最新值
     */
    Watcher.prototype.getValue = function () {
        if (this._disposed)
            return null;
        var value;
        // 记录自身
        Watcher.updating = this;
        // 设置通用属性
        var commonScope = {
            $this: this._bind.mediator,
            $bridge: this._bind.mediator.bridge,
            $target: this._target
        };
        // 表达式求值
        try {
            value = (_a = this._expFunc).call.apply(_a, [this._scopes[0], commonScope].concat(this._scopes));
        }
        catch (err) {
            // 输出错误日志
            console.warn("表达式求值错误\nerr: " + err.toString() + "\nexp：" + this._exp + "，scopes：" + JSON.stringify(this._scopes));
        }
        // 移除自身记录
        Watcher.updating = null;
        return value;
        var _a;
    };
    /**
     * 当依赖的数据有更新时调用该方法
     * @param extra 可能的额外数据
     */
    Watcher.prototype.update = function (extra) {
        if (this._disposed)
            return;
        var value = this.getValue();
        if (!Watcher.isEqual(value, this._value)) {
            this._callback && this._callback(value, this._value, extra);
            this._value = Watcher.deepCopy(value);
        }
    };
    /** 销毁订阅者 */
    Watcher.prototype.dispose = function () {
        if (this._disposed)
            return;
        this._value = null;
        this._target = null;
        this._exp = null;
        this._scopes = null;
        this._expFunc = null;
        this._callback = null;
        this._disposed = true;
    };
    /**
     * 是否相等，包括基础类型和对象/数组的对比
     */
    Watcher.isEqual = function (a, b) {
        return (a == b || (Watcher.isObject(a) && Watcher.isObject(b)
            ? JSON.stringify(a) == JSON.stringify(b)
            : false));
    };
    /**
     * 是否为对象(包括数组、正则等)
     */
    Watcher.isObject = function (obj) {
        return (obj && typeof obj == "object");
    };
    /**
     * 复制对象，若为对象则深度复制
     */
    Watcher.deepCopy = function (from) {
        if (Watcher.isObject(from)) {
            try {
                // 复杂类型对象，先字符串化，再对象化
                return JSON.parse(JSON.stringify(from));
            }
            catch (err) { }
        }
        // 基本类型对象和无法复制的对象，直接返回之
        return from;
    };
    /** 记录当前正在执行update方法的Watcher引用 */
    Watcher.updating = null;
    Watcher._uid = 0;
    return Watcher;
}());
/* harmony default export */ __webpack_exports__["a"] = (Watcher);


/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = createRunFunc;
/* unused harmony export runExp */
/* harmony export (immutable) */ __webpack_exports__["a"] = createEvalFunc;
/* harmony export (immutable) */ __webpack_exports__["c"] = evalExp;
/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-11-06
 * @modify date 2017-11-06
 *
 * 绑定工具类
*/
function wrapEvalFuncExp(exp, scopeCount) {
    var argList = [];
    var expStr = exp;
    for (var i = 0; i < scopeCount; i++) {
        argList.push("s" + i);
        expStr = "with(s" + (scopeCount - 1 - i) + "||{}){" + expStr + "}";
    }
    return Function(argList.join(","), expStr);
}
/**
 * 创建一个执行方法，用于未来执行
 *
 * @export
 * @param {string} exp 表达式
 * @param {number} [scopeCount=0] 所需的域的数量
 * @returns {(...scopes:any[])=>void} 创建的方法
 */
function createRunFunc(exp, scopeCount) {
    if (scopeCount === void 0) { scopeCount = 0; }
    var func;
    try {
        func = wrapEvalFuncExp(exp, scopeCount);
    }
    catch (err) {
        // 可能是某些版本的解释器不认识模板字符串，将模板字符串变成普通字符串
        var sepStr = (exp.indexOf('"') < 0 ? '"' : "'");
        // 将exp中的·替换为'
        var reg = /([^\\]?)`/g;
        exp = exp.replace(reg, "$1" + sepStr);
        // 将exp中${...}替换为" + ... + "的形式
        reg = /\$\{(.*?)\}/g;
        exp = exp.replace(reg, sepStr + "+($1)+" + sepStr);
        // 重新生成方法并返回
        func = wrapEvalFuncExp(exp, scopeCount);
    }
    return func;
}
/**
 * 直接执行表达式，不求值。该方法可以执行多条语句
 *
 * @export
 * @param {string} exp 表达式
 * @param {*} [thisArg] this指向
 * @param {...any[]} scopes 表达式的作用域列表
 */
function runExp(exp, thisArg) {
    var scopes = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        scopes[_i - 2] = arguments[_i];
    }
    createRunFunc(exp, scopes.length).apply(thisArg, scopes);
}
/**
 * 创建一个表达式求值方法，用于未来执行
 *
 * @export
 * @param {string} exp 表达式
 * @param {number} [scopeCount=0] 所需的域的数量
 * @returns {(...scopes:any[])=>any} 创建的方法
 */
function createEvalFunc(exp, scopeCount) {
    if (scopeCount === void 0) { scopeCount = 0; }
    return createRunFunc("return " + exp, scopeCount);
}
/**
 * 表达式求值，无法执行多条语句
 *
 * @export
 * @param {string} exp 表达式
 * @param {*} [thisArg] this指向
 * @param {...any[]} scopes 表达式的作用域列表
 * @returns {*} 返回值
 */
function evalExp(exp, thisArg) {
    var scopes = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        scopes[_i - 2] = arguments[_i];
    }
    return createEvalFunc(exp, scopes.length).apply(thisArg, scopes);
}


/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return bindManager; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_injector_Injector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Dictionary__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Bind__ = __webpack_require__(48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Utils__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__net_NetManager__ = __webpack_require__(7);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};






/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-11-06
 * @modify date 2017-11-06
 *
 * 绑定管理器，可以将数据和显示对象绑定到一起，MVVM书写界面
*/
var BindManager = /** @class */ (function () {
    function BindManager() {
        this._bindDict = new __WEBPACK_IMPORTED_MODULE_2__utils_Dictionary__["a" /* default */]();
        this._envModel = [];
        this._regExp = /^\s*(\w+)\s+((in)|(of))\s+(.+?)\s*$/;
    }
    /**
     * 绑定数据到UI上
     *
     * @param {IMediator} mediator 中介者
     * @returns {Bind} 返回绑定实例
     * @memberof BindManager
     */
    BindManager.prototype.bind = function (mediator) {
        var bindData = this._bindDict.get(mediator);
        if (!bindData) {
            this._bindDict.set(mediator, bindData = {
                bind: new __WEBPACK_IMPORTED_MODULE_3__Bind__["a" /* default */](mediator),
                callbacks: []
            });
        }
        // 重新绑定所有
        for (var _i = 0, _a = bindData.callbacks; _i < _a.length; _i++) {
            var callback = _a[_i];
            callback();
        }
        // 返回Bind对象
        return bindData.bind;
    };
    /**
     * 移除绑定
     *
     * @param {IMediator} mediator
     * @returns {Bind}
     * @memberof BindManager
     */
    BindManager.prototype.unbind = function (mediator) {
        var bindData = this._bindDict.get(mediator);
        if (bindData)
            this._bindDict.delete(mediator);
        return bindData && bindData.bind;
    };
    BindManager.prototype.addBindHandler = function (mediator, callback) {
        var handler = function () {
            // 判断数据是否合法
            if (!mediator.viewModel)
                return;
            // 开始绑定
            callback();
        };
        // 添加绑定数据
        var bindData = this._bindDict.get(mediator);
        if (bindData.callbacks.indexOf(handler) < 0)
            bindData.callbacks.push(handler);
        // 立即调用一次
        handler();
    };
    /**
     * 绑定属性值
     *
     * @param {IMediator} mediator 中介者
     * @param {*} target 绑定到的target实体对象
     * @param {string} name 绑定的属性名
     * @param {string} exp 绑定的属性表达式
     * @memberof BindManager
     */
    BindManager.prototype.bindValue = function (mediator, target, name, exp) {
        var _this = this;
        var watcher;
        var bindData = this._bindDict.get(mediator);
        this.addBindHandler(mediator, function () {
            // 如果之前绑定过，则要先销毁之
            if (watcher)
                watcher.dispose();
            // 绑定新的订阅者
            watcher = (_a = bindData.bind).createWatcher.apply(_a, [target, exp, function (value) {
                    target[name] = value;
                }, mediator.viewModel].concat(_this._envModel));
            var _a;
        });
    };
    /**
     * 绑定方法执行
     *
     * @param {IMediator} mediator 中介者
     * @param {*} target 绑定到的target实体对象
     * @param {string} name 绑定的方法名
     * @param {...string[]} argExps 执行方法的参数表达式列表
     * @memberof BindManager
     */
    BindManager.prototype.bindFunc = function (mediator, target, name) {
        var _this = this;
        var argExps = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            argExps[_i - 3] = arguments[_i];
        }
        var watchers = [];
        var bindData = this._bindDict.get(mediator);
        this.addBindHandler(mediator, function () {
            // 判断参数数量，无参数方法一次性执行即可，无需绑定，有参数的方法则需要每次参数改变就执行一次
            if (argExps.length > 0) {
                // 将表达式中所有undefined和null变为内部值
                var undefinedValue = Date.now() * Math.random() + "_undefined";
                var nullValue = Date.now() * Math.random() + "_null";
                argExps = argExps.map(function (exp) {
                    if (exp === undefined)
                        return "'" + undefinedValue + "'";
                    else if (exp === null)
                        return "'" + nullValue + "'";
                    else
                        return exp;
                });
                // 绑定表达式参数数组
                var initValue = {};
                var args = [];
                var argsInited = false;
                var handler = function (index, value) {
                    // 将value中的undefined和null恢复回去
                    if (value === undefinedValue)
                        value = undefined;
                    else if (value == nullValue)
                        value = null;
                    // 设置参数值
                    args[index] = value;
                    // 判断参数是否齐全
                    if (!argsInited) {
                        for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {
                            var arg = args_1[_i];
                            // 如果列表里存在初始值，表示没有赋值完毕，直接返回
                            if (arg === initValue)
                                return;
                        }
                        // 设置初始化完毕状态
                        argsInited = true;
                    }
                    // 赋值已经完毕了，调用方法，this指向ui本身
                    target[name].apply(target, args);
                };
                // 清理旧的订阅者
                for (var i = 0, len = watchers.length; i < len; i++) {
                    watchers.shift().dispose();
                }
                // 循环绑定表达式到handler
                for (var i = 0, len = argExps.length; i < len; i++) {
                    // 记录一个初始值，用于判断参数列表是否已赋值完毕
                    args.push(initValue);
                }
                for (var i = 0, len = argExps.length; i < len; i++) {
                    // 绑定表达式
                    var watcher = (_a = bindData.bind).createWatcher.apply(_a, [target, argExps[i], handler.bind(_this, i), mediator.viewModel].concat(_this._envModel));
                    // 记录订阅者
                    watchers.push(watcher);
                }
            }
            else {
                // 无参数执行，无需绑定，一次性执行即可
                target[name]();
            }
            var _a;
        });
    };
    /**
     * 绑定事件
     *
     * @param {IMediator} mediator 中介者
     * @param {*} ui 绑定到的ui实体对象
     * @param {string} type 绑定的事件类型
     * @param {string} exp 绑定的事件回调表达式
     * @memberof BindManager
     */
    BindManager.prototype.bindOn = function (mediator, target, type, exp) {
        var _this = this;
        var handler;
        this.addBindHandler(mediator, function () {
            var commonScope = {
                $this: mediator,
                $data: mediator.viewModel,
                $bridge: mediator.bridge,
                $target: target
            };
            // 如果之前添加过监听，则先移除之
            if (!handler)
                mediator.bridge.unmapListener(target, type, handler, mediator.viewModel);
            // 先尝试用exp当做方法名去viewModel里寻找，如果找不到则把exp当做一个执行表达式处理，外面包一层方法
            handler = mediator.viewModel[exp];
            if (!handler) {
                var func = Object(__WEBPACK_IMPORTED_MODULE_4__Utils__["b" /* createRunFunc */])(exp, 2 + _this._envModel.length);
                // 这里要转一手，记到闭包里一个副本，否则因为bindOn是延迟操作，到时envModel可能已被修改
                var envModel = _this._envModel.concat();
                handler = function () {
                    func.call.apply(func, [this, mediator.viewModel].concat(envModel, [commonScope]));
                };
            }
            mediator.bridge.mapListener(target, type, handler, mediator.viewModel);
        });
    };
    BindManager.prototype.replaceDisplay = function (bridge, ori, cur) {
        var parent = bridge.getParent(ori);
        if (parent) {
            // ori有父级，记录其当前索引
            var index = bridge.getChildIndex(parent, ori);
            // 移除ori
            bridge.removeChild(parent, ori);
            // 显示cur
            bridge.addChildAt(parent, cur, index);
        }
    };
    /**
     * 绑定显示
     *
     * @param {IMediator} mediator 中介者
     * @param {*} target 绑定到的target实体对象
     * @param {string} exp 绑定表达式
     * @param {(value:boolean)=>void} [callback] 判断条件改变时会触发这个回调
     * @memberof BindManager
     */
    BindManager.prototype.bindIf = function (mediator, target, exp, callback) {
        var _this = this;
        var watcher;
        var bindData = this._bindDict.get(mediator);
        var replacer = mediator.bridge.createEmptyDisplay();
        this.addBindHandler(mediator, function () {
            // 如果之前绑定过，则要先销毁之
            if (watcher)
                watcher.dispose();
            // 绑定表达式
            watcher = (_a = bindData.bind).createWatcher.apply(_a, [target, exp, function (value) {
                    // 如果表达式为true则显示ui，否则移除ui
                    if (value)
                        _this.replaceDisplay(mediator.bridge, replacer, target);
                    else
                        _this.replaceDisplay(mediator.bridge, target, replacer);
                    // 触发回调
                    callback && callback(value);
                }, mediator.viewModel].concat(_this._envModel));
            var _a;
        });
    };
    /**
     * 绑定循环
     *
     * @param {IMediator} mediator 中介者
     * @param {*} target 绑定到的target实体对象
     * @param {string} exp 循环表达式，形如："a in b"（表示a遍历b中的key）或"a of b"（表示a遍历b中的值）。b可以是个表达式
     * @param {(data?:any, renderer?:any)=>void} [callback] 每次生成新的renderer实例时调用这个回调
     * @memberof BindManager
     */
    BindManager.prototype.bindFor = function (mediator, target, exp, callback) {
        var _this = this;
        var watcher;
        var bindData = this._bindDict.get(mediator);
        var replacer = mediator.bridge.createEmptyDisplay();
        this.addBindHandler(mediator, function () {
            // 解析表达式
            var res = _this._regExp.exec(exp);
            if (!res)
                return;
            // 包装渲染器创建回调
            var memento = mediator.bridge.wrapBindFor(target, function (key, value, renderer) {
                // 设置环境变量
                var commonScope = {
                    $key: key,
                    $value: value,
                    $target: renderer
                };
                // 填入用户声明的属性
                commonScope[res[1]] = (res[2] == "in" ? key : value);
                // 插入环境变量
                _this._envModel.push(commonScope);
                // 触发回调
                callback && callback(value, renderer);
                // 移除环境变量
                _this._envModel.splice(_this._envModel.indexOf(commonScope), 1);
            });
            // 如果之前绑定过，则要先销毁之
            if (watcher)
                watcher.dispose();
            // 获得要遍历的数据集合
            watcher = (_a = bindData.bind).createWatcher.apply(_a, [target, res[5], function (datas) {
                    // 如果遍历的对象是个数字，则伪造一个临时数组供使用
                    if (typeof datas === "number") {
                        var tempArr = [];
                        for (var i = 0; i < datas; i++) {
                            tempArr.push(i);
                        }
                        datas = tempArr;
                    }
                    // 赋值
                    mediator.bridge.valuateBindFor(target, datas, memento);
                }, mediator.viewModel].concat(_this._envModel));
            var _a;
        });
    };
    /**
     * 绑定Message
     *
     * @param {IMediator} mediator 中介者
     * @param {*} target 绑定到的target实体对象
     * @param {IConstructor|string} type 绑定的消息类型字符串
     * @param {string} name 绑定的属性名
     * @param {string} exp 绑定的表达式
     * @param {IObservable} [observable] 绑定的消息内核，默认是core
     * @memberof BindManager
     */
    BindManager.prototype.bindMessage = function (mediator, target, type, name, exp, observable) {
        var _this = this;
        if (!observable)
            observable = __WEBPACK_IMPORTED_MODULE_1__core_Core__["a" /* core */].observable;
        var bindData = this._bindDict.get(mediator);
        var handler = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (mediator.disposed) {
                // mediator已销毁，取消监听
                observable.unlisten(type, handler);
            }
            else {
                var msg;
                if (args.length == 1 && typeof args[0] == "object" && args[0].type)
                    msg = args[0];
                else
                    msg = { $arguments: args };
                // 设置通用属性
                var commonScope = {
                    $this: mediator,
                    $data: mediator.viewModel,
                    $bridge: mediator.bridge,
                    $target: target
                };
                target[name] = __WEBPACK_IMPORTED_MODULE_4__Utils__["c" /* evalExp */].apply(void 0, [exp, mediator.viewModel, msg, mediator.viewModel].concat(_this._envModel, [commonScope]));
            }
        };
        // 添加监听
        observable.listen(type, handler);
    };
    /**
     * 绑定Response
     *
     * @param {IMediator} mediator 中介者
     * @param {*} target 绑定到的target实体对象
     * @param {IResponseDataConstructor|string} type 绑定的通讯消息类型
     * @param {string} name 绑定的属性名
     * @param {string} exp 绑定的表达式
     * @param {IObservable} [observable] 绑定的消息内核，默认是core
     * @memberof BindManager
     */
    BindManager.prototype.bindResponse = function (mediator, target, type, name, exp, observable) {
        var _this = this;
        if (!observable)
            observable = __WEBPACK_IMPORTED_MODULE_1__core_Core__["a" /* core */].observable;
        var bindData = this._bindDict.get(mediator);
        var handler = function (response) {
            if (mediator.disposed) {
                // mediator已销毁，取消监听
                __WEBPACK_IMPORTED_MODULE_5__net_NetManager__["netManager"].unlistenResponse(type, handler, null, null, observable);
            }
            else {
                // 设置通用属性
                var commonScope = {
                    $this: mediator,
                    $data: mediator.viewModel,
                    $bridge: mediator.bridge,
                    $target: target
                };
                target[name] = __WEBPACK_IMPORTED_MODULE_4__Utils__["c" /* evalExp */].apply(void 0, [exp, mediator.viewModel, response, mediator.viewModel].concat(_this._envModel, [commonScope]));
            }
        };
        // 添加监听
        __WEBPACK_IMPORTED_MODULE_5__net_NetManager__["netManager"].listenResponse(type, handler, null, null, observable);
        // 如果mediator所依赖的模块有初始化消息，则要额外触发初始化消息的绑定
        if (mediator["dependModuleInstance"]) {
            for (var _i = 0, _a = mediator["dependModuleInstance"].responses; _i < _a.length; _i++) {
                var response = _a[_i];
                handler(response);
            }
        }
    };
    BindManager = __decorate([
        __WEBPACK_IMPORTED_MODULE_0__core_injector_Injector__["Injectable"]
    ], BindManager);
    return BindManager;
}());
/* unused harmony default export */ var _unused_webpack_default_export = (BindManager);
/** 再额外导出一个单例 */
var bindManager = __WEBPACK_IMPORTED_MODULE_1__core_Core__["a" /* core */].getInject(BindManager);


/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "commonData", function() { return commonData; });
var RequestData = /** @class */ (function () {
    function RequestData() {
        /**
         * 用户参数，可以保存任意参数到Message中，该参数中的数据不会被发送
         *
         * @type {*}
         * @memberof RequestData
         */
        this.__userData = {};
        Object.defineProperties(this, {
            __userData: {
                configurable: true,
                enumerable: false,
                writable: true,
                value: this.__userData
            }
        });
    }
    Object.defineProperty(RequestData.prototype, "type", {
        /**
         * 获取请求消息类型字符串
         *
         * @readonly
         * @type {string}
         * @memberof RequestData
         */
        get: function () {
            return this.__params.type;
        },
        enumerable: true,
        configurable: true
    });
    return RequestData;
}());
/* harmony default export */ __webpack_exports__["default"] = (RequestData);
/** 导出公共消息参数对象 */
var commonData = {};


/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-06
 * @modify date 2017-09-06
 *
 * 表现层消息
*/
var BridgeMessage = /** @class */ (function () {
    function BridgeMessage() {
    }
    /**
     * 初始化表现层实例前的消息
     *
     * @static
     * @type {string}
     * @memberof ViewMessage
     */
    BridgeMessage.BRIDGE_BEFORE_INIT = "bridgeBeforeInit";
    /**
     * 初始化表现层实例后的消息
     *
     * @static
     * @type {string}
     * @memberof ViewMessage
     */
    BridgeMessage.BRIDGE_AFTER_INIT = "bridgeAfterInit";
    /**
     * 所有表现层实例都初始化完毕的消息
     *
     * @static
     * @type {string}
     * @memberof ViewMessage
     */
    BridgeMessage.BRIDGE_ALL_INIT = "bridgeAllInit";
    return BridgeMessage;
}());
/* harmony default export */ __webpack_exports__["a"] = (BridgeMessage);


/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return panelManager; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_injector_Injector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__NonePanelPolicy__ = __webpack_require__(50);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__PanelMessage__ = __webpack_require__(51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__IPromptPanel__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__bridge_BridgeManager__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__mask_MaskManager__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_Dictionary__ = __webpack_require__(3);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};








/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-06
 * @modify date 2017-09-06
 *
 * 弹窗管理器，包含弹出弹窗、关闭弹窗、弹窗管理等功能
*/
var PanelManager = /** @class */ (function () {
    function PanelManager() {
        this._panels = [];
        this._priorities = new __WEBPACK_IMPORTED_MODULE_7__utils_Dictionary__["a" /* default */]();
        this._modalDict = new __WEBPACK_IMPORTED_MODULE_7__utils_Dictionary__["a" /* default */]();
        /************************ 下面是通用弹窗的逻辑 ************************/
        this._promptDict = {};
    }
    PanelManager_1 = PanelManager;
    /**
     * 获取当前显示的弹窗数组（副本）
     *
     * @param {IConstructor} [cls] 弹窗类型，如果传递该参数则只返回该类型的已打开弹窗，否则将返回所有已打开的弹窗
     * @returns {IPanel[]} 已打开弹窗数组
     * @memberof PanelManager
     */
    PanelManager.prototype.getOpened = function (cls) {
        if (!cls)
            return this._panels.concat();
        else
            return this._panels.filter(function (panel) { return panel.constructor == cls; });
    };
    /**
     * 获取弹窗是否已开启
     *
     * @param {IPanel} panel 弹窗对象
     * @returns {boolean} 是否已经开启
     * @memberof PanelManager
     */
    PanelManager.prototype.isOpened = function (panel) {
        return (this._panels.indexOf(panel) >= 0);
    };
    PanelManager.prototype.updateModalMask = function (panel) {
        // 首先将传入的panel的模态遮罩去除
        __WEBPACK_IMPORTED_MODULE_6__mask_MaskManager__["a" /* maskManager */].hideModalMask(panel);
        // 然后为最上层的模态弹窗添加遮罩
        for (var i = this._panels.length - 1; i >= 0; i--) {
            panel = this._panels[i];
            if (this._modalDict.get(panel)) {
                // 如果已经有遮罩了，先移除之
                if (__WEBPACK_IMPORTED_MODULE_6__mask_MaskManager__["a" /* maskManager */].isShowingModalMask(panel))
                    __WEBPACK_IMPORTED_MODULE_6__mask_MaskManager__["a" /* maskManager */].hideModalMask(panel);
                // 添加遮罩
                __WEBPACK_IMPORTED_MODULE_6__mask_MaskManager__["a" /* maskManager */].showModalMask(panel);
                break;
            }
        }
    };
    /**
     * 打开一个弹窗
     *
     * @param {IPanel} panel 要打开的弹窗
     * @param {*} [data] 数据
     * @param {boolean} [isModal=true] 是否模态弹出
     * @param {{x:number, y:number}} [from] 弹出起点位置
     * @returns {IPanel} 返回弹窗对象
     * @memberof PanelManager
     */
    PanelManager.prototype.pop = function (panel, data, isModal, from) {
        var _this = this;
        if (isModal === void 0) { isModal = true; }
        if (this._panels.indexOf(panel) < 0) {
            // 数据先行
            this._panels.push(panel);
            // 弹窗所在的表现层必须要显示
            panel.bridge.htmlWrapper.style.display = "";
            // 调用接口
            panel.__open(data, isModal, from);
            // 获取策略
            var policy = panel.policy || panel.bridge.defaultPanelPolicy || __WEBPACK_IMPORTED_MODULE_2__NonePanelPolicy__["a" /* default */];
            // 调用回调
            panel.onBeforePop(data, isModal, from);
            // 派发消息
            __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].dispatch(__WEBPACK_IMPORTED_MODULE_3__PanelMessage__["a" /* default */].PANEL_BEFORE_POP, panel, isModal, from);
            // 调用准备接口
            policy.prepare && policy.prepare(panel);
            // 添加显示
            var bridge = panel.bridge;
            bridge.addChild(bridge.panelLayer, panel.skin);
            // 根据优先级进行排序
            this._panels.sort(function (a, b) {
                var priA = _this._priorities.get(a) || 0;
                var priB = _this._priorities.get(b) || 0;
                // 如果a优先级大于b优先级，则表示a和b需要进行反向，将他们的显示层级对调
                var result = priA - priB;
                if (result > 0) {
                    var skinA = a.skin;
                    var skinB = b.skin;
                    var indexA = bridge.getChildIndex(bridge.panelLayer, skinA);
                    var indexB = bridge.getChildIndex(bridge.panelLayer, skinB);
                    bridge.removeChild(bridge.panelLayer, skinA);
                    bridge.removeChild(bridge.panelLayer, skinB);
                    bridge.addChildAt(bridge.panelLayer, skinB, indexA);
                    bridge.addChildAt(bridge.panelLayer, skinA, indexB);
                }
                // 返回数据，让数组也重新排序
                return result;
            });
            // 调用策略接口
            policy.pop(panel, function () {
                // 调用回调
                panel.onAfterPop(data, isModal, from);
                // 派发消息
                __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].dispatch(__WEBPACK_IMPORTED_MODULE_3__PanelMessage__["a" /* default */].PANEL_AFTER_POP, panel, isModal, from);
            }, from);
            // 记录模态数据
            this._modalDict.set(panel, isModal);
            // 更新模态遮罩
            this.updateModalMask(panel);
        }
        return panel;
    };
    /**
     * 关闭一个弹窗
     *
     * @param {IPanel} panel 要关闭的弹窗
     * @param {*} [data] 数据
     * @param {{x:number, y:number}} [to] 关闭终点位置
     * @returns {IPanel} 返回弹窗对象
     * @memberof PanelManager
     */
    PanelManager.prototype.drop = function (panel, data, to) {
        var index = this._panels.indexOf(panel);
        if (index >= 0) {
            // 数据先行
            this._panels.splice(index, 1);
            // 获取策略
            var policy = panel.policy || panel.bridge.defaultPanelPolicy || __WEBPACK_IMPORTED_MODULE_2__NonePanelPolicy__["a" /* default */];
            // 调用回调
            panel.onBeforeDrop(data, to);
            // 派发消息
            __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].dispatch(__WEBPACK_IMPORTED_MODULE_3__PanelMessage__["a" /* default */].PANEL_BEFORE_DROP, panel, to);
            // 调用策略接口
            policy.drop(panel, function () {
                // 调用回调
                panel.onAfterDrop(data, to);
                // 派发消息
                __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].dispatch(__WEBPACK_IMPORTED_MODULE_3__PanelMessage__["a" /* default */].PANEL_AFTER_DROP, panel, to);
                // 移除显示
                var bridge = panel.bridge;
                var parent = bridge.getParent(panel.skin);
                if (parent)
                    bridge.removeChild(parent, panel.skin);
                // 调用接口
                panel.__close(data, to);
            }, to);
            // 移除优先级数据
            this._priorities.delete(panel);
            // 移除模态数据
            this._modalDict.delete(panel);
            // 更新模态遮罩
            this.updateModalMask(panel);
        }
        return panel;
    };
    /**
     * 注册通用弹窗
     *
     * @param {string} type 通用弹窗要注册到的表现层类型
     * @param {IPromptPanelConstructor} prompt 通用弹窗类型
     * @memberof PanelManager
     */
    PanelManager.prototype.registerPrompt = function (type, prompt) {
        this._promptDict[type] = prompt;
    };
    /**
     * 取消注册通用弹窗
     *
     * @param {string} type 要取消注册通用弹窗的表现层类型
     * @memberof PanelManager
     */
    PanelManager.prototype.unregisterPrompt = function (type) {
        delete this._promptDict[type];
    };
    /**
     * @private
     */
    PanelManager.prototype.prompt = function (msgOrParams) {
        var handlers = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            handlers[_i - 1] = arguments[_i];
        }
        var params;
        if (typeof msgOrParams == "string") {
            params = {
                msg: msgOrParams,
                handlers: handlers
            };
        }
        else {
            params = msgOrParams;
        }
        // 取到当前场景的类型
        var curBridge = __WEBPACK_IMPORTED_MODULE_5__bridge_BridgeManager__["a" /* bridgeManager */].currentBridge;
        var type = curBridge && curBridge.type;
        // 用场景类型取到弹窗对象
        var promptCls = this._promptDict[type];
        if (promptCls == null) {
            // 没有找到当前模块类型关联的通用弹窗类型，改用系统弹窗凑合一下
            alert(params.msg);
            return;
        }
        // 增加默认值
        for (var i in params.handlers) {
            var handler = params.handlers[i];
            if (handler.text == null)
                handler.text = handler.data;
            if (handler.buttonType == null)
                handler.buttonType = __WEBPACK_IMPORTED_MODULE_4__IPromptPanel__["a" /* ButtonType */].normal;
        }
        // 实例化
        var prompt = new promptCls();
        // 设置优先级
        this._priorities.set(prompt, PanelManager_1.PRIORITY_PROMPT);
        // 显示弹窗
        this.pop(prompt);
        // 更新弹窗
        prompt.update(params);
        // 返回弹窗
        return prompt;
    };
    /**
     * 显示警告窗口（只有一个确定按钮）
     *
     * @param {(string|IPromptParams)} msgOrParams 要显示的文本，或者弹窗数据
     * @param {()=>void} [okHandler] 确定按钮点击回调
     * @returns {IPromptPanel} 返回弹窗实体
     * @memberof PanelManager
     */
    PanelManager.prototype.alert = function (msgOrParams, okHandler) {
        var params;
        if (typeof msgOrParams == "string") {
            params = { msg: msgOrParams };
        }
        else {
            params = msgOrParams;
        }
        params.handlers = [
            { data: "确定", handler: okHandler, buttonType: __WEBPACK_IMPORTED_MODULE_4__IPromptPanel__["a" /* ButtonType */].important }
        ];
        return this.prompt(params);
    };
    /**
     * 显示确认窗口（有一个确定按钮和一个取消按钮）
     *
     * @param {(string|IPromptParams)} msgOrParams 要显示的文本，或者弹窗数据
     * @param {()=>void} [okHandler] 确定按钮点击回调
     * @param {()=>void} [cancelHandler] 取消按钮点击回调
     * @returns {IPromptPanel} 返回弹窗实体
     * @memberof PanelManager
     */
    PanelManager.prototype.confirm = function (msgOrParams, okHandler, cancelHandler) {
        var params;
        if (typeof msgOrParams == "string") {
            params = { msg: msgOrParams };
        }
        else {
            params = msgOrParams;
        }
        params.handlers = [
            { data: "取消", handler: cancelHandler, buttonType: __WEBPACK_IMPORTED_MODULE_4__IPromptPanel__["a" /* ButtonType */].normal },
            { data: "确定", handler: okHandler, buttonType: __WEBPACK_IMPORTED_MODULE_4__IPromptPanel__["a" /* ButtonType */].important }
        ];
        return this.prompt(params);
    };
    PanelManager.PRIORITY_NORMAL = 0;
    PanelManager.PRIORITY_PROMPT = 1;
    PanelManager = PanelManager_1 = __decorate([
        __WEBPACK_IMPORTED_MODULE_1__core_injector_Injector__["Injectable"]
    ], PanelManager);
    return PanelManager;
    var PanelManager_1;
}());
/* unused harmony default export */ var _unused_webpack_default_export = (PanelManager);
/** 再额外导出一个单例 */
var panelManager = __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].getInject(PanelManager);


/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = load;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__engine_env_Environment__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__URLUtil__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ObjectUtil__ = __webpack_require__(2);



/**
 * 发送一个或多个HTTP请求
 *
 * @export
 * @param {IHTTPRequestParams} params 请求参数
 */
function load(params) {
    // 非空判断
    if (!params.url) {
        // 成功回调
        params.onResponse && params.onResponse();
        return;
    }
    // 数组判断
    if (params.url instanceof Array) {
        // 一次请求多个地址，需要做一个队列加载，然后一次性回调
        var urls = params.url;
        var results = [];
        var newParams = Object(__WEBPACK_IMPORTED_MODULE_2__ObjectUtil__["a" /* cloneObject */])(params);
        newParams.onResponse = function (result) {
            results.push(result);
            loadNext();
        };
        var loadNext = function () {
            if (urls.length <= 0) {
                // 成功回调
                params.onResponse && params.onResponse(results);
                return;
            }
            newParams.url = urls.shift();
            load(newParams);
        };
        loadNext();
        return;
    }
    // 一次请求一个地址
    var retryTimes = params.retryTimes || 2;
    var timeout = params.timeout || 10000;
    var method = params.method || "GET";
    var timeoutId = 0;
    var data = params.data || {};
    // 取到url
    var url = params.url;
    if (params.useCDN) {
        // 如果使用CDN则改用cdn域名
        url = __WEBPACK_IMPORTED_MODULE_0__engine_env_Environment__["environment"].toCDNHostURL(url);
    }
    else {
        // 合法化一下protocol
        url = Object(__WEBPACK_IMPORTED_MODULE_1__URLUtil__["c" /* validateProtocol */])(url);
        // 规整一下url
        url = Object(__WEBPACK_IMPORTED_MODULE_1__URLUtil__["b" /* trimURL */])(url);
    }
    // 生成并初始化xhr
    var xhr = (window["XMLHttpRequest"] ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP"));
    if (params.responseType)
        xhr.responseType = params.responseType;
    xhr.onreadystatechange = onReadyStateChange;
    // 发送
    send();
    function send() {
        var sendData = null;
        // 根据发送方式组织数据格式
        switch (method) {
            case "POST":
                // POST目前规定为JSON格式发送
                sendData = JSON.stringify(data);
                break;
            case "GET":
                // 将数据添加到url上
                url = Object(__WEBPACK_IMPORTED_MODULE_1__URLUtil__["a" /* joinQueryParams */])(url, data);
                break;
            default:
                throw new Error("暂不支持的HTTP Method：" + method);
        }
        // 打开XHR
        xhr.open(method, url, true);
        // 添加自定义请求头
        for (var key in params.headerDict) {
            xhr.setRequestHeader(key, params.headerDict[key]);
        }
        // 开始发送
        xhr.send(sendData);
    }
    function onReadyStateChange() {
        switch (xhr.readyState) {
            case 2:// 已经发送，开始计时
                timeoutId = setTimeout(abortAndRetry, timeout);
                break;
            case 4:// 接收完毕
                // 停止计时
                timeoutId && clearTimeout(timeoutId);
                timeoutId = 0;
                if (xhr.status == 200) {
                    // 成功回调
                    params.onResponse && params.onResponse(xhr.response);
                }
                else if (retryTimes > 0) {
                    // 没有超过重试上限则重试
                    abortAndRetry();
                }
                else {
                    // 出错，如果使用CDN功能则尝试切换
                    if (params.useCDN && !__WEBPACK_IMPORTED_MODULE_0__engine_env_Environment__["environment"].nextCDN()) {
                        // 还没切换完，重新加载
                        load(params);
                    }
                    else {
                        // 切换完了还失败，则汇报错误
                        var err = new Error(xhr.status + " " + xhr.statusText);
                        params.onError && params.onError(err);
                    }
                }
                break;
        }
    }
    function abortAndRetry() {
        // 重试次数递减
        retryTimes--;
        // 中止xhr
        xhr.abort();
        // 添加时间戳作为随机版本号
        url = Object(__WEBPACK_IMPORTED_MODULE_1__URLUtil__["a" /* joinQueryParams */])(url, { _r: Date.now() });
        // 重新发送
        send();
    }
}


/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "audioManager", function() { return audioManager; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_injector_Injector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AudioTagImpl__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AudioContextImpl__ = __webpack_require__(54);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};




/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-10-30
 * @modify date 2017-10-30
 *
 * 音频管理器，音频接口被强行分为两部分：Sound和Music。
 * Sound：使用Audio标签播放，可以跨域播放但可能会被某些浏览器限制，必须在点击事件处理函数中播放
 * Music：使用AudioContext播放，可以一定程度上越过点击事件检查，但无法跨域播放，适合播放背景音乐
*/
var AudioManager = /** @class */ (function () {
    function AudioManager() {
        this._soundImpl = new __WEBPACK_IMPORTED_MODULE_2__AudioTagImpl__["a" /* default */]();
        this._musicImpl = new __WEBPACK_IMPORTED_MODULE_3__AudioContextImpl__["a" /* default */]();
    }
    /**
     * 注册Sound音频实现对象
     *
     * @param {IAudio} soundImpl Sound音频实现对象
     * @memberof AudioManager
     */
    AudioManager.prototype.registerSoundImpl = function (soundImpl) {
        this._soundImpl = soundImpl;
    };
    /**
     * 加载Sound音频
     *
     * @param {string} url 音频地址
     * @memberof AudioManager
     */
    AudioManager.prototype.loadSound = function (url) {
        this._soundImpl.load(url);
    };
    /**
     * 播放Sound音频，如果没有加载则会先行加载
     *
     * @param {AudioPlayParams} params 音频播放参数
     * @memberof AudioManager
     */
    AudioManager.prototype.playSound = function (params) {
        // 停止其他音频
        if (params.stopOthers) {
            this.stopAllSound();
            this.stopAllMusics();
        }
        this._soundImpl.play(params);
    };
    /**
     * 跳转Sound音频进度
     *
     * @param {string} url 音频URL
     * @param {number} time 要跳转到的音频位置，毫秒值
     * @memberof AudioManager
     */
    AudioManager.prototype.seekSound = function (url, time) {
        this._soundImpl.seek(url, time);
    };
    /**
     * 停止Sound音频
     *
     * @param {string} url 音频地址
     * @memberof AudioManager
     */
    AudioManager.prototype.stopSound = function (url) {
        this._soundImpl.stop(url);
    };
    /**
     * 暂停Sound音频
     *
     * @param {string} url 音频地址
     * @memberof AudioManager
     */
    AudioManager.prototype.pauseSound = function (url) {
        this._soundImpl.pause(url);
    };
    /**
     * 停止所有Sound音频
     *
     * @memberof AudioManager
     */
    AudioManager.prototype.stopAllSound = function () {
        this._soundImpl.stopAll();
    };
    /**
     * 注册Music音频实现对象
     *
     * @param {IAudio} musicImpl Music音频实现对象
     * @memberof AudioManager
     */
    AudioManager.prototype.registerMusicImpl = function (musicImpl) {
        this._musicImpl = musicImpl;
    };
    /**
     * 加载Music音频
     *
     * @param {string} url 音频地址
     * @memberof AudioManager
     */
    AudioManager.prototype.loadMusic = function (url) {
        this._musicImpl.load(url);
    };
    /**
     * 播放Music音频，如果没有加载则会先行加载
     *
     * @param {AudioPlayParams} [params] 音频参数
     * @memberof AudioManager
     */
    AudioManager.prototype.playMusic = function (params) {
        // 停止其他音频
        if (params.stopOthers) {
            this.stopAllSound();
            this.stopAllMusics();
        }
        this._musicImpl.play(params);
    };
    /**
     * 跳转Music音频进度
     *
     * @param {string} url 音频URL
     * @param {number} time 要跳转到的音频位置，毫秒值
     * @memberof AudioManager
     */
    AudioManager.prototype.seekMusic = function (url, time) {
        this._musicImpl.seek(url, time);
    };
    /**
     * 停止Music音频
     *
     * @param {string} url 音频地址
     * @memberof AudioManager
     */
    AudioManager.prototype.stopMusic = function (url) {
        this._musicImpl.stop(url);
    };
    /**
     * 暂停Music音频
     *
     * @param {string} url 音频地址
     * @memberof AudioManager
     */
    AudioManager.prototype.pauseMusic = function (url) {
        this._musicImpl.pause(url);
    };
    /**
     * 停止所有Music音频
     *
     * @memberof AudioManager
     */
    AudioManager.prototype.stopAllMusics = function () {
        this._musicImpl.stopAll();
    };
    AudioManager = __decorate([
        __WEBPACK_IMPORTED_MODULE_0__core_injector_Injector__["Injectable"]
    ], AudioManager);
    return AudioManager;
}());
/* harmony default export */ __webpack_exports__["default"] = (AudioManager);
/** 再额外导出一个单例 */
var audioManager = __WEBPACK_IMPORTED_MODULE_1__core_Core__["a" /* core */].getInject(AudioManager);


/***/ }),
/* 32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-10-30
 * @modify date 2017-10-30
 *
 * 音频消息
*/
var AudioMessage = /** @class */ (function () {
    function AudioMessage() {
    }
    /**
     * 音频播放开始事件
     *
     * @static
     * @type {string}
     * @memberof AudioMessage
     */
    AudioMessage.AUDIO_PLAY_STARTED = "audioPlayStarted";
    /**
     * 音频播放停止事件
     *
     * @static
     * @type {string}
     * @memberof AudioMessage
     */
    AudioMessage.AUDIO_PLAY_STOPPED = "audioPlayStopped";
    /**
     * 音频播放完毕事件
     *
     * @static
     * @type {string}
     * @memberof AudioMessage
     */
    AudioMessage.AUDIO_PLAY_ENDED = "audioPlayEnded";
    /**
     * 音频播放进度事件
     *
     * @static
     * @type {string}
     * @memberof AudioMessage
     */
    AudioMessage.AUDIO_PLAY_PROGRESS = "audioPlayProgress";
    return AudioMessage;
}());
/* harmony default export */ __webpack_exports__["a"] = (AudioMessage);


/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_observable_Observable__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_Dictionary__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ModuleManager__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_ConstructUtil__ = __webpack_require__(6);





/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-14
 * @modify date 2017-09-14
 *
 * 模块基类
*/
var Module = /** @class */ (function () {
    function Module() {
        this._disposed = false;
        this._mediators = [];
        this._disposeDict = new __WEBPACK_IMPORTED_MODULE_2__utils_Dictionary__["a" /* default */]();
        /*********************** 下面是模块消息系统 ***********************/
        this._observable = new __WEBPACK_IMPORTED_MODULE_1__core_observable_Observable__["a" /* default */](__WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */]);
    }
    Object.defineProperty(Module.prototype, "disposed", {
        /**
         * 获取是否已被销毁
         *
         * @readonly
         * @type {boolean}
         * @memberof Module
         */
        get: function () {
            return this._disposed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Module.prototype, "bgMusic", {
        /**
         * 获取背景音乐URL
         *
         * @readonly
         * @type {string}
         * @memberof Module
         */
        get: function () {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Module.prototype, "dependModuleInstance", {
        /**
         * 所属的模块引用
         *
         * @readonly
         * @type {IModule}
         * @memberof IMediator
         */
        get: function () {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Module.prototype, "dependModule", {
        /**
         * 所属的模块类型
         *
         * @readonly
         * @type {IModuleConstructor}
         * @memberof IMediator
         */
        get: function () {
            return Object(__WEBPACK_IMPORTED_MODULE_4__utils_ConstructUtil__["a" /* getConstructor */])(this.constructor);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Module.prototype, "delegatedMediators", {
        /**
         * 获取所有已托管的中介者
         *
         * @returns {IModuleMediator[]} 已托管的中介者
         * @memberof Module
         */
        get: function () {
            return this._mediators;
        },
        enumerable: true,
        configurable: true
    });
    Module.prototype.disposeMediator = function (mediator) {
        // 取消托管
        this.undelegateMediator(mediator);
        // 调用原始销毁方法
        mediator.dispose();
        // 如果所有已托管的中介者都已经被销毁，则销毁当前模块
        if (this._mediators.length <= 0)
            this.dispose();
    };
    ;
    /**
     * 托管中介者
     *
     * @param {IModuleMediator} mediator 中介者
     * @memberof Module
     */
    Module.prototype.delegateMediator = function (mediator) {
        if (this._mediators.indexOf(mediator) < 0) {
            // 托管新的中介者
            this._mediators.push(mediator);
            // 篡改dispose方法，以监听其dispose
            if (mediator.hasOwnProperty("dispose"))
                this._disposeDict.set(mediator, mediator.dispose);
            mediator.dispose = this.disposeMediator.bind(this, mediator);
        }
    };
    /**
     * 取消托管中介者
     *
     * @param {IModuleMediator} mediator 中介者
     * @memberof Module
     */
    Module.prototype.undelegateMediator = function (mediator) {
        var index = this._mediators.indexOf(mediator);
        if (index >= 0) {
            // 取消托管中介者
            this._mediators.splice(index, 1);
            // 恢复dispose方法，取消监听dispose
            var oriDispose = this._disposeDict.get(mediator);
            if (oriDispose)
                mediator.dispose = oriDispose;
            else
                delete mediator.dispose;
            this._disposeDict.delete(mediator);
        }
    };
    /**
     * 判断指定中介者是否包含在该模块里
     *
     * @param {IModuleMediator} mediator 要判断的中介者
     * @returns {boolean} 是否包含在该模块里
     * @memberof Module
     */
    Module.prototype.constainsMediator = function (mediator) {
        return (this._mediators.indexOf(mediator) >= 0);
    };
    /**
     * 列出模块所需CSS资源URL，可以重写
     *
     * @returns {string[]} CSS资源列表
     * @memberof Module
     */
    Module.prototype.listStyleFiles = function () {
        return null;
    };
    /**
     * 列出模块所需JS资源URL，可以重写
     *
     * @returns {string[]} js资源列表
     * @memberof Module
     */
    Module.prototype.listJsFiles = function () {
        return null;
    };
    /**
     * 列出模块初始化请求，可以重写
     *
     * @returns {RequestData[]} 模块的初始化请求列表
     * @memberof Module
     */
    Module.prototype.listInitRequests = function () {
        return null;
    };
    /**
     * 当模块资源加载完毕后调用
     *
     * @param {Error} [err] 任何一个Mediator资源加载出错会给出该错误对象，没错则不给
     * @memberof Module
     */
    Module.prototype.onLoadAssets = function (err) {
    };
    /**
     * 打开模块时调用，可以重写
     *
     * @param {*} [data] 传递给模块的数据
     * @memberof Module
     */
    Module.prototype.onOpen = function (data) {
        // 调用所有已托管中介者的open方法
        for (var _i = 0, _a = this._mediators; _i < _a.length; _i++) {
            var mediator = _a[_i];
            mediator.open(data);
        }
    };
    /**
     * 关闭模块时调用，可以重写
     *
     * @param {*} [data] 传递给模块的数据
     * @memberof Module
     */
    Module.prototype.onClose = function (data) {
        // 调用所有已托管中介者的close方法
        for (var _i = 0, _a = this._mediators.concat(); _i < _a.length; _i++) {
            var mediator = _a[_i];
            mediator.close(data);
        }
    };
    /**
     * 模块切换到前台时调用（open之后或者其他模块被关闭时），可以重写
     *
     * @param {IModuleConstructor|undefined} from 从哪个模块切换过来
     * @param {*} [data] 传递给模块的数据
     * @memberof Module
     */
    Module.prototype.onActivate = function (from, data) {
    };
    /**
     * 模块切换到后台是调用（close之后或者其他模块打开时），可以重写
     *
     * @param {IModuleConstructor|undefined} to 要切换到哪个模块
     * @param {*} [data] 传递给模块的数据
     * @memberof Module
     */
    Module.prototype.onDeactivate = function (to, data) {
    };
    Object.defineProperty(Module.prototype, "observable", {
        /**
         * 暴露IObservable接口
         *
         * @readonly
         * @type {IObservable}
         * @memberof Module
         */
        get: function () {
            return this._observable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Module.prototype, "parent", {
        /**
         * 获取到父级IObservable
         *
         * @type {IObservable}
         * @memberof Module
         */
        get: function () {
            return this._observable.parent;
        },
        enumerable: true,
        configurable: true
    });
    /** dispatchModule方法实现 */
    Module.prototype.dispatch = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        this._observable.dispatch.apply(this._observable, params);
    };
    /**
     * 监听消息
     *
     * @param {string} type 消息类型
     * @param {Function} handler 消息处理函数
     * @param {*} [thisArg] 消息this指向
     * @memberof Module
     */
    Module.prototype.listen = function (type, handler, thisArg) {
        this._observable.listen(type, handler, thisArg);
    };
    /**
     * 移除消息监听
     *
     * @param {string} type 消息类型
     * @param {Function} handler 消息处理函数
     * @param {*} [thisArg] 消息this指向
     * @memberof Module
     */
    Module.prototype.unlisten = function (type, handler, thisArg) {
        this._observable.unlisten(type, handler, thisArg);
    };
    /**
     * 注册命令到特定消息类型上，当这个类型的消息派发到框架内核时会触发Command运行
     *
     * @param {string} type 要注册的消息类型
     * @param {(ICommandConstructor)} cmd 命令处理器，可以是方法形式，也可以使类形式
     * @memberof Module
     */
    Module.prototype.mapCommand = function (type, cmd) {
        this._observable.mapCommand(type, cmd);
    };
    /**
     * 注销命令
     *
     * @param {string} type 要注销的消息类型
     * @param {(ICommandConstructor)} cmd 命令处理器
     * @returns {void}
     * @memberof Module
     */
    Module.prototype.unmapCommand = function (type, cmd) {
        this._observable.unmapCommand(type, cmd);
    };
    /**
     * 销毁模块，可以重写
     *
     * @memberof Module
     */
    Module.prototype.dispose = function () {
        if (this._disposed)
            return;
        // 调用模板方法
        this.onDispose();
        // 关闭自身
        var cls = Object(__WEBPACK_IMPORTED_MODULE_4__utils_ConstructUtil__["a" /* getConstructor */])(this.constructor);
        __WEBPACK_IMPORTED_MODULE_3__ModuleManager__["moduleManager"].close(cls);
        // 如果没关上则不销毁
        if (__WEBPACK_IMPORTED_MODULE_3__ModuleManager__["moduleManager"].isOpened(cls))
            return;
        // 将所有已托管的中介者销毁
        for (var i = 0, len = this._mediators.length; i < len; i++) {
            var mediator = this._mediators.pop();
            this.undelegateMediator(mediator);
            mediator.dispose();
        }
        // 销毁Observable实例
        this._observable.dispose();
        this._observable = null;
        // 记录
        this._disposed = true;
    };
    /**
     * 当销毁时调用
     *
     * @memberof Mediator
     */
    Module.prototype.onDispose = function () {
        // 可重写
    };
    return Module;
}());
/* harmony default export */ __webpack_exports__["default"] = (Module);


/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__DataType__ = __webpack_require__(35);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var ResponseData = /** @class */ (function (_super) {
    __extends(ResponseData, _super);
    function ResponseData() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ResponseData;
}(__WEBPACK_IMPORTED_MODULE_0__DataType__["default"]));
/* harmony default export */ __webpack_exports__["default"] = (ResponseData);


/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-11
 * @modify date 2017-09-11
 *
 * 请求或返回数据结构体
*/
var DataType = /** @class */ (function () {
    function DataType() {
    }
    /**
     * 解析后端返回的JSON对象，生成结构体
     *
     * @param {any} data 后端返回的JSON对象
     * @returns {DataType} 结构体对象
     * @memberof DataType
     */
    DataType.prototype.parse = function (data) {
        this.__rawData = this.doParse(data);
        return this;
    };
    return DataType;
}());
/* harmony default export */ __webpack_exports__["default"] = (DataType);


/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["pushCompileCommand"] = pushCompileCommand;
/* harmony export (immutable) */ __webpack_exports__["unshiftCompileCommand"] = unshiftCompileCommand;
/* harmony export (immutable) */ __webpack_exports__["compile"] = compile;
/* harmony export (immutable) */ __webpack_exports__["compileValue"] = compileValue;
/* harmony export (immutable) */ __webpack_exports__["compileFunc"] = compileFunc;
/* harmony export (immutable) */ __webpack_exports__["compileOn"] = compileOn;
/* harmony export (immutable) */ __webpack_exports__["compileIf"] = compileIf;
/* harmony export (immutable) */ __webpack_exports__["compileFor"] = compileFor;
/* harmony export (immutable) */ __webpack_exports__["compileMessage"] = compileMessage;
/* harmony export (immutable) */ __webpack_exports__["compileResponse"] = compileResponse;
/* harmony export (immutable) */ __webpack_exports__["searchUI"] = searchUI;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__bind_BindManager__ = __webpack_require__(26);

function getBindParams(target) {
    var bindParams = target.__bind_commands__;
    if (!bindParams) {
        bindParams = [];
        Object.defineProperty(target, "__bind_commands__", {
            configurable: true,
            enumerable: false,
            writable: true,
            value: bindParams
        });
    }
    return bindParams;
}
/**
 * 添加编译命令到显示对象上（正向）
 *
 * @export
 * @param {ICompileTarget} target 显示对象
 * @param {IBindCommand} cmd 命令函数
 * @param {...any[]} args 命令参数列表
 */
function pushCompileCommand(target, cmd) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    // 添加编译指令
    getBindParams(target).push({ cmd: cmd, args: args });
}
/**
 * 添加编译命令到显示对象上（反向）
 *
 * @export
 * @param {ICompileTarget} target 显示对象
 * @param {IBindCommand} cmd 命令函数
 * @param {...any[]} args 命令参数列表
 */
function unshiftCompileCommand(target, cmd) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    getBindParams(target).unshift({ cmd: cmd, args: args });
}
/**
 * 编译显示对象，会先编译自身，然后再递归编译子对象
 *
 * @export
 * @param {IMediator} mediator 显示对象所属的中介者
 * @param {ICompileTarget} target 显示对象
 */
function compile(mediator, target) {
    // 取到编译参数列表
    var bindParams = target.__bind_commands__;
    // 编译target自身
    if (bindParams) {
        // 这里没有提前读取出length属性，因为需要动态判断数组长度
        for (var i = 0; i < bindParams.length;) {
            // 使用shift按顺序取出编译命令
            var params = bindParams.shift();
            // 调用编译命令，并且更新中止状态
            params.cmd.apply(params, [mediator, target].concat(params.args));
        }
    }
}
/**
 * 编译bindValue命令，不会中止编译
 */
function compileValue(mediator, target, name, exp) {
    __WEBPACK_IMPORTED_MODULE_0__bind_BindManager__["a" /* bindManager */].bindValue(mediator, target, name, exp);
}
/**
 * 编译bindFunc命令，不会中止编译
 */
function compileFunc(mediator, target, name) {
    var argExps = [];
    for (var _i = 3; _i < arguments.length; _i++) {
        argExps[_i - 3] = arguments[_i];
    }
    __WEBPACK_IMPORTED_MODULE_0__bind_BindManager__["a" /* bindManager */].bindFunc.apply(__WEBPACK_IMPORTED_MODULE_0__bind_BindManager__["a" /* bindManager */], [mediator, target, name].concat(argExps));
}
/**
 * 编译bindOn命令，不会中止编译
 */
function compileOn(mediator, target, type, exp) {
    __WEBPACK_IMPORTED_MODULE_0__bind_BindManager__["a" /* bindManager */].bindOn(mediator, target, type, exp);
}
/**
 * 编译bindIf命令，会中止编译，直到判断条件为true时才会启动以继续编译
 */
function compileIf(mediator, target, exp) {
    // 将后面的编译命令缓存起来
    var bindParams = target.__bind_commands__;
    var cached = bindParams.splice(0, bindParams.length);
    // 绑定if命令
    var terminated = false;
    __WEBPACK_IMPORTED_MODULE_0__bind_BindManager__["a" /* bindManager */].bindIf(mediator, target, exp, function (value) {
        // 如果条件为true，则启动继续编译，但只编译一次，编译过就不需要再编译了
        if (!terminated && value) {
            // 恢复后面的命令
            target.__bind_commands__ = cached;
            // 继续编译
            compile(mediator, target);
            // 设置已终结标识
            terminated = true;
        }
    });
}
/**
 * 编译bindFor命令，会中止编译，直到生成新的renderer实例时才会继续编译新实例
 */
function compileFor(mediator, target, exp) {
    // 将后面的编译命令缓存起来
    var leftHandlers = target.__stop_left_handlers__;
    // 绑定if命令
    __WEBPACK_IMPORTED_MODULE_0__bind_BindManager__["a" /* bindManager */].bindFor(mediator, target, exp, function (data, renderer) {
        var subLeftHandlers = leftHandlers.concat();
        var bindTargets = [];
        // 针对每一个renderer赋值后续编译指令
        for (var _i = 0, subLeftHandlers_1 = subLeftHandlers; _i < subLeftHandlers_1.length; _i++) {
            var leftHandler = subLeftHandlers_1[_i];
            leftHandler(renderer, bindTargets, subLeftHandlers);
        }
        // 编译renderer实例
        for (var depth in bindTargets) {
            var dict = bindTargets[depth];
            dict.forEach(function (target) { return compile(mediator, target); });
        }
    });
}
/**
 * 编译bindMessage命令，不会中止编译
 */
function compileMessage(mediator, target, type, name, exp, observable) {
    __WEBPACK_IMPORTED_MODULE_0__bind_BindManager__["a" /* bindManager */].bindMessage(mediator, target, type, name, exp, observable);
}
/**
 * 编译bindResponse命令，不会中止编译
 */
function compileResponse(mediator, target, type, name, exp, observable) {
    __WEBPACK_IMPORTED_MODULE_0__bind_BindManager__["a" /* bindManager */].bindResponse(mediator, target, type, name, exp, observable);
}
/**
 * 搜索UI，取到目标节点，执行回调
 *
 * @export
 * @param {*} values 值结构字典
 * @param {*} ui ui实体
 * @param {(ui:any, key:string, value:any, depth?:number)=>void} callback 回调
 * @param {number} [depth=0] 遍历深度，方法会继续增加这个深度
 */
function searchUI(values, ui, callback, depth) {
    if (depth === void 0) { depth = 0; }
    for (var key in values) {
        var value = values[key];
        var index = key.indexOf(".");
        if (index >= 0) {
            // 是表达式寻址，递归寻址
            var newValue = {};
            newValue[key.substr(index + 1)] = value;
            searchUI(newValue, ui[key.substring(0, index)], callback, depth + 1);
        }
        else if (typeof value == "object" && !(value instanceof Array)) {
            // 是子对象寻址，递归寻址
            searchUI(value, ui[key], callback, depth + 1);
        }
        else {
            // 是表达式，调用回调，将调用层级也传递回去
            callback(ui, key, value, depth);
        }
    }
}


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(71), __webpack_require__(34), __webpack_require__(7)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Test_1, ResponseData_1, NetManager_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @author TemplateGenerator
     * @email initial_r@qq.com
     * @modify date 10/9/2017
     *
     * 测试
    */
    var TestResponse = /** @class */ (function (_super) {
        __extends(TestResponse, _super);
        function TestResponse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(TestResponse.prototype, "__params", {
            get: function () {
                return {
                    type: "Test",
                    protocol: "http",
                    method: "GET"
                };
            },
            enumerable: true,
            configurable: true
        });
        ;
        TestResponse.prototype.doParse = function (data) {
            if (data == null)
                return;
            this.__params.success = data.success;
            this.test = new Test_1.default().parse(data.test);
        };
        TestResponse.prototype.pack = function () {
            return {
                test: this.test.pack()
            };
        };
        TestResponse.type = "Test";
        return TestResponse;
    }(ResponseData_1.default));
    exports.default = TestResponse;
    /** 注册返回体 */
    NetManager_1.netManager.registerResponse(TestResponse);
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdFJlc3BvbnNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVGVzdFJlc3BvbnNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7SUFJQTs7Ozs7O01BTUU7SUFDRjtRQUEwQyxnQ0FBWTtRQUF0RDs7UUFrQ0EsQ0FBQztRQXhCRyxzQkFBVyxrQ0FBUTtpQkFBbkI7Z0JBRUksTUFBTSxDQUFDO29CQUNILElBQUksRUFBRSxNQUFNO29CQUNaLFFBQVEsRUFBRSxNQUFNO29CQUNoQixNQUFNLEVBQUUsS0FBSztpQkFDaEIsQ0FBQztZQUNOLENBQUM7OztXQUFBO1FBQUEsQ0FBQztRQUlRLDhCQUFPLEdBQWpCLFVBQWtCLElBQVE7WUFFdEIsRUFBRSxDQUFBLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQztnQkFBQyxNQUFNLENBQUM7WUFDeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNyQyxJQUFJLENBQUMsSUFBSSxHQUFTLElBQUksY0FBSSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsRCxDQUFDO1FBRU0sMkJBQUksR0FBWDtZQUVJLE1BQU0sQ0FBQztnQkFDSCxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7YUFDekIsQ0FBQztRQUNOLENBQUM7UUFkYSxpQkFBSSxHQUFVLE1BQU0sQ0FBQztRQWV2QyxtQkFBQztLQUFBLEFBbENELENBQTBDLHNCQUFZLEdBa0NyRDtzQkFsQ29CLFlBQVk7SUFvQ2pDLFlBQVk7SUFDWix1QkFBVSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFDIn0=

/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hash", function() { return hash; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_injector_Injector__ = __webpack_require__(1);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-06
 * @modify date 2017-09-06
 *
 * Hash类是地址路由（网页哈希）管理器，规定哈希格式为：#[模块名]?[参数名]=[参数值]&[参数名]=[参数值]&...
*/
var Hash = /** @class */ (function () {
    function Hash() {
        this._params = {};
        this._direct = false;
        this._keepHash = false;
        this._hash = window.location.hash;
        var reg = /#([^\?&]+)(\?([^\?&=]+=[^\?&=]+)(&([^\?&=]+=[^\?&=]+))*)?/;
        var result = reg.exec(this._hash);
        if (result) {
            // 解析模块名称
            this._moduleName = result[1];
            // 解析模块参数
            var paramsStr = result[2];
            if (paramsStr != null) {
                paramsStr = paramsStr.substr(1);
                var params = paramsStr.split("&");
                for (var i = 0, len = params.length; i < len; i++) {
                    var pair = params[i];
                    if (pair != null) {
                        var temp = pair.split("=");
                        // 键和值都要做一次URL解码
                        var key = decodeURIComponent(temp[0]);
                        var value = decodeURIComponent(temp[1]);
                        this._params[key] = value;
                    }
                }
            }
            // 处理direct参数
            this._direct = (this._params.direct == "true");
            delete this._params.direct;
            // 处理keepHash参数
            this._keepHash = (this._params.keepHash == "true");
            delete this._params.keepHash;
            // 如果keepHash不是true，则移除哈希值
            if (!this._keepHash)
                window.location.hash = "";
        }
    }
    Object.defineProperty(Hash.prototype, "hash", {
        /**
         * 获取原始的哈希字符串
         *
         * @readonly
         * @type {string}
         * @memberof Hash
         */
        get: function () {
            return this._hash;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Hash.prototype, "moduleName", {
        /**
         * 获取模块名
         *
         * @readonly
         * @type {string}
         * @memberof Hash
         */
        get: function () {
            return this._moduleName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Hash.prototype, "params", {
        /**
         * 获取传递给模块的参数
         *
         * @readonly
         * @type {{[key:string]:string}}
         * @memberof Hash
         */
        get: function () {
            return this._params;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Hash.prototype, "direct", {
        /**
         * 获取是否直接跳转模块
         *
         * @readonly
         * @type {boolean}
         * @memberof Hash
         */
        get: function () {
            return this._direct;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Hash.prototype, "keepHash", {
        /**
         * 获取是否保持哈希值
         *
         * @readonly
         * @type {boolean}
         * @memberof Hash
         */
        get: function () {
            return this._keepHash;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取指定哈希参数
     *
     * @param {string} key 参数名
     * @returns {string} 参数值
     * @memberof Hash
     */
    Hash.prototype.getParam = function (key) {
        return this._params[key];
    };
    Hash = __decorate([
        __WEBPACK_IMPORTED_MODULE_1__core_injector_Injector__["Injectable"],
        __metadata("design:paramtypes", [])
    ], Hash);
    return Hash;
}());
/* harmony default export */ __webpack_exports__["default"] = (Hash);
/** 再额外导出一个单例 */
var hash = __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].getInject(Hash);


/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = wrapSkin;
/* harmony export (immutable) */ __webpack_exports__["a"] = copyRef;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_olympus_r_engine_assets_AssetsManager__ = __webpack_require__(9);

/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-10-26
 * @modify date 2017-10-26
 *
 * 为DOM提供皮肤转换的工具集
*/
/**
 * 为中介者包装皮肤
 *
 * @export
 * @param {IMediator} mediator 中介者
 * @param {(HTMLElement|string|string[])} skin 皮肤，可以是HTMLElement，也可以是皮肤字符串，也可以是皮肤模板地址或地址数组
 * @returns {HTMLElement} 皮肤的HTMLElement形式，可能会稍后再填充内容，如果想在皮肤加载完毕后再拿到皮肤请使用complete参数
 */
function wrapSkin(mediator, skin) {
    var result;
    if (skin instanceof HTMLElement) {
        result = skin;
    }
    else {
        // 生成一个临时的div
        result = document.createElement("div");
        // 篡改mediator的onOpen方法，先于onOpen将皮肤附上去
        var oriFunc = mediator.hasOwnProperty("onOpen") ? mediator.onOpen : null;
        mediator.onOpen = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (skin instanceof Array) {
                // 是数组，将所有内容连接起来再一起赋值
                skin = skin.map(getContent).join("");
            }
            // 赋值皮肤内容
            result.innerHTML = skin;
            // 拷贝引用
            doCopyRef(result, skin, mediator);
            // 恢复原始方法
            if (oriFunc)
                mediator.onOpen = oriFunc;
            else
                delete mediator.onOpen;
            // 调用原始方法
            mediator.onOpen.apply(this, args);
        };
    }
    // 赋值皮肤
    mediator.skin = result;
    // 同步返回皮肤
    return result;
}
/**
 * 将from中的所有拥有id属性的节点引用复制到to对象上
 *
 * @export
 * @param {HTMLElement} from 复制源DOM节点
 * @param {*} to 复制目标对象
 */
function copyRef(from, to) {
    doCopyRef(from, from.innerHTML, to);
}
function doCopyRef(fromEle, fromStr, to) {
    // 使用正则表达式将拥有id的节点赋值给mediator
    var reg = /id=("([^"]+)"|'([^']+)')/g;
    var res;
    while (res = reg.exec(fromStr)) {
        var id = res[2] || res[3];
        to[id] = fromEle.querySelector("#" + id);
    }
}
function getContent(skin) {
    if (skin.indexOf("<") >= 0 && skin.indexOf(">") >= 0) {
        // 是皮肤字符串，直接返回
        return skin;
    }
    else {
        // 是皮肤路径或路径短名称，获取后返回
        return __WEBPACK_IMPORTED_MODULE_0_olympus_r_engine_assets_AssetsManager__["a" /* assetsManager */].getAssets(skin);
    }
}


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/// <reference types="olympus-r"/>
/// <reference types="olympus-r-dom"/>
/// <reference types="olympus-r-egret"/>
/// <reference path="./egret/libs/modules/egret/egret.d.ts"/>
/// <reference path="./egret/libs/modules/res/res.d.ts"/>
/// <reference path="./egret/libs/modules/eui/eui.d.ts"/>
/// <reference path="./egret/libs/modules/tween/tween.d.ts"/>
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(41), __webpack_require__(77), __webpack_require__(5), __webpack_require__(19), __webpack_require__(18)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, FirstModule_1, Olympus_1, Environment_1, DOMBridge_1, EgretBridge_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @author Raykid
     * @email initial_r@qq.com
     * @create date 2017-08-31
     * @modify date 2017-09-01
     *
     * 测试项目
    */
    Olympus_1.default.startup({
        bridges: [
            new DOMBridge_1.default({
                container: "#rootDOM"
            }),
            new EgretBridge_1.default({
                width: 720,
                height: 1280,
                pathPrefix: "egret/",
                container: "#rootEgret",
                backgroundColor: 0,
            })
        ],
        firstModule: FirstModule_1.default,
        loadElement: "#loading",
        hostsDict: {
            dev: ["http://www.test.17zuoye.net/"],
            test: ["https://www.test.17zuoye.net/"],
            staging: ["https://www.staging.17zuoye.net/"],
            prod: ["https://www.17zuoye.com/"]
        },
        cdnsDict: {
            test: ["https://cdn-cnc.test.17zuoye.net/"],
            staging: ["https://cdn-cnc.staging.17zuoye.net/"],
            prod: ["https://cdn-cnc.17zuoye.com/"]
        },
        pathDict: {
            a: "test1.js",
            b: "test2.js"
        },
        preloads: ["a", "b"],
        onInited: function () {
            // bridgeManager.getBridge("Egret").defaultScenePolicy = none;
            console.log(Environment_1.environment.env, Environment_1.environment.getHost(), Environment_1.environment.curCDNHost);
        },
        onInitProgress: function (prg, step) {
            var args = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
            }
            console.log.apply(console, [prg, step].concat(args));
        }
    });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0NBQWtDO0FBQ2xDLHNDQUFzQztBQUN0Qyx3Q0FBd0M7QUFDeEMsNkRBQTZEO0FBQzdELHlEQUF5RDtBQUN6RCx5REFBeUQ7QUFDekQsNkRBQTZEOzs7O0lBVzdEOzs7Ozs7O01BT0U7SUFDRixpQkFBTyxDQUFDLE9BQU8sQ0FBQztRQUNaLE9BQU8sRUFBRTtZQUNMLElBQUksbUJBQVMsQ0FBQztnQkFDVixTQUFTLEVBQUUsVUFBVTthQUN4QixDQUFDO1lBQ0YsSUFBSSxxQkFBVyxDQUFDO2dCQUNaLEtBQUssRUFBRSxHQUFHO2dCQUNWLE1BQU0sRUFBRSxJQUFJO2dCQUNaLFVBQVUsRUFBRSxRQUFRO2dCQUNwQixTQUFTLEVBQUUsWUFBWTtnQkFDdkIsZUFBZSxFQUFFLENBQUM7YUFFckIsQ0FBQztTQUNMO1FBQ0QsV0FBVyxFQUFFLHFCQUFXO1FBQ3hCLFdBQVcsRUFBRSxVQUFVO1FBQ3ZCLFNBQVMsRUFBRTtZQUNQLEdBQUcsRUFBRSxDQUFDLDhCQUE4QixDQUFDO1lBQ3JDLElBQUksRUFBRSxDQUFDLCtCQUErQixDQUFDO1lBQ3ZDLE9BQU8sRUFBRSxDQUFDLGtDQUFrQyxDQUFDO1lBQzdDLElBQUksRUFBRSxDQUFDLDBCQUEwQixDQUFDO1NBQ3JDO1FBQ0QsUUFBUSxFQUFFO1lBQ04sSUFBSSxFQUFFLENBQUMsbUNBQW1DLENBQUM7WUFDM0MsT0FBTyxFQUFFLENBQUMsc0NBQXNDLENBQUM7WUFDakQsSUFBSSxFQUFFLENBQUMsOEJBQThCLENBQUM7U0FDekM7UUFDRCxRQUFRLEVBQUU7WUFDTixDQUFDLEVBQUUsVUFBVTtZQUNiLENBQUMsRUFBRSxVQUFVO1NBQ2hCO1FBQ0QsUUFBUSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztRQUNwQixRQUFRLEVBQUU7WUFFTiw4REFBOEQ7WUFDOUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBVyxDQUFDLEdBQUcsRUFBRSx5QkFBVyxDQUFDLE9BQU8sRUFBRSxFQUFFLHlCQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDaEYsQ0FBQztRQUNELGNBQWMsRUFBRSxVQUFDLEdBQVUsRUFBRSxJQUFhO1lBQUUsY0FBTztpQkFBUCxVQUFPLEVBQVAscUJBQU8sRUFBUCxJQUFPO2dCQUFQLDZCQUFPOztZQUMvQyxPQUFPLENBQUMsR0FBRyxPQUFYLE9BQU8sR0FBSyxHQUFHLEVBQUUsSUFBSSxTQUFLLElBQUksR0FBRTtRQUNwQyxDQUFDO0tBQ0osQ0FBQyxDQUFDIn0=

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(45), __webpack_require__(37), __webpack_require__(72), __webpack_require__(74), __webpack_require__(16), __webpack_require__(1), __webpack_require__(8), __webpack_require__(12), __webpack_require__(33), __webpack_require__(10), __webpack_require__(75), __webpack_require__(31)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, SecondModule_1, TestResponse_1, TestRequest_1, FuckModel_1, SceneMediator_1, Injector_1, ModuleManager_1, ModuleMessage_1, Module_1, Injector_2, Injector_3, AudioManager_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @author Raykid
     * @email initial_r@qq.com
     * @create date 2017-09-18
     * @modify date 2017-09-18
     *
     * 测试首个模块
    */
    var FirstMediator = /** @class */ (function (_super) {
        __extends(FirstMediator, _super);
        function FirstMediator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FirstMediator.prototype.listAssets = function () {
            return ["./modules/test.html"];
        };
        FirstMediator.prototype.onOpen = function () {
            var _this = this;
            // this.mapListener(this.btn, "click", function():void
            // {
            //     this.txt.textContent = "Fuck you!!!";
            //     this.moduleManager.open(SecondModule);
            // }, this);
            console.log(this.fuckModel1.fuck, this.fuckModel1 === this.fuckModel2, this.fuckModel1 === this.fuckModel3);
            this.viewModel = {
                fuckList: [1, 2, "shit", "you"],
                fuckText: "fuck you",
                onClick: function () {
                    _this.viewModel.fuckText = "clicked";
                    _this.moduleManager.open(SecondModule_1.default, null, true);
                },
                fuckModel: this.fuckModel1
            };
            AudioManager_1.audioManager.playMusic({
                url: "./test.mp3"
            });
            setTimeout(function () {
                _this.viewModel.fuckText = "1234";
                _this.viewModel.fuckList = ["hello", "world"];
                _this.fuckModel1.fuck = "You!!!";
            }, 3000);
            this.dispatch(new TestRequest_1.default());
        };
        FirstMediator.prototype.onModuleChange = function (to, from) {
            if (to == FirstModule)
                console.log("change to first module!");
            else if (to == SecondModule_1.default)
                console.log("change to second module!");
        };
        FirstMediator.prototype.onResponse = function (res, req) {
            alert("123");
        };
        __decorate([
            Injector_1.Inject,
            __metadata("design:type", ModuleManager_1.default)
        ], FirstMediator.prototype, "moduleManager", void 0);
        __decorate([
            Injector_1.Inject,
            __metadata("design:type", FuckModel_1.default)
        ], FirstMediator.prototype, "fuckModel1", void 0);
        __decorate([
            Injector_1.Inject,
            __metadata("design:type", FuckModel_1.IFuckModel)
        ], FirstMediator.prototype, "fuckModel2", void 0);
        __decorate([
            Injector_1.Inject(1),
            __metadata("design:type", FuckModel_1.IFuckModel)
        ], FirstMediator.prototype, "fuckModel3", void 0);
        __decorate([
            Injector_2.BindOn({ click: "onClick" }),
            Injector_2.BindIf("fuckText == '1234'"),
            __metadata("design:type", HTMLElement)
        ], FirstMediator.prototype, "btn", void 0);
        __decorate([
            Injector_2.BindFor("fuck in fuckList"),
            Injector_2.BindValue({ textContent: "fuck + ' - ' + fuckText + ' - 1'" }),
            __metadata("design:type", HTMLElement)
        ], FirstMediator.prototype, "txt", void 0);
        __decorate([
            Injector_2.BindValue("textContent", "fuckModel.fuck"),
            __metadata("design:type", HTMLElement)
        ], FirstMediator.prototype, "fuck", void 0);
        __decorate([
            Injector_2.MessageHandler(ModuleMessage_1.default.MODULE_CHANGE),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object, Object]),
            __metadata("design:returntype", void 0)
        ], FirstMediator.prototype, "onModuleChange", null);
        __decorate([
            Injector_2.ResponseHandler,
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [TestResponse_1.default, TestRequest_1.default]),
            __metadata("design:returntype", void 0)
        ], FirstMediator.prototype, "onResponse", null);
        FirstMediator = __decorate([
            Injector_3.DOMMediatorClass("./modules/test.html")
        ], FirstMediator);
        return FirstMediator;
    }(SceneMediator_1.default));
    var FirstModule = /** @class */ (function (_super) {
        __extends(FirstModule, _super);
        function FirstModule() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FirstModule.prototype.listJsFiles = function () {
            return ["test1.js", "./test2.js"];
        };
        FirstModule.prototype.onFuck = function (a) {
            console.log("message at FirstModule: " + a);
        };
        __decorate([
            Injector_2.DelegateMediator,
            __metadata("design:type", FirstMediator)
        ], FirstModule.prototype, "_mediator", void 0);
        __decorate([
            Injector_2.MessageHandler("fuck"),
            Injector_2.GlobalMessageHandler("fuck"),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", void 0)
        ], FirstModule.prototype, "onFuck", null);
        FirstModule = __decorate([
            Injector_2.ModuleClass
        ], FirstModule);
        return FirstModule;
    }(Module_1.default));
    exports.default = FirstModule;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlyc3RNb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJGaXJzdE1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBYUE7Ozs7Ozs7TUFPRTtJQUdGO1FBQTRCLGlDQUFhO1FBQXpDOztRQXFFQSxDQUFDO1FBakRVLGtDQUFVLEdBQWpCO1lBRUksTUFBTSxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUNuQyxDQUFDO1FBRU0sOEJBQU0sR0FBYjtZQUFBLGlCQThCQztZQTVCRyxzREFBc0Q7WUFDdEQsSUFBSTtZQUNKLDRDQUE0QztZQUM1Qyw2Q0FBNkM7WUFDN0MsWUFBWTtZQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsS0FBSyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVLEtBQUssSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRTVHLElBQUksQ0FBQyxTQUFTLEdBQUc7Z0JBQ2IsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDO2dCQUMvQixRQUFRLEVBQUUsVUFBVTtnQkFDcEIsT0FBTyxFQUFFO29CQUNMLEtBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztvQkFDcEMsS0FBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsc0JBQVksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQ3RELENBQUM7Z0JBQ0QsU0FBUyxFQUFFLElBQUksQ0FBQyxVQUFVO2FBQzdCLENBQUM7WUFFRiwyQkFBWSxDQUFDLFNBQVMsQ0FBQztnQkFDbkIsR0FBRyxFQUFFLFlBQVk7YUFDcEIsQ0FBQyxDQUFDO1lBRUgsVUFBVSxDQUFDO2dCQUNQLEtBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQztnQkFD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

/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Message__ = __webpack_require__(21);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-01
 * @modify date 2017-09-01
 *
 * 框架内核通用消息
*/
var CommonMessage = /** @class */ (function (_super) {
    __extends(CommonMessage, _super);
    /**
     * Creates an instance of Message.
     * @param {string} type 消息类型
     * @param {...any[]} params 可能的消息参数列表
     * @memberof Message
     */
    function CommonMessage(type) {
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this, type) || this;
        _this.params = params;
        return _this;
    }
    return CommonMessage;
}(__WEBPACK_IMPORTED_MODULE_0__Message__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (CommonMessage);


/***/ }),
/* 43 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 44 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(16), __webpack_require__(33), __webpack_require__(10), __webpack_require__(60)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, SceneMediator_1, Module_1, Injector_1, Injector_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @author Raykid
     * @email initial_r@qq.com
     * @create date 2017-09-18
     * @modify date 2017-09-18
     *
     * 测试第二个模块
    */
    var SecondMediator = /** @class */ (function (_super) {
        __extends(SecondMediator, _super);
        function SecondMediator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SecondMediator.prototype.listAssets = function () {
            return ["preload"];
        };
        SecondMediator.prototype.onOpen = function () {
            var _this = this;
            this.mapListener(this.btn, egret.TouchEvent.TOUCH_TAP, function () {
                // moduleManager.close(SecondModule);
                _this.dispatch("FuckMsg", "Shit!!!");
            });
            this.viewModel = {
                onMsg: function (msg) {
                    // 表达式里使用函数可以在函数里执行复杂逻辑，并且具有代码提示
                    console.log(msg);
                    return msg + " - 1";
                },
                fuck: "you",
                fuckList: ["fuck", "shit", "you", "!!!"]
            };
            // 测试消息
            this.dispatch("fuck", 123);
        };
        __decorate([
            Injector_1.BindMessage("FuckMsg", { label: "onMsg($arguments[0])" }),
            Injector_1.BindFunc("getCurrentState", ["fuck", "onMsg", undefined]),
            __metadata("design:type", eui.Button)
        ], SecondMediator.prototype, "btn", void 0);
        __decorate([
            Injector_1.BindFor("i in fuckList"),
            Injector_1.BindValue("txt.text", "i"),
            Injector_1.BindFor("lst", "key in fuckList"),
            Injector_1.BindValue({
                txt: {
                    text: "$target.$hashCode"
                }
            }),
            __metadata("design:type", eui.DataGroup)
        ], SecondMediator.prototype, "lst", void 0);
        SecondMediator = __decorate([
            Injector_2.EgretMediatorClass("Fuck2Skin")
        ], SecondMediator);
        return SecondMediator;
    }(SceneMediator_1.default));
    var SecondModule = /** @class */ (function (_super) {
        __extends(SecondModule, _super);
        function SecondModule() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SecondModule.prototype.onFuck = function (a) {
            console.log("message at SecondModule: " + a);
        };
        __decorate([
            Injector_1.DelegateMediator,
            __metadata("design:type", SecondMediator)
        ], SecondModule.prototype, "_mediator", void 0);
        __decorate([
            Injector_1.MessageHandler("fuck"),
            Injector_1.GlobalMessageHandler("fuck"),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", void 0)
        ], SecondModule.prototype, "onFuck", null);
        SecondModule = __decorate([
            Injector_1.ModuleClass
        ], SecondModule);
        return SecondModule;
    }(Module_1.default));
    exports.default = SecondModule;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2Vjb25kTW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiU2Vjb25kTW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFLQTs7Ozs7OztNQU9FO0lBR0Y7UUFBNkIsa0NBQWE7UUFBMUM7O1FBdUNBLENBQUM7UUF4QlUsbUNBQVUsR0FBakI7WUFFSSxNQUFNLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN2QixDQUFDO1FBRU0sK0JBQU0sR0FBYjtZQUFBLGlCQWtCQztZQWhCRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUU7Z0JBQ25ELHFDQUFxQztnQkFFckMsS0FBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDeEMsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsU0FBUyxHQUFHO2dCQUNiLEtBQUssRUFBRSxVQUFBLEdBQUc7b0JBQ04sZ0NBQWdDO29CQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUNqQixNQUFNLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQztnQkFDeEIsQ0FBQztnQkFDRCxJQUFJLEVBQUUsS0FBSztnQkFDWCxRQUFRLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUM7YUFDM0MsQ0FBQztZQUNGLE9BQU87WUFDUCxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUMvQixDQUFDO1FBbENEO1lBRkMsc0JBQVcsQ0FBQyxTQUFTLEVBQUUsRUFBQyxLQUFLLEVBQUUsc0JBQXNCLEVBQUMsQ0FBQztZQUN2RCxtQkFBUSxDQUFDLGlCQUFpQixFQUFFLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztzQ0FDL0MsR0FBRyxDQUFDLE1BQU07bURBQUM7UUFTdEI7WUFSQyxrQkFBTyxDQUFDLGVBQWUsQ0FBQztZQUN4QixvQkFBUyxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUM7WUFDMUIsa0JBQU8sQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLENBQUM7WUFDakMsb0JBQVMsQ0FBQztnQkFDUCxHQUFHLEVBQUU7b0JBQ0QsSUFBSSxFQUFFLG1CQUFtQjtpQkFDNUI7YUFDSixDQUFDO3NDQUNTLEdBQUcsQ0FBQyxTQUFTO21EQUFDO1FBYnZCLGNBQWM7WUFEbkIsNkJBQWtCLENBQUMsV0FBVyxDQUFDO1dBQzFCLGNBQWMsQ0F1Q25CO1FBQUQscUJBQUM7S0FBQSxBQXZDRCxDQUE2Qix1QkFBYSxHQXVDekM7SUFHRDtRQUEwQyxnQ0FBTTtRQUFoRDs7UUFXQSxDQUFDO1FBSlcsNkJBQU0sR0FBZCxVQUFlLENBQUM7WUFFWixPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2pELENBQUM7UUFQRDtZQURDLDJCQUFnQjtzQ0FDQyxjQUFjO3VEQUFDO1FBSWpDO1lBRkMseUJBQWMsQ0FBQyxNQUFNLENBQUM7WUFDdEIsK0JBQW9CLENBQUMsTUFBTSxDQUFDOzs7O2tEQUk1QjtRQVZnQixZQUFZO1lBRGhDLHNCQUFXO1dBQ1MsWUFBWSxDQVdoQztRQUFELG1CQUFDO0tBQUEsQUFYRCxDQUEwQyxnQkFBTSxHQVcvQztzQkFYb0IsWUFBWSJ9

/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = mutate;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_ObjectUtil__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Dep__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Watcher__ = __webpack_require__(24);



/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-11-06
 * @modify date 2017-11-06
 *
 * 变异器，将ViewModel变异为具有依赖功能的形式，也可以认为是编译过程
*/
// 记录数组中会造成数据更新的所有方法名
var _arrMethods = [
    "push",
    "pop",
    "unshift",
    "shift",
    "splice",
    "sort",
    "reverse"
];
/**
 * 将用户传进来的数据“变异”成为具有截获数据变更能力的数据
 * @param data 原始数据
 * @returns {any} 变异后的数据
 */
function mutate(data) {
    // 如果是简单类型，则啥也不做
    if (!data || typeof data != "object")
        return data;
    // 递归变异所有内部变量，及其__proto__下的属性，因为getter/setter会被定义在__proto__上，而不是当前对象上
    var keys = Object.keys(data).concat(Object.keys(data.__proto__));
    // 去重
    var temp = {};
    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var key = keys_1[_i];
        if (!temp[key]) {
            temp[key] = key;
            mutateObject(data, key);
        }
    }
    return data;
}
function mutateObject(data, key) {
    var depKey = Object(__WEBPACK_IMPORTED_MODULE_0__utils_ObjectUtil__["e" /* getObjectHashs */])(data, key);
    // 对每个复杂类型对象都要有一个对应的依赖列表
    var dep = data[depKey];
    if (!dep) {
        dep = new __WEBPACK_IMPORTED_MODULE_1__Dep__["a" /* default */]();
        // 判断本来这个属性是值属性还是getter/setter属性，要有不同的操作方式
        var desc = Object.getOwnPropertyDescriptor(data, key) || Object.getOwnPropertyDescriptor(data.__proto__, key);
        if (desc) {
            if (desc.hasOwnProperty("value")) {
                // 值属性的变异过程
                Object.defineProperty(data, key, {
                    enumerable: true,
                    configurable: false,
                    get: function () {
                        // 如果Watcher.updating不是null，说明当前正在执行表达式，那么获取的变量自然是其需要依赖的
                        var watcher = __WEBPACK_IMPORTED_MODULE_2__Watcher__["a" /* default */].updating;
                        if (watcher)
                            dep.watch(watcher);
                        // 利用闭包保存原始值
                        return desc.value;
                    },
                    set: function (v) {
                        if (!desc.writable || v === desc.value)
                            return;
                        desc.value = v;
                        // 如果是数组就走专门的数组变异方法，否则递归变异对象
                        if (Array.isArray(v))
                            mutateArray(v, dep);
                        else
                            mutate(v);
                        // 触发通知
                        dep.notify();
                    }
                });
            }
            else {
                // getter/setter属性的变异过程
                Object.defineProperty(data, key, {
                    enumerable: true,
                    configurable: false,
                    get: function () {
                        if (!desc.get)
                            return;
                        // 如果Watcher.updating不是null，说明当前正在执行表达式，那么获取的变量自然是其需要依赖的
                        var watcher = __WEBPACK_IMPORTED_MODULE_2__Watcher__["a" /* default */].updating;
                        if (watcher)
                            dep.watch(watcher);
                        // 返回get方法结果
                        return desc.get.call(data);
                    },
                    set: function (v) {
                        if (!desc.set)
                            return;
                        // 设置
                        desc.set.call(data, v);
                        // 如果是数组就走专门的数组变异方法，否则递归变异对象
                        if (Array.isArray(v))
                            mutateArray(v, dep);
                        else
                            mutate(v);
                        // 触发通知
                        dep.notify();
                    }
                });
            }
        }
        // 打一个标记表示已经变异过了
        Object.defineProperty(data, depKey, {
            value: dep,
            writable: false,
            enumerable: false,
            configurable: false
        });
    }
    // 递归子属性
    mutate(data[key]);
}
function mutateArray(arr, dep) {
    // 变异当前数组
    arr["__proto__"] = defineReactiveArray(dep);
    // 遍历当前数组，将内容对象全部变异
    for (var i = 0, len = arr.length; i < len; i++) {
        mutate(arr[i]);
    }
}
function defineReactiveArray(dep) {
    var proto = Array.prototype;
    var result = Object.create(proto);
    // 遍历所有方法，一个一个地变异
    _arrMethods.forEach(function (method) {
        // 利用闭包记录一个原始方法
        var oriMethod = proto[method];
        // 开始变异
        Object.defineProperty(result, method, {
            value: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                // 首先调用原始方法，获取返回值
                var result = oriMethod.apply(this, args);
                // 数组插入项
                var inserted;
                switch (method) {
                    case "push":
                    case "unshift":
                        inserted = args;
                        break;
                    case "splice":
                        inserted = args.slice(2);
                        break;
                }
                // 监视数组插入项，而不是重新监视整个数组
                if (inserted && inserted.length) {
                    mutateArray(inserted, dep);
                }
                // 触发更新
                dep.notify({ method: args });
                // 返回值
                return result;
            }
        });
    });
    // 提供替换数组设置的方法，因为直接设置数组下标的方式无法变异
    Object.defineProperty(result, "$set", {
        value: function (index, value) {
            // 超出数组长度默认追加到最后
            if (index >= this.length)
                index = this.length;
            return this.splice(index, 1, value)[0];
        }
    });
    // 提供替换数组移除的方法，因为直接移除的方式无法变异
    Object.defineProperty(result, "$remove", {
        value: function (item) {
            var index = this.indexOf(item);
            if (index > -1)
                return this.splice(index, 1);
            return null;
        }
    });
    return result;
}


/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_Dictionary__ = __webpack_require__(3);

/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-11-06
 * @modify date 2017-11-06
 *
 * 定义一个依赖，一个观察者实现
*/
var Dep = /** @class */ (function () {
    function Dep() {
        this._map = new __WEBPACK_IMPORTED_MODULE_0__utils_Dictionary__["a" /* default */]();
    }
    /**
     * 添加数据变更订阅者
     * @param watcher 数据变更订阅者
     */
    Dep.prototype.watch = function (watcher) {
        this._map.set(watcher, watcher);
    };
    /**
     * 数据变更，通知所有订阅者
     * @param extra 可能的额外数据
     */
    Dep.prototype.notify = function (extra) {
        this._map.forEach(function (watcher) {
            watcher.update(extra);
        });
    };
    return Dep;
}());
/* harmony default export */ __webpack_exports__["a"] = (Dep);


/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Watcher__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_ObjectUtil__ = __webpack_require__(2);


/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-11-06
 * @modify date 2017-11-06
 *
 * 一个绑定
*/
var Bind = /** @class */ (function () {
    function Bind(mediator) {
        this._watcherDict = {};
        this._mediator = mediator;
    }
    Object.defineProperty(Bind.prototype, "mediator", {
        /**
         * 获取已绑定的中介者实例
         *
         * @readonly
         * @type {IMediator}
         * @memberof Bind
         */
        get: function () {
            return this._mediator;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 创建一个观察者，在数值变更时会通知回调进行更新
     *
     * @param {*} target 作用目标，指表达式所在的显示对象
     * @param {string} exp 表达式
     * @param {WatcherCallback} callback 订阅器回调
     * @param {...any[]} scopes 作用域列表，首个作用域会被当做this指向
     * @returns {IWatcher} 返回观察者本身
     * @memberof Bind
     */
    Bind.prototype.createWatcher = function (target, exp, callback) {
        var scopes = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            scopes[_i - 3] = arguments[_i];
        }
        var key = __WEBPACK_IMPORTED_MODULE_1__utils_ObjectUtil__["e" /* getObjectHashs */].apply(void 0, [target, exp].concat(scopes));
        var watcher = this._watcherDict[key];
        if (!watcher)
            this._watcherDict[key] = watcher = new (__WEBPACK_IMPORTED_MODULE_0__Watcher__["a" /* default */].bind.apply(__WEBPACK_IMPORTED_MODULE_0__Watcher__["a" /* default */], [void 0, this, target, exp, callback].concat(scopes)))();
        return watcher;
    };
    return Bind;
}());
/* harmony default export */ __webpack_exports__["a"] = (Bind);


/***/ }),
/* 49 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-11
 * @modify date 2017-09-11
 *
 * 通讯相关的消息
*/
var NetMessage = /** @class */ (function () {
    function NetMessage() {
    }
    /**
     * 发送网络请求消息
     *
     * @static
     * @type {string}
     * @memberof NetMessage
     */
    NetMessage.NET_REQUEST = "netRequest";
    /**
     * 接受网络返回消息
     *
     * @static
     * @type {string}
     * @memberof NetMessage
     */
    NetMessage.NET_RESPONSE = "netResponse";
    /**
     * 网络请求错误消息
     *
     * @static
     * @type {string}
     * @memberof NetMessage
     */
    NetMessage.NET_ERROR = "netError";
    return NetMessage;
}());
/* harmony default export */ __webpack_exports__["a"] = (NetMessage);


/***/ }),
/* 50 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export NonePanelPolicy */
/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-06
 * @modify date 2017-09-06
 *
 * 无任何动画的弹出策略，可应用于任何显示层实现
*/
var NonePanelPolicy = /** @class */ (function () {
    function NonePanelPolicy() {
    }
    NonePanelPolicy.prototype.pop = function (panel, callback, from) {
        setTimeout(callback, 0);
    };
    NonePanelPolicy.prototype.drop = function (panel, callback, from) {
        setTimeout(callback, 0);
    };
    return NonePanelPolicy;
}());

/** 默认导出实例 */
/* harmony default export */ __webpack_exports__["a"] = (new NonePanelPolicy());


/***/ }),
/* 51 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-06
 * @modify date 2017-09-06
 *
 * 弹窗相关的消息
*/
var PanelMessage = /** @class */ (function () {
    function PanelMessage() {
    }
    /**
     * 打开弹窗前的消息
     *
     * @static
     * @type {string}
     * @memberof PanelMessage
     */
    PanelMessage.PANEL_BEFORE_POP = "panelBeforePop";
    /**
     * 打开弹窗后的消息
     *
     * @static
     * @type {string}
     * @memberof PanelMessage
     */
    PanelMessage.PANEL_AFTER_POP = "panelAfterPop";
    /**
     * 关闭弹窗前的消息
     *
     * @static
     * @type {string}
     * @memberof PanelMessage
     */
    PanelMessage.PANEL_BEFORE_DROP = "panelBeforeDrop";
    /**
     * 关闭弹窗后的消息
     *
     * @static
     * @type {string}
     * @memberof PanelMessage
     */
    PanelMessage.PANEL_AFTER_DROP = "panelAfterDrop";
    return PanelMessage;
}());
/* harmony default export */ __webpack_exports__["a"] = (PanelMessage);


/***/ }),
/* 52 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ButtonType; });
/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-21
 * @modify date 2017-09-21
 *
 * 通用弹窗的各种接口
*/
var ButtonType;
(function (ButtonType) {
    ButtonType[ButtonType["normal"] = 0] = "normal";
    ButtonType[ButtonType["important"] = 1] = "important";
})(ButtonType || (ButtonType = {}));


/***/ }),
/* 53 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AudioMessage__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__env_Environment__ = __webpack_require__(5);



/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-10-30
 * @modify date 2017-10-30
 *
 * 使用Audio标签实现IAudio接口的实现类
*/
var AudioTagImpl = /** @class */ (function () {
    function AudioTagImpl() {
        this._audioCache = {};
    }
    /**
     * 加载音频
     *
     * @param {string} url 音频地址
     * @memberof AudioTagImpl
     */
    AudioTagImpl.prototype.load = function (url) {
        var _this = this;
        var toUrl = __WEBPACK_IMPORTED_MODULE_2__env_Environment__["environment"].toCDNHostURL(url);
        // 尝试获取缓存数据
        var data = this._audioCache[toUrl];
        // 如果没有缓存才去加载
        if (!data) {
            // 使用Audio标签加载
            var node = document.createElement("audio");
            node.src = toUrl;
            // 保存数据
            this._audioCache[toUrl] = data = { node: node, status: AudioStatus.LOADING, playParams: null };
            // 监听加载
            node.onloadeddata = function () {
                // 记录加载完毕
                data.status = AudioStatus.PAUSED;
                // 如果自动播放则播放
                if (data.playParams)
                    _this.play(data.playParams);
            };
            node.onended = function () {
                // 派发播放完毕事件
                __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].dispatch(__WEBPACK_IMPORTED_MODULE_1__AudioMessage__["a" /* default */].AUDIO_PLAY_ENDED, url);
            };
        }
    };
    /**
     * 播放音频，如果音频没有加载则先加载再播放
     *
     * @param {AudioPlayParams} params 音频播放参数
     * @returns {void}
     * @memberof AudioTagImpl
     */
    AudioTagImpl.prototype.play = function (params) {
        var toUrl = __WEBPACK_IMPORTED_MODULE_2__env_Environment__["environment"].toCDNHostURL(params.url);
        // 尝试获取缓存数据
        var data = this._audioCache[toUrl];
        if (!data) {
            // 没有加载过，开始加载音频
            this.load(params.url);
            // 设置播放参数
            this._audioCache[toUrl].playParams = params;
        }
        else {
            switch (data.status) {
                case AudioStatus.LOADING:
                    // 正在加载中，替换自动播放参数
                    data.playParams = params;
                    break;
                case AudioStatus.PLAYING:
                    // 正在播放，关闭后再播放
                    this.stop(params.url);
                    this.play(params);
                    break;
                case AudioStatus.PAUSED:
                    // 已经加载完毕，暂停中，直接播放
                    if (params.stopOthers)
                        this.stopAll();
                    if (params.loop != null)
                        data.node.loop = params.loop;
                    if (params.time != null)
                        data.node.currentTime = params.time * 0.001;
                    // 监听播放进度
                    data.node.ontimeupdate = function (evt) {
                        // 只有播放状态可以派发PROGRESS事件
                        if (data.status == AudioStatus.PLAYING) {
                            // 我们规定使用毫秒值作为单位
                            var curTime = data.node.currentTime * 1000;
                            var totalTime = data.node.duration * 1000;
                            // 派发播放进度事件
                            __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].dispatch(__WEBPACK_IMPORTED_MODULE_1__AudioMessage__["a" /* default */].AUDIO_PLAY_PROGRESS, curTime, totalTime);
                        }
                    };
                    // 开始播放
                    data.node.play();
                    // 设置状态
                    data.status = AudioStatus.PLAYING;
                    // 派发播放开始事件
                    __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].dispatch(__WEBPACK_IMPORTED_MODULE_1__AudioMessage__["a" /* default */].AUDIO_PLAY_STARTED, params.url);
                    break;
            }
        }
    };
    AudioTagImpl.prototype._doStop = function (url, time) {
        var toUrl = __WEBPACK_IMPORTED_MODULE_2__env_Environment__["environment"].toCDNHostURL(url);
        var data = this._audioCache[toUrl];
        if (data) {
            data.node.autoplay = false;
            data.node.pause();
            // 设置停止时间
            if (time != null)
                data.node.currentTime = time * 0.001;
            // 设置状态
            data.status = AudioStatus.PAUSED;
            // 派发播放停止事件
            __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].dispatch(__WEBPACK_IMPORTED_MODULE_1__AudioMessage__["a" /* default */].AUDIO_PLAY_STOPPED, url);
        }
    };
    /**
     * 暂停音频（不会重置进度）
     *
     * @param {string} url 音频URL
     * @memberof AudioTagImpl
     */
    AudioTagImpl.prototype.pause = function (url) {
        this._doStop(url);
    };
    /**
     * 停止音频（会重置进度）
     *
     * @param {string} url 音频URL
     * @memberof AudioTagImpl
     */
    AudioTagImpl.prototype.stop = function (url) {
        this._doStop(url, 0);
    };
    /**
     * 停止所有音频
     *
     * @memberof AudioTagImpl
     */
    AudioTagImpl.prototype.stopAll = function () {
        for (var url in this._audioCache) {
            this.stop(url);
        }
    };
    /**
     * 跳转音频进度
     *
     * @param {string} url 音频URL
     * @param {number} time 要跳转到的音频位置，毫秒值
     * @memberof AudioTagImpl
     */
    AudioTagImpl.prototype.seek = function (url, time) {
        var data = this._audioCache[url];
        if (data)
            data.node.currentTime = time * 0.001;
    };
    return AudioTagImpl;
}());
/* harmony default export */ __webpack_exports__["a"] = (AudioTagImpl);
var AudioStatus;
(function (AudioStatus) {
    /**
     * 加载中
     */
    AudioStatus[AudioStatus["LOADING"] = 0] = "LOADING";
    /**
     * 已暂停
     */
    AudioStatus[AudioStatus["PAUSED"] = 1] = "PAUSED";
    /**
     * 播放中
     */
    AudioStatus[AudioStatus["PLAYING"] = 2] = "PLAYING";
})(AudioStatus || (AudioStatus = {}));


/***/ }),
/* 54 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__assets_AssetsManager__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AudioMessage__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__env_Environment__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__system_System__ = __webpack_require__(55);





/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-10-30
 * @modify date 2017-10-30
 *
 * 使用AudioContext实现IAudio接口的实现类
*/
var AudioContextImpl = /** @class */ (function () {
    function AudioContextImpl() {
        var _this = this;
        this._inited = false;
        this._audioCache = {};
        this._context = new (window["AudioContext"] || window["webkitAudioContext"])();
        var onInit = function () {
            window.removeEventListener("touchstart", onInit);
            window.removeEventListener("mousedown", onInit);
            // 生成一个空的音频，播放并停止，用以解除限制
            var source = _this._context.createBufferSource();
            source.buffer = _this._context.createBuffer(1, 1, 44100);
            source.connect(_this._context.destination);
            source.start();
            source.stop();
            // 设置标识符
            _this._inited = true;
            // 如果当前有正在播放的音频，全部再播放一次
            for (var url in _this._audioCache) {
                var data = _this._audioCache[url];
                if (data.status == AudioStatus.PLAYING) {
                    // 停止播放
                    _this.stop(data.playParams.url);
                    // 重新播放
                    _this.play(data.playParams);
                }
            }
        };
        window.addEventListener("touchstart", onInit);
        window.addEventListener("mousedown", onInit);
    }
    /**
     * 加载音频
     *
     * @param {string} url 音频地址
     * @memberof AudioContextImpl
     */
    AudioContextImpl.prototype.load = function (url) {
        var _this = this;
        var toUrl = __WEBPACK_IMPORTED_MODULE_3__env_Environment__["environment"].toCDNHostURL(url);
        // 尝试获取缓存数据
        var data = this._audioCache[toUrl];
        // 如果没有缓存才去加载
        if (!data) {
            // 使用AudioContext加载
            this._audioCache[toUrl] = data = { buffer: null, status: AudioStatus.LOADING, playParams: null, progress: null };
            // 开始加载
            __WEBPACK_IMPORTED_MODULE_0__assets_AssetsManager__["a" /* assetsManager */].loadAssets(toUrl, function (result) {
                if (result instanceof ArrayBuffer) {
                    _this._context.decodeAudioData(result, function (buffer) {
                        data.buffer = buffer;
                        // 设置状态
                        data.status = AudioStatus.PAUSED;
                        // 如果自动播放则播放
                        if (data.playParams)
                            _this.play(data.playParams);
                    });
                }
            }, "arraybuffer");
        }
    };
    /**
     * 播放音频，如果音频没有加载则先加载再播放
     *
     * @param {AudioPlayParams} params 音频播放参数
     * @returns {void}
     * @memberof AudioContextImpl
     */
    AudioContextImpl.prototype.play = function (params) {
        var _this = this;
        var toUrl = __WEBPACK_IMPORTED_MODULE_3__env_Environment__["environment"].toCDNHostURL(params.url);
        // 尝试获取缓存数据
        var data = this._audioCache[toUrl];
        if (!data) {
            // 没有加载过，开始加载音频
            this.load(params.url);
            // 设置播放参数
            this._audioCache[toUrl].playParams = params;
        }
        else {
            switch (data.status) {
                case AudioStatus.LOADING:
                    // 正在加载中，替换自动播放参数
                    data.playParams = params;
                    break;
                case AudioStatus.PLAYING:
                    // 正在播放，关闭后再播放
                    this.stop(params.url);
                    this.play(params);
                    break;
                case AudioStatus.PAUSED:
                    // 设置状态
                    data.status = AudioStatus.PLAYING;
                    // 已经加载完毕，直接播放
                    if (this._inited) {
                        data.node = this._context.createBufferSource();
                        data.node.buffer = data.buffer;
                        if (params.loop != null)
                            data.node.loop = params.loop;
                        data.node.connect(this._context.destination);
                        // 监听播放完毕
                        data.node.onended = function () {
                            var data = _this._audioCache[toUrl];
                            if (data) {
                                // 停止播放
                                _this.stop(params.url);
                                // 派发播放完毕事件
                                __WEBPACK_IMPORTED_MODULE_1__core_Core__["a" /* core */].dispatch(__WEBPACK_IMPORTED_MODULE_2__AudioMessage__["a" /* default */].AUDIO_PLAY_ENDED, params.url);
                            }
                        };
                        // 开始播放，优先取参数中的时间，没有就取默认开始时间
                        var playTime;
                        if (params && params.time != null)
                            playTime = params.time * 0.001;
                        else
                            playTime = data.playTime;
                        delete data.playTime;
                        data.node.start(playTime);
                        // 开始播放进度监测
                        var lastTime = this._context.currentTime;
                        var curTime = playTime || 0;
                        data.progress = __WEBPACK_IMPORTED_MODULE_4__system_System__["a" /* system */].enterFrame(function () {
                            var nowTime = _this._context.currentTime;
                            var deltaTime = nowTime - lastTime;
                            lastTime = nowTime;
                            if (data.status == AudioStatus.PLAYING) {
                                curTime += deltaTime * 1000;
                                var totalTime = data.node.buffer.duration * 1000;
                                __WEBPACK_IMPORTED_MODULE_1__core_Core__["a" /* core */].dispatch(__WEBPACK_IMPORTED_MODULE_2__AudioMessage__["a" /* default */].AUDIO_PLAY_PROGRESS, curTime, totalTime);
                            }
                        });
                        // 派发播放开始事件
                        __WEBPACK_IMPORTED_MODULE_1__core_Core__["a" /* core */].dispatch(__WEBPACK_IMPORTED_MODULE_2__AudioMessage__["a" /* default */].AUDIO_PLAY_STARTED, params.url);
                    }
                    break;
            }
        }
    };
    AudioContextImpl.prototype._doStop = function (url, time) {
        var toUrl = __WEBPACK_IMPORTED_MODULE_3__env_Environment__["environment"].toCDNHostURL(url);
        var data = this._audioCache[toUrl];
        if (data) {
            // 设置状态
            data.status = AudioStatus.PAUSED;
            // 取消进度监测
            if (data.progress)
                data.progress.cancel();
            // 结束播放
            if (data.node) {
                data.node.stop(time);
                // 派发播放停止事件
                __WEBPACK_IMPORTED_MODULE_1__core_Core__["a" /* core */].dispatch(__WEBPACK_IMPORTED_MODULE_2__AudioMessage__["a" /* default */].AUDIO_PLAY_STOPPED, url);
            }
        }
    };
    /**
     * 暂停音频（不会重置进度）
     *
     * @param {string} url 音频URL
     * @memberof AudioContextImpl
     */
    AudioContextImpl.prototype.pause = function (url) {
        this._doStop(url);
    };
    /**
     * 停止音频（会重置进度）
     *
     * @param {string} url 音频URL
     * @memberof AudioContextImpl
     */
    AudioContextImpl.prototype.stop = function (url) {
        this._doStop(url, 0);
    };
    /**
     * 停止所有音频
     *
     * @memberof AudioContextImpl
     */
    AudioContextImpl.prototype.stopAll = function () {
        for (var url in this._audioCache) {
            this.stop(url);
        }
    };
    /**
     * 跳转音频进度
     *
     * @param {string} url 音频URL
     * @param {number} time 要跳转到的音频位置，毫秒值
     * @memberof AudioContextImpl
     */
    AudioContextImpl.prototype.seek = function (url, time) {
        var toUrl = __WEBPACK_IMPORTED_MODULE_3__env_Environment__["environment"].toCDNHostURL(url);
        var data = this._audioCache[toUrl];
        if (data) {
            var params = data.playParams;
            if (data.status == AudioStatus.PLAYING) {
                // 停止重新播放
                this.stop(url);
                params.time = time;
                this.play(params);
            }
            else {
                data.playTime = time;
            }
        }
    };
    return AudioContextImpl;
}());
/* harmony default export */ __webpack_exports__["a"] = (AudioContextImpl);
var AudioStatus;
(function (AudioStatus) {
    /**
     * 加载中
     */
    AudioStatus[AudioStatus["LOADING"] = 0] = "LOADING";
    /**
     * 已暂停
     */
    AudioStatus[AudioStatus["PAUSED"] = 1] = "PAUSED";
    /**
     * 播放中
     */
    AudioStatus[AudioStatus["PLAYING"] = 2] = "PLAYING";
})(AudioStatus || (AudioStatus = {}));


/***/ }),
/* 55 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return system; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_injector_Injector__ = __webpack_require__(1);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-06
 * @modify date 2017-09-06
 *
 * 用来记录程序运行时间，并且提供延迟回调或频率回调功能
*/
var System = /** @class */ (function () {
    function System() {
        // 这里尝试一下TS的Tuple类型——Raykid
        this._nextFrameList = [];
        this._timer = 0;
        var self = this;
        if (requestAnimationFrame instanceof Function) {
            requestAnimationFrame(onRequestAnimationFrame);
        }
        else {
            // 如果不支持requestAnimationFrame则改用setTimeout计时，延迟时间1000/60毫秒
            var startTime = Date.now();
            setInterval(function () {
                var curTime = Date.now();
                // 赋值timer
                self._timer = curTime - startTime;
                // 调用tick方法
                self.tick();
            }, 1000 / 60);
        }
        function onRequestAnimationFrame(timer) {
            // 赋值timer，这个方法里无法获取this，因此需要通过注入的静态属性取到自身实例
            self._timer = timer;
            // 调用tick方法
            self.tick();
            // 计划下一次执行
            requestAnimationFrame(onRequestAnimationFrame);
        }
    }
    /**
     * 获取从程序运行到当前所经过的毫秒数
     *
     * @returns {number} 毫秒数
     * @memberof System
     */
    System.prototype.getTimer = function () {
        return this._timer;
    };
    System.prototype.tick = function () {
        // 调用下一帧回调
        for (var i = 0, len = this._nextFrameList.length; i < len; i++) {
            var data = this._nextFrameList.shift();
            data[0].apply(data[1], data[2]);
        }
    };
    /**
     * 在下一帧执行某个方法
     *
     * @param {Function} handler 希望在下一帧执行的某个方法
     * @param {*} [thisArg] this指向
     * @param {...any[]} args 方法参数列表
     * @returns {ICancelable} 可取消的句柄
     * @memberof System
     */
    System.prototype.nextFrame = function (handler, thisArg) {
        var _this = this;
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var data = [handler, thisArg, args];
        this._nextFrameList.push(data);
        return {
            cancel: function () {
                var index = _this._nextFrameList.indexOf(data);
                if (index >= 0)
                    _this._nextFrameList.splice(index, 1);
            }
        };
    };
    /**
     * 每帧执行某个方法，直到取消位置
     *
     * @param {Function} handler 每帧执行的某个方法
     * @param {*} [thisArg] this指向
     * @param {...any[]} args 方法参数列表
     * @returns {ICancelable} 可取消的句柄
     * @memberof System
     */
    System.prototype.enterFrame = function (handler, thisArg) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var self = this;
        var cancelable = this.nextFrame.apply(this, [wrapHandler, thisArg].concat(args));
        return {
            cancel: function () {
                cancelable.cancel();
            }
        };
        function wrapHandler() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            // 调用回调
            handler.apply(this, args);
            // 执行下一帧
            cancelable = self.nextFrame.apply(self, [wrapHandler, this].concat(args));
        }
    };
    /**
     * 设置延迟回调
     *
     * @param {number} duration 延迟毫秒值
     * @param {Function} handler 回调函数
     * @param {*} [thisArg] this指向
     * @param {...any[]} args 要传递的参数
     * @returns {ICancelable} 可取消的句柄
     * @memberof System
     */
    System.prototype.setTimeout = function (duration, handler, thisArg) {
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            args[_i - 3] = arguments[_i];
        }
        var startTimer = this._timer;
        // 启动计时器
        var nextFrame = this.nextFrame(tick, this);
        function tick() {
            var delta = this._timer - startTimer;
            if (delta >= duration) {
                nextFrame = null;
                handler.apply(thisArg, args);
            }
            else {
                nextFrame = this.nextFrame(tick, this);
            }
        }
        return {
            cancel: function () {
                nextFrame && nextFrame.cancel();
                nextFrame = null;
            }
        };
    };
    /**
     * 设置延时间隔
     *
     * @param {number} duration 延迟毫秒值
     * @param {Function} handler 回调函数
     * @param {*} [thisArg] this指向
     * @param {...any[]} args 要传递的参数
     * @returns {ICancelable} 可取消的句柄
     * @memberof System
     */
    System.prototype.setInterval = function (duration, handler, thisArg) {
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            args[_i - 3] = arguments[_i];
        }
        var timeout = this.setTimeout(duration, onTimeout, this);
        function onTimeout() {
            // 触发回调
            handler.apply(thisArg, args);
            // 继续下一次
            timeout = this.setTimeout(duration, onTimeout, this);
        }
        return {
            cancel: function () {
                timeout && timeout.cancel();
                timeout = null;
            }
        };
    };
    System = __decorate([
        __WEBPACK_IMPORTED_MODULE_1__core_injector_Injector__["Injectable"],
        __metadata("design:paramtypes", [])
    ], System);
    return System;
}());
/* unused harmony default export */ var _unused_webpack_default_export = (System);
/** 再额外导出一个单例 */
var system = __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].getInject(System);


/***/ }),
/* 56 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return sceneManager; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_injector_Injector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__NoneScenePolicy__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__SceneMessage__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_SyncUtil__ = __webpack_require__(59);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};





/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-08
 * @modify date 2017-09-08
 *
 * 弹窗管理器，包含切换场景、push场景、pop场景功能
*/
var SYNC_NAME = "SceneManager_sync";
var ChangeType;
(function (ChangeType) {
    ChangeType[ChangeType["Switch"] = 0] = "Switch";
    ChangeType[ChangeType["Push"] = 1] = "Push";
    ChangeType[ChangeType["Pop"] = 2] = "Pop";
})(ChangeType || (ChangeType = {}));
var SceneManager = /** @class */ (function () {
    function SceneManager() {
        this._sceneStack = [];
    }
    Object.defineProperty(SceneManager.prototype, "currentScene", {
        /**
         * 获取当前场景
         *
         * @readonly
         * @type {IScene}
         * @memberof SceneManager
         */
        get: function () {
            return this._sceneStack[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SceneManager.prototype, "activeCount", {
        /**
         * 获取活动场景个数
         *
         * @readonly
         * @type {number}
         * @memberof SceneManager
         */
        get: function () {
            return this._sceneStack.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取场景是否已经开启
     *
     * @param {IScene} scene 场景对象
     * @returns {boolean} 是否已经开启
     * @memberof SceneManager
     */
    SceneManager.prototype.isOpened = function (scene) {
        return (this._sceneStack.indexOf(scene) >= 0);
    };
    /**
     * 切换场景，替换当前场景，当前场景会被销毁
     *
     * @param {IScene} scene 要切换到的场景
     * @param {*} [data] 要携带给下一个场景的数据
     * @returns {IScene} 场景本体
     * @memberof SceneManager
     */
    SceneManager.prototype.switch = function (scene, data) {
        var _this = this;
        // 非空判断
        if (scene == null)
            return;
        // 如果切入的是第一个场景，则改用push操作
        if (this.activeCount == 0)
            return this.push(scene, data);
        // 同步执行
        Object(__WEBPACK_IMPORTED_MODULE_4__utils_SyncUtil__["b" /* wait */])(SYNC_NAME, this.doChange, this, this.currentScene, scene, data, scene.policy || scene.bridge.defaultScenePolicy || __WEBPACK_IMPORTED_MODULE_2__NoneScenePolicy__["a" /* default */], ChangeType.Switch, function () {
            var lastScene = _this._sceneStack[0];
            // 数据先行
            _this._sceneStack[0] = scene;
            // 调用接口
            lastScene && lastScene.__close(data);
            scene.__open(data);
        });
        return scene;
    };
    /**
     * 推入场景，当前场景不会销毁，而是进入场景栈保存，以后可以通过popScene重新展现
     *
     * @param {IScene} scene 要推入的场景
     * @param {*} [data] 要携带给下一个场景的数据
     * @returns {IScene} 场景本体
     * @memberof SceneManager
     */
    SceneManager.prototype.push = function (scene, data) {
        var _this = this;
        // 非空判断
        if (scene == null)
            return scene;
        // 同步执行
        Object(__WEBPACK_IMPORTED_MODULE_4__utils_SyncUtil__["b" /* wait */])(SYNC_NAME, this.doChange, this, this.currentScene, scene, data, scene.policy || scene.bridge.defaultScenePolicy || __WEBPACK_IMPORTED_MODULE_2__NoneScenePolicy__["a" /* default */], ChangeType.Push, function () {
            // 数据先行
            _this._sceneStack.unshift(scene);
            // 调用接口
            scene.__open(data);
        });
        return scene;
    };
    /**
     * 弹出场景，当前场景会被销毁，当前位于栈顶的场景会重新显示
     *
     * @param {IScene} scene 要切换出的场景，如果传入的场景不是当前场景则仅移除指定场景，不会进行切换操作
     * @param {*} [data] 要携带给下一个场景的数据
     * @returns {IScene} 场景本体
     * @memberof SceneManager
     */
    SceneManager.prototype.pop = function (scene, data) {
        // 非空判断
        if (scene == null)
            return scene;
        // 同步执行
        Object(__WEBPACK_IMPORTED_MODULE_4__utils_SyncUtil__["b" /* wait */])(SYNC_NAME, this.doPop, this, scene, data);
        return scene;
    };
    SceneManager.prototype.doPop = function (scene, data) {
        var _this = this;
        // 如果没有足够的场景储备则什么都不做
        if (this.activeCount <= 1) {
            console.log("场景栈中的场景数量不足，无法执行pop操作");
            // 完成步骤
            Object(__WEBPACK_IMPORTED_MODULE_4__utils_SyncUtil__["a" /* notify */])(SYNC_NAME);
            return;
        }
        // 验证是否是当前场景，不是则直接移除，不使用Policy
        var to = this._sceneStack[1];
        var policy = scene.policy || scene.bridge.defaultScenePolicy || __WEBPACK_IMPORTED_MODULE_2__NoneScenePolicy__["a" /* default */];
        if (this._sceneStack.indexOf(scene) != 0) {
            to = null;
            policy = __WEBPACK_IMPORTED_MODULE_2__NoneScenePolicy__["a" /* default */];
        }
        // 执行切换
        this.doChange(scene, to, data, policy, ChangeType.Pop, function () {
            // 数据先行
            _this._sceneStack.splice(_this._sceneStack.indexOf(scene), 1);
        }, function () {
            // 调用接口
            scene.__close(data);
        });
    };
    SceneManager.prototype.doChange = function (from, to, data, policy, type, begin, complete) {
        // 如果from和to有一个为null则policy为none
        if (!from || !to)
            policy = __WEBPACK_IMPORTED_MODULE_2__NoneScenePolicy__["a" /* default */];
        // to指定的场景必须要显示
        if (to)
            to.bridge.htmlWrapper.style.display = "";
        // 如果要交替的两个场景不是同一个类型的场景，则切换HTMLWrapper显示，且Policy也采用无切换策略
        if (from && to && to.bridge.type != from.bridge.type) {
            from.bridge.htmlWrapper.style.display = "none";
            policy = __WEBPACK_IMPORTED_MODULE_2__NoneScenePolicy__["a" /* default */];
        }
        // 调用回调
        begin && begin();
        // 获取接口引用
        var prepareFunc;
        var doFunc;
        switch (type) {
            case ChangeType.Switch:
                prepareFunc = policy.prepareSwitch;
                doFunc = policy.switch;
                break;
            case ChangeType.Push:
                prepareFunc = policy.preparePush || policy.prepareSwitch;
                doFunc = policy.push || policy.switch;
                break;
            case ChangeType.Pop:
                prepareFunc = policy.preparePop || policy.prepareSwitch;
                doFunc = policy.pop || policy.switch;
                break;
        }
        // 前置处理
        to && from && from.onBeforeOut(to, data);
        to && to.onBeforeIn(from, data);
        // 派发事件
        to && __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].dispatch(__WEBPACK_IMPORTED_MODULE_3__SceneMessage__["a" /* default */].SCENE_BEFORE_CHANGE, to, from);
        // 调用准备接口
        prepareFunc && prepareFunc.call(policy, from, to);
        // 添加显示
        to && to.bridge.addChild(to.bridge.sceneLayer, to.skin);
        // 调用切换接口
        doFunc.call(policy, from, to, function () {
            // 移除显示
            to && from && from.bridge.removeChild(from.bridge.sceneLayer, from.skin);
            // 调用回调
            complete && complete();
            // 后置处理
            to && from && from.onAfterOut(to, data);
            to && to.onAfterIn(from, data);
            // 派发事件
            to && __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].dispatch(__WEBPACK_IMPORTED_MODULE_3__SceneMessage__["a" /* default */].SCENE_AFTER_CHANGE, to, from);
            // 完成步骤
            Object(__WEBPACK_IMPORTED_MODULE_4__utils_SyncUtil__["a" /* notify */])(SYNC_NAME);
        });
    };
    SceneManager = __decorate([
        __WEBPACK_IMPORTED_MODULE_1__core_injector_Injector__["Injectable"]
    ], SceneManager);
    return SceneManager;
}());
/* unused harmony default export */ var _unused_webpack_default_export = (SceneManager);
/** 再额外导出一个单例 */
var sceneManager = __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].getInject(SceneManager);


/***/ }),
/* 57 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export NoneScenePolicy */
/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-08
 * @modify date 2017-09-08
 *
 * 无任何动画的场景策略，可应用于任何显示层实现
*/
var NoneScenePolicy = /** @class */ (function () {
    function NoneScenePolicy() {
    }
    /**
     * 准备切换场景时调度
     * @param from 切出的场景
     * @param to 切入的场景
     */
    NoneScenePolicy.prototype.prepareSwitch = function (from, to) {
        // 这个策略里啥也不用准备
    };
    /**
     * 切换场景时调度
     * @param from 切出的场景
     * @param to 切入的场景
     * @param callback 切换完毕的回调方法
     */
    NoneScenePolicy.prototype.switch = function (from, to, callback) {
        // 直接延迟到下一帧回调（不能同步回调，否则可能会出问题）
        setTimeout(callback, 0);
    };
    return NoneScenePolicy;
}());

/** 默认导出实例 */
/* harmony default export */ __webpack_exports__["a"] = (new NoneScenePolicy());


/***/ }),
/* 58 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-08
 * @modify date 2017-09-08
 *
 * 场景相关的消息
*/
var SceneMessage = /** @class */ (function () {
    function SceneMessage() {
    }
    /**
     * 切换场景前的消息
     *
     * @static
     * @type {string}
     * @memberof SceneMessage
     */
    SceneMessage.SCENE_BEFORE_CHANGE = "sceneBeforeChange";
    /**
     * 切换场景后的消息
     *
     * @static
     * @type {string}
     * @memberof SceneMessage
     */
    SceneMessage.SCENE_AFTER_CHANGE = "sceneAfterChange";
    return SceneMessage;
}());
/* harmony default export */ __webpack_exports__["a"] = (SceneMessage);


/***/ }),
/* 59 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export isOperating */
/* harmony export (immutable) */ __webpack_exports__["b"] = wait;
/* harmony export (immutable) */ __webpack_exports__["a"] = notify;
/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-08
 * @modify date 2017-09-08
 *
 * 同步工具集，用于对多个
*/
var _cache = {};
/**
 * 判断是否正在进行操作
 *
 * @export
 * @param {string} name 队列名
 * @returns {boolean} 队列是否正在操作
 */
function isOperating(name) {
    var ctx = _cache[name];
    return (ctx != null && ctx.operating);
}
/**
 * 开始同步操作，所有传递了相同name的操作会被以队列方式顺序执行
 *
 * @export
 * @param name 一个队列的名字
 * @param {Function} fn 要执行的方法
 * @param {*} [thisArg] 方法this对象
 * @param {...any[]} [args] 方法参数
 */
function wait(name, fn, thisArg) {
    var args = [];
    for (var _i = 3; _i < arguments.length; _i++) {
        args[_i - 3] = arguments[_i];
    }
    var ctx = _cache[name];
    if (ctx == null) {
        _cache[name] = ctx = { operating: false, datas: [] };
    }
    if (ctx.operating) {
        // 队列正在执行，推入缓存
        ctx.datas.push({ fn: fn, thisArg: thisArg, args: args });
    }
    else {
        // 队列没有在执行，直接执行
        ctx.operating = true;
        fn.apply(thisArg, args);
    }
}
/**
 * 完成一步操作并唤醒后续操作
 *
 * @export
 * @param {string} name 队列名字
 * @returns {void}
 */
function notify(name) {
    var ctx = _cache[name];
    if (ctx == null || ctx.datas.length <= 0) {
        // 队列执行完了，直接结束
        ctx.operating = false;
        return;
    }
    var data = ctx.datas.shift();
    data.fn.apply(data.thisArg, data.args);
}


/***/ }),
/* 60 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["EgretSkin"] = EgretSkin;
/* harmony export (immutable) */ __webpack_exports__["EgretMediatorClass"] = EgretMediatorClass;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_olympus_r_utils_ConstructUtil__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_olympus_r_engine_injector_Injector__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_olympus_r_engine_bridge_BridgeManager__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_SkinUtil__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__EgretBridge__ = __webpack_require__(18);





/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-10-09
 * @modify date 2017-10-09
 *
 * 负责注入的模块
*/
function EgretSkin(skin) {
    return function (cls) {
        // 监听类型实例化，转换皮肤格式
        Object(__WEBPACK_IMPORTED_MODULE_0_olympus_r_utils_ConstructUtil__["b" /* listenConstruct */])(cls, function (mediator) { return Object(__WEBPACK_IMPORTED_MODULE_3__utils_SkinUtil__["a" /* wrapSkin */])(mediator, skin); });
    };
}
function EgretMediatorClass(target) {
    if (target instanceof Function) {
        // 调用MediatorClass方法
        var cls = Object(__WEBPACK_IMPORTED_MODULE_1_olympus_r_engine_injector_Injector__["MediatorClass"])(target);
        // 监听类型实例化，赋值表现层桥
        Object(__WEBPACK_IMPORTED_MODULE_0_olympus_r_utils_ConstructUtil__["b" /* listenConstruct */])(cls, function (mediator) { return mediator.bridge = __WEBPACK_IMPORTED_MODULE_2_olympus_r_engine_bridge_BridgeManager__["a" /* bridgeManager */].getBridge(__WEBPACK_IMPORTED_MODULE_4__EgretBridge__["default"].TYPE); });
        // 返回结果类型
        return cls;
    }
    else {
        return function (cls) {
            // 调用MediatorClass方法
            cls = Object(__WEBPACK_IMPORTED_MODULE_1_olympus_r_engine_injector_Injector__["MediatorClass"])(cls);
            // 监听类型实例化，转换皮肤格式
            Object(__WEBPACK_IMPORTED_MODULE_0_olympus_r_utils_ConstructUtil__["b" /* listenConstruct */])(cls, function (mediator) { return Object(__WEBPACK_IMPORTED_MODULE_3__utils_SkinUtil__["a" /* wrapSkin */])(mediator, target); });
            // 返回结果类型
            return cls;
        };
    }
}


/***/ }),
/* 61 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = wrapSkin;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_olympus_r_engine_scene_SceneMediator__ = __webpack_require__(16);

/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-10-09
 * @modify date 2017-10-09
 *
 * Egret皮肤工具集
*/
function wrapSkin(mediator, skin) {
    var comp = new eui.Component();
    mediator.skin = comp;
    // 篡改mediator的onOpen方法，先于onOpen将皮肤附上去
    var oriFunc = mediator.hasOwnProperty("onOpen") ? mediator.onOpen : null;
    mediator.onOpen = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        comp.skinName = skin;
        // 场景需要拉伸到与stage同宽高
        if (mediator instanceof __WEBPACK_IMPORTED_MODULE_0_olympus_r_engine_scene_SceneMediator__["default"]) {
            // 先设置一次场景尺寸
            onStageResize();
            // 监听舞台尺寸变更事件
            mediator.mapListener(mediator.bridge.stage, egret.Event.RESIZE, onStageResize);
        }
        // 转发ui引用
        for (var _a = 0, _b = comp.skin.skinParts; _a < _b.length; _a++) {
            var name = _b[_a];
            mediator[name] = comp[name];
        }
        // 恢复原始方法
        if (oriFunc)
            mediator.onOpen = oriFunc;
        else
            delete mediator.onOpen;
        // 调用原始方法
        mediator.onOpen.apply(this, args);
    };
    return comp;
    function onStageResize() {
        comp.width = mediator.bridge.stage.stageWidth;
        comp.height = mediator.bridge.stage.stageHeight;
    }
}


/***/ }),
/* 62 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-19
 * @modify date 2017-09-19
 *
 * 渲染模式枚举
*/
var RenderMode;
(function (RenderMode) {
    RenderMode[RenderMode["AUTO"] = 0] = "AUTO";
    RenderMode[RenderMode["CANVAS"] = 1] = "CANVAS";
    RenderMode[RenderMode["WEBGL"] = 2] = "WEBGL";
})(RenderMode || (RenderMode = {}));
/* harmony default export */ __webpack_exports__["a"] = (RenderMode);


/***/ }),
/* 63 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export ResourceVersionController */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_olympus_r_engine_env_Environment__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_olympus_r_engine_panel_PanelManager__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_olympus_r_engine_platform_PlatformManager__ = __webpack_require__(64);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_olympus_r_engine_version_Version__ = __webpack_require__(13);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var ResourceVersionController = /** @class */ (function (_super) {
    __extends(ResourceVersionController, _super);
    function ResourceVersionController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ResourceVersionController.prototype.getVirtualUrl = function (url) {
        // 添加imgDomain
        url = __WEBPACK_IMPORTED_MODULE_0_olympus_r_engine_env_Environment__["environment"].toCDNHostURL(url);
        // 添加版本号，有哈希值就用哈希值加载，没有就用编译版本号加载
        url = __WEBPACK_IMPORTED_MODULE_3_olympus_r_engine_version_Version__["a" /* version */].wrapHashUrl(url);
        // 返回url
        return url;
    };
    return ResourceVersionController;
}(RES.VersionController));

// 这里直接注册一下
RES.registerVersionController(new ResourceVersionController());
var AssetsLoader = /** @class */ (function () {
    function AssetsLoader(handler) {
        this._retryDict = {};
        this._handler = handler;
    }
    AssetsLoader.prototype.loadGroups = function (groups) {
        // 调用回调
        this._handler.start && this._handler.start();
        // 组名如果是空字符串则会导致Egret什么都不干，所以要移除空字符串的组名
        groups = groups && groups.filter(function (group) {
            if (typeof group == "string")
                return (group != "");
            else
                return (group.name != "");
        });
        // 开始加载
        var groupDict = {};
        var pgsDict;
        var len = groups ? groups.length : 0;
        if (len == 0) {
            this._handler.complete && this._handler.complete(groupDict);
        }
        else {
            RES.addEventListener(RES.ResourceEvent.GROUP_PROGRESS, onProgress, this);
            RES.addEventListener(RES.ResourceEvent.GROUP_COMPLETE, onOneComplete, this);
            RES.addEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR, onOneError, this);
            groups = groups.concat();
            pgsDict = {};
            for (var i in groups) {
                var group = groups[i];
                if (typeof group == "string") {
                    pgsDict[group] = 0;
                    RES.loadGroup(group);
                }
                else {
                    pgsDict[group.name] = 0;
                    RES.loadGroup(group.name, group.priority);
                }
            }
        }
        function onProgress(evt) {
            // 填充资源字典
            var itemDict = groupDict[evt.groupName];
            if (!itemDict)
                groupDict[evt.groupName] = itemDict = {};
            itemDict[evt.resItem.name] = evt.resItem;
            // 计算总进度
            pgsDict[evt.groupName] = evt.itemsLoaded / evt.itemsTotal;
            var pgs = 0;
            for (var key in pgsDict) {
                pgs += pgsDict[key];
            }
            pgs /= len;
            // 回调
            this._handler.progress && this._handler.progress(evt.resItem, pgs);
        }
        function onOneComplete(evt) {
            // 调用单一完毕回调
            this._handler.oneComplete && this._handler.oneComplete(groupDict[evt.groupName]);
            // 测试是否全部完毕
            var index = groups.indexOf(evt.groupName);
            if (index >= 0) {
                // 移除加载组名
                groups.splice(index, 1);
                // 判断是否全部完成
                if (groups.length == 0) {
                    // 移除事件监听
                    RES.removeEventListener(RES.ResourceEvent.GROUP_PROGRESS, onProgress, this);
                    RES.removeEventListener(RES.ResourceEvent.GROUP_COMPLETE, onOneComplete, this);
                    RES.removeEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR, onOneError, this);
                    // 调用回调
                    this._handler.complete && this._handler.complete(groupDict);
                }
            }
        }
        function onOneError(evt) {
            var groupName = evt.groupName;
            var retryTimes = this._retryDict[groupName];
            if (retryTimes == null)
                retryTimes = 0;
            if (retryTimes < 3) {
                this._retryDict[groupName] = ++retryTimes;
                // 打印日志
                console.warn("加载失败，重试第" + retryTimes + "次: " + groupName);
                // 没到最大重试次数，将为url添加一个随机时间戳重新加回加载队列
                RES.loadGroup(evt.groupName);
            }
            else {
                // 打印日志
                console.warn("加载失败3次，正在尝试切换CDN...");
                // 尝试切换CDN
                var allDone = __WEBPACK_IMPORTED_MODULE_0_olympus_r_engine_env_Environment__["environment"].nextCDN();
                if (!allDone) {
                    // 重新加载
                    RES.loadGroup(evt.groupName);
                }
                else {
                    // 调用模板方法
                    this._handler.oneError && this._handler.oneError(evt);
                    // 切换CDN失败了，弹出提示，使用户可以手动刷新页面
                    __WEBPACK_IMPORTED_MODULE_1_olympus_r_engine_panel_PanelManager__["a" /* panelManager */].confirm("资源组加载失败[" + groupName + "]，点击确定刷新页面", function () {
                        __WEBPACK_IMPORTED_MODULE_2_olympus_r_engine_platform_PlatformManager__["a" /* platformManager */].reload();
                    });
                }
            }
        }
    };
    return AssetsLoader;
}());
/* harmony default export */ __webpack_exports__["a"] = (AssetsLoader);


/***/ }),
/* 64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return platformManager; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_injector_Injector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__WebPlatform__ = __webpack_require__(65);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-21
 * @modify date 2017-09-21
 *
 * 平台接口管理器，通过桥接模式统一不同平台的不同接口，从而实现对框架其他模块透明化
*/
var PlatformManager = /** @class */ (function () {
    function PlatformManager() {
        /**
         * 平台接口实现对象，默认是普通网页平台，也可以根据需要定制
         *
         * @type {IPlatform}
         * @memberof PlatformManager
         */
        this.platform = new __WEBPACK_IMPORTED_MODULE_2__WebPlatform__["a" /* default */]();
    }
    /**
     * 刷新当前页面
     *
     * @memberof PlatformManager
     */
    PlatformManager.prototype.reload = function () {
        this.platform.reload();
    };
    PlatformManager = __decorate([
        __WEBPACK_IMPORTED_MODULE_1__core_injector_Injector__["Injectable"]
    ], PlatformManager);
    return PlatformManager;
}());
/* unused harmony default export */ var _unused_webpack_default_export = (PlatformManager);
/** 再额外导出一个单例 */
var platformManager = __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].getInject(PlatformManager);


/***/ }),
/* 65 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-21
 * @modify date 2017-09-21
 *
 * 网页平台接口实现类，也是平台接口的默认类
*/
var WebPlatform = /** @class */ (function () {
    function WebPlatform() {
    }
    WebPlatform.prototype.reload = function () {
        window.location.reload(true);
    };
    return WebPlatform;
}());
/* harmony default export */ __webpack_exports__["a"] = (WebPlatform);


/***/ }),
/* 66 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_TweenUtil__ = __webpack_require__(67);

/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-22
 * @modify date 2017-09-22
 *
 * 回弹效果
*/
var BackPanelPolicy = /** @class */ (function () {
    function BackPanelPolicy() {
    }
    /**
     * 显示时调用
     * @param panel 弹出框对象
     * @param callback 完成回调，必须调用
     * @param from 动画起始点
     */
    BackPanelPolicy.prototype.pop = function (panel, callback, from) {
        // 开始动画弹出
        var entity = panel.skin;
        egret.Tween.removeTweens(entity);
        // 恢复体积
        entity.scaleX = 1;
        entity.scaleY = 1;
        var fromX = 0;
        var fromY = 0;
        if (from != null) {
            fromX = from.x;
            fromY = from.y;
        }
        else {
            fromX = entity.stage.stageWidth * 0.5;
            fromY = entity.stage.stageHeight * 0.5;
        }
        // 更新弹出后位置
        entity.x = fromX - entity.width * 0.5;
        entity.y = fromY - entity.height * 0.5;
        // 开始缓动
        Object(__WEBPACK_IMPORTED_MODULE_0__utils_TweenUtil__["a" /* tweenFrom */])(entity, {
            x: fromX,
            y: fromY,
            scaleX: 0,
            scaleY: 0
        }, 300, egret.Ease.backOut).call(callback);
    };
    /**
     * 关闭时调用
     * @param popup 弹出框对象
     * @param callback 完成回调，必须调用
     * @param to 动画完结点
     */
    BackPanelPolicy.prototype.drop = function (panel, callback, to) {
        // 开始动画关闭
        var entity = panel.skin;
        egret.Tween.removeTweens(entity);
        var toX = 0;
        var toY = 0;
        if (to != null) {
            toX = to.x;
            toY = to.y;
        }
        else {
            toX = entity.x + entity.width * 0.5;
            toY = entity.y + entity.height * 0.5;
        }
        Object(__WEBPACK_IMPORTED_MODULE_0__utils_TweenUtil__["b" /* tweenTo */])(entity, {
            x: toX,
            y: toY,
            scaleX: 0,
            scaleY: 0
        }, 300, egret.Ease.backIn).call(function () {
            // 恢复体积
            entity.scaleX = 1;
            entity.scaleY = 1;
            if (callback != null)
                callback();
        });
    };
    return BackPanelPolicy;
}());
/* harmony default export */ __webpack_exports__["a"] = (BackPanelPolicy);


/***/ }),
/* 67 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = tweenTo;
/* harmony export (immutable) */ __webpack_exports__["a"] = tweenFrom;
/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-22
 * @modify date 2017-09-22
 *
 * Egret缓动工具集，用来弥补Egret的Tween的不足
*/
function tweenTo(target, props, duration, ease) {
    return egret.Tween.get(target).to(props, duration, ease);
}
function tweenFrom(target, props, duration, ease) {
    // 对换参数状态
    var toProps = {};
    for (var key in props) {
        toProps[key] = target[key];
        target[key] = props[key];
    }
    // 开始缓动
    return egret.Tween.get(target).to(toProps, duration, ease);
}


/***/ }),
/* 68 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-22
 * @modify date 2017-09-22
 *
 * 淡入淡出场景切换策略
*/
var FadeScenePolicy = /** @class */ (function () {
    function FadeScenePolicy() {
        this._tempSnapshot = new egret.Bitmap();
    }
    /**
     * 准备切换场景时调度
     * @param from 切出的场景
     * @param to 切入的场景
     */
    FadeScenePolicy.prototype.prepareSwitch = function (from, to) {
        if (from != null) {
            var root = from.bridge.root;
            // 截取当前屏幕
            var texture = new egret.RenderTexture();
            texture.drawToTexture(root);
            this._tempSnapshot.texture = texture;
            this._tempSnapshot.alpha = 1;
            root.addChild(this._tempSnapshot);
            // 移除from
            var fromDisplay = from.skin;
            if (fromDisplay.parent != null) {
                fromDisplay.parent.removeChild(fromDisplay);
            }
        }
    };
    /**
     * 切换场景时调度
     * @param from 切出的场景
     * @param to 切入的场景
     * @param callback 切换完毕的回调方法
     */
    FadeScenePolicy.prototype.switch = function (from, to, callback) {
        if (from != null) {
            // 开始淡出
            egret.Tween.removeTweens(this._tempSnapshot);
            egret.Tween.get(this._tempSnapshot).to({
                alpha: 0
            }, 300).call(function () {
                // 移除截屏
                if (this._tempSnapshot.parent != null) {
                    this._tempSnapshot.parent.removeChild(this._tempSnapshot);
                }
                // 回收资源
                if (this._tempSnapshot.texture != null) {
                    this._tempSnapshot.texture.dispose();
                    this._tempSnapshot.texture = null;
                }
                // 调用回调
                callback();
            }, this);
        }
        else {
            // 移除截屏
            if (this._tempSnapshot.parent != null) {
                this._tempSnapshot.parent.removeChild(this._tempSnapshot);
            }
            // 调用回调
            callback();
        }
    };
    return FadeScenePolicy;
}());
/* harmony default export */ __webpack_exports__["a"] = (FadeScenePolicy);


/***/ }),
/* 69 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_olympus_r_engine_bridge_BridgeManager__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_olympus_r_utils_Dictionary__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__EgretBridge__ = __webpack_require__(18);



/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-10-25
 * @modify date 2017-10-25
 *
 * Egret遮罩实现
*/
var MaskEntityImpl = /** @class */ (function () {
    function MaskEntityImpl(params) {
        this._maskAlpha = 0.5;
        this._loadingAlpha = 0.5;
        this._modalPanelAlpha = 0.5;
        this._showingMask = false;
        this._showingLoading = false;
        if (params != null) {
            this._maskAlpha = (params.maskAlpha != null ? params.maskAlpha : 0.5);
            this._loadingAlpha = (params.loadingAlpha != null ? params.loadingAlpha : 0.5);
            this._modalPanelAlpha = (params.modalPanelAlpha != null ? params.modalPanelAlpha : 0.5);
            this._loadingSkinFactory = params.loadingSkinFactory;
        }
        this.maskData = params || {};
        this._mask = new egret.Shape();
        this._mask.touchEnabled = true;
        this._loadingMask = new egret.Shape();
        this._loadingMask.touchEnabled = true;
        this._modalPanelDict = new __WEBPACK_IMPORTED_MODULE_1_olympus_r_utils_Dictionary__["a" /* default */]();
        this._modalPanelList = [];
        this._modalPanelMask = new egret.Shape();
        this._modalPanelMask.touchEnabled = true;
    }
    Object.defineProperty(MaskEntityImpl.prototype, "loadingSkin", {
        get: function () {
            // 初始化皮肤
            if (!this._loadingSkin && this._loadingSkinFactory)
                this._loadingSkin = this._loadingSkinFactory();
            return this._loadingSkin;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 显示遮罩
     */
    MaskEntityImpl.prototype.showMask = function (alpha) {
        if (this._showingMask)
            return;
        this._showingMask = true;
        // 显示
        var bridge = __WEBPACK_IMPORTED_MODULE_0_olympus_r_engine_bridge_BridgeManager__["a" /* bridgeManager */].getBridge(__WEBPACK_IMPORTED_MODULE_2__EgretBridge__["default"].TYPE);
        // 绘制遮罩
        if (alpha == null)
            alpha = this._maskAlpha;
        this._mask.graphics.clear();
        this._mask.graphics.beginFill(0, alpha);
        this._mask.graphics.drawRect(0, 0, bridge.root.stage.stageWidth, bridge.root.stage.stageHeight);
        this._mask.graphics.endFill();
        // 添加显示
        bridge.maskLayer.addChild(this._mask);
    };
    /**
     * 隐藏遮罩
     */
    MaskEntityImpl.prototype.hideMask = function () {
        if (!this._showingMask)
            return;
        this._showingMask = false;
        // 隐藏
        if (this._mask.parent != null)
            this._mask.parent.removeChild(this._mask);
    };
    /**当前是否在显示遮罩*/
    MaskEntityImpl.prototype.isShowingMask = function () {
        return this._showingMask;
    };
    /**
     * 显示加载图
     */
    MaskEntityImpl.prototype.showLoading = function (alpha) {
        if (this._showingLoading)
            return;
        this._showingLoading = true;
        // 显示
        var bridge = __WEBPACK_IMPORTED_MODULE_0_olympus_r_engine_bridge_BridgeManager__["a" /* bridgeManager */].getBridge(__WEBPACK_IMPORTED_MODULE_2__EgretBridge__["default"].TYPE);
        // 绘制遮罩
        if (alpha == null)
            alpha = this._loadingAlpha;
        this._loadingMask.graphics.clear();
        this._loadingMask.graphics.beginFill(0, alpha);
        this._loadingMask.graphics.drawRect(0, 0, bridge.root.stage.stageWidth, bridge.root.stage.stageHeight);
        this._loadingMask.graphics.endFill();
        // 添加显示
        bridge.maskLayer.addChild(this._loadingMask);
        // 添加loading皮肤
        if (this.loadingSkin)
            bridge.maskLayer.addChild(this.loadingSkin);
    };
    /**
     * 隐藏加载图
     */
    MaskEntityImpl.prototype.hideLoading = function () {
        if (!this._showingLoading)
            return;
        this._showingLoading = false;
        // 隐藏
        if (this._loadingMask.parent != null)
            this._loadingMask.parent.removeChild(this._loadingMask);
        if (this.loadingSkin != null && this.loadingSkin.parent != null)
            this.loadingSkin.parent.removeChild(this._loadingSkin);
    };
    /**当前是否在显示loading*/
    MaskEntityImpl.prototype.isShowingLoading = function () {
        return this._showingLoading;
    };
    /** 显示模态窗口遮罩 */
    MaskEntityImpl.prototype.showModalMask = function (panel, alpha) {
        if (this.isShowingModalMask(panel))
            return;
        this._modalPanelDict.set(panel, panel);
        this._modalPanelList.push(panel);
        // 显示
        var bridge = __WEBPACK_IMPORTED_MODULE_0_olympus_r_engine_bridge_BridgeManager__["a" /* bridgeManager */].getBridge(__WEBPACK_IMPORTED_MODULE_2__EgretBridge__["default"].TYPE);
        // 绘制遮罩
        if (alpha == null)
            alpha = this._modalPanelAlpha;
        this._modalPanelMask.graphics.clear();
        this._modalPanelMask.graphics.beginFill(0, alpha);
        this._modalPanelMask.graphics.drawRect(0, 0, bridge.root.stage.stageWidth, bridge.root.stage.stageHeight);
        this._modalPanelMask.graphics.endFill();
        // 添加显示
        var entity = panel.skin;
        var parent = entity.parent;
        if (parent != null) {
            if (this._modalPanelMask.parent) {
                this._modalPanelMask.parent.removeChild(this._modalPanelMask);
            }
            var index = parent.getChildIndex(entity);
            parent.addChildAt(this._modalPanelMask, index);
        }
    };
    /** 隐藏模态窗口遮罩 */
    MaskEntityImpl.prototype.hideModalMask = function (panel) {
        if (!this.isShowingModalMask(panel))
            return;
        this._modalPanelDict.delete(panel);
        this._modalPanelList.splice(this._modalPanelList.indexOf(panel), 1);
        // 判断是否还需要Mask
        if (this._modalPanelList.length <= 0) {
            // 隐藏
            if (this._modalPanelMask.parent != null)
                this._modalPanelMask.parent.removeChild(this._modalPanelMask);
        }
        else {
            // 移动Mask
            var entity = this._modalPanelList[this._modalPanelList.length - 1].skin;
            var parent = entity.parent;
            if (parent != null) {
                if (this._modalPanelMask.parent) {
                    this._modalPanelMask.parent.removeChild(this._modalPanelMask);
                }
                var index = parent.getChildIndex(entity);
                parent.addChildAt(this._modalPanelMask, index);
            }
        }
    };
    /** 当前是否在显示模态窗口遮罩 */
    MaskEntityImpl.prototype.isShowingModalMask = function (panel) {
        return (this._modalPanelDict.get(panel) != null);
    };
    return MaskEntityImpl;
}());
/* harmony default export */ __webpack_exports__["a"] = (MaskEntityImpl);


/***/ }),
/* 70 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = wrapEUIList;
/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-10-17
 * @modify date 2017-10-17
 *
 * UI工具集
*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * 包装EUI的DataGroup组件，使用传入的处理函数处理每个渲染器更新的逻辑
 *
 * @export
 * @param {eui.DataGroup} group 被包装的DataGroup组件
 * @param {(data?:any, renderer?:any)=>void} rendererHandler 渲染器处理函数，每次数据更新时会被调用，处理单个渲染器的渲染逻辑
 * @param {(datas?:eui.ICollection, group?:eui.DataGroup)=>void} [updateHandler] 数据更新处理函数，每次显示更新时会被调用，处理列表显示更新后的渲染逻辑
 */
function wrapEUIList(group, rendererHandler, updateHandler) {
    group.itemRenderer = ItemRenderer.bind(null, group.itemRendererSkinName, rendererHandler);
    if (updateHandler) {
        // 监听group尺寸是否改变
        var enterFrameHandler = function () {
            if (group.contentWidth > 0 || group.contentHeight > 0) {
                // 移除事件监听
                group.removeEventListener(egret.Event.ENTER_FRAME, enterFrameHandler, this);
                // 调用回调
                updateHandler(group.dataProvider, group);
            }
        };
        group.addEventListener(egret.Event.ENTER_FRAME, enterFrameHandler, this);
    }
}
var ItemRenderer = /** @class */ (function (_super) {
    __extends(ItemRenderer, _super);
    function ItemRenderer(skinName, rendererHandler) {
        var _this = _super.call(this) || this;
        _this.skinName = skinName;
        _this._rendererHandler = rendererHandler;
        return _this;
    }
    ItemRenderer.prototype.dataChanged = function () {
        _super.prototype.dataChanged.call(this);
        this._rendererHandler(this.data, this);
    };
    return ItemRenderer;
}(eui.ItemRenderer));


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(35)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, DataType_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @author TemplateGenerator
     * @email initial_r@qq.com
     * @modify date 10/9/2017
     *
     * 测试
    */
    var Test = /** @class */ (function (_super) {
        __extends(Test, _super);
        function Test() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Test.prototype.doParse = function (data) {
            if (data == null)
                return;
            this.test = data.test;
        };
        Test.prototype.pack = function () {
            return {
                test: this.test
            };
        };
        return Test;
    }(DataType_1.default));
    exports.default = Test;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztJQUVBOzs7Ozs7TUFNRTtJQUNGO1FBQWtDLHdCQUFRO1FBQTFDOztRQXNCQSxDQUFDO1FBWmEsc0JBQU8sR0FBakIsVUFBa0IsSUFBUTtZQUV0QixFQUFFLENBQUEsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDO2dCQUFDLE1BQU0sQ0FBQztZQUN4QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDMUIsQ0FBQztRQUVNLG1CQUFJLEdBQVg7WUFFSSxNQUFNLENBQUM7Z0JBQ0gsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2FBQ2xCLENBQUM7UUFDTixDQUFDO1FBQ0wsV0FBQztJQUFELENBQUMsQUF0QkQsQ0FBa0Msa0JBQVEsR0FzQnpDIn0=

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(37), __webpack_require__(27), __webpack_require__(73)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, TestResponse_1, RequestData_1, HTTPRequestPolicy_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @author TemplateGenerator
     * @email initial_r@qq.com
     * @modify date 10/9/2017
     *
     * 测试
    */
    var TestRequest = /** @class */ (function (_super) {
        __extends(TestRequest, _super);
        function TestRequest() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.__policy = HTTPRequestPolicy_1.default;
            return _this;
        }
        Object.defineProperty(TestRequest.prototype, "__params", {
            get: function () {
                return {
                    type: "Test",
                    path: "/test",
                    protocol: "http",
                    response: TestResponse_1.default,
                    data: {
                        test: this.test // string - 测试
                    }
                };
            },
            enumerable: true,
            configurable: true
        });
        ;
        return TestRequest;
    }(RequestData_1.default));
    exports.default = TestRequest;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdFJlcXVlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJUZXN0UmVxdWVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0lBS0E7Ozs7OztNQU1FO0lBQ0Y7UUFBeUMsK0JBQVc7UUFBcEQ7WUFBQSxxRUF1QkM7WUFEVSxjQUFRLEdBQWtCLDJCQUFNLENBQUM7O1FBQzVDLENBQUM7UUFiRyxzQkFBVyxpQ0FBUTtpQkFBbkI7Z0JBRUksTUFBTSxDQUFDO29CQUNILElBQUksRUFBRSxNQUFNO29CQUNyQixJQUFJLEVBQUUsT0FBTztvQkFDSixRQUFRLEVBQUUsTUFBTTtvQkFDaEIsUUFBUSxFQUFFLHNCQUFZO29CQUN0QixJQUFJLEVBQUU7d0JBQ0YsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUEsY0FBYztxQkFDaEM7aUJBQ0osQ0FBQztZQUNOLENBQUM7OztXQUFBO1FBQUEsQ0FBQztRQUVOLGtCQUFDO0lBQUQsQ0FBQyxBQXZCRCxDQUF5QyxxQkFBVyxHQXVCbkQifQ==

/***/ }),
/* 73 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HTTPRequestPolicy", function() { return HTTPRequestPolicy; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_HTTPUtil__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__env_Environment__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__NetManager__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_ObjectUtil__ = __webpack_require__(2);




/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-11
 * @modify date 2017-09-11
 *
 * HTTP请求策略
*/
var HTTPRequestPolicy = /** @class */ (function () {
    function HTTPRequestPolicy() {
    }
    /**
     * 发送请求逻辑
     *
     * @param {RequestData} request 请求数据
     * @memberof HTTPRequestPolicy
     */
    HTTPRequestPolicy.prototype.sendRequest = function (request) {
        // 取到参数
        var params = request.__params;
        // 修改数据
        var httpParams = Object(__WEBPACK_IMPORTED_MODULE_3__utils_ObjectUtil__["b" /* extendObject */])({
            url: __WEBPACK_IMPORTED_MODULE_1__env_Environment__["environment"].toHostURL(params.path, params.hostIndex),
            onResponse: function (result) { return __WEBPACK_IMPORTED_MODULE_2__NetManager__["netManager"].__onResponse(request.__params.response.type, result, request); },
            onError: function (err) { return __WEBPACK_IMPORTED_MODULE_2__NetManager__["netManager"].__onError(err, request); },
            headerDict: {}
        }, params);
        // ajax请求都统一设置withCredentials
        httpParams.headerDict["withCredentials"] = "true";
        // 发送
        Object(__WEBPACK_IMPORTED_MODULE_0__utils_HTTPUtil__["a" /* load */])(httpParams);
    };
    return HTTPRequestPolicy;
}());

/** 再额外导出一个实例 */
/* harmony default export */ __webpack_exports__["default"] = (new HTTPRequestPolicy());


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(1), __webpack_require__(38), __webpack_require__(10)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Injector_1, Hash_1, Injector_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var IFuckModel = /** @class */ (function () {
        function IFuckModel() {
        }
        Object.defineProperty(IFuckModel.prototype, "fuck", {
            get: function () {
                return null;
            },
            enumerable: true,
            configurable: true
        });
        return IFuckModel;
    }());
    exports.IFuckModel = IFuckModel;
    var FuckModel = /** @class */ (function () {
        function FuckModel() {
            this._fuck = "Fuck";
            this.shit = "Shit";
            console.log("Fuck Model Constructed!");
        }
        Object.defineProperty(FuckModel.prototype, "fuck", {
            get: function () {
                return this._fuck;
            },
            set: function (value) {
                this._fuck = value;
            },
            enumerable: true,
            configurable: true
        });
        FuckModel.prototype.fuckYou = function () {
            return "Oye!";
        };
        __decorate([
            Injector_1.Inject,
            __metadata("design:type", Hash_1.default)
        ], FuckModel.prototype, "hash", void 0);
        FuckModel = __decorate([
            Injector_2.ModelClass(1, IFuckModel),
            __metadata("design:paramtypes", [])
        ], FuckModel);
        return FuckModel;
    }());
    exports.default = FuckModel;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRnVja01vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiRnVja01vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztJQUlBO1FBQUE7UUFNQSxDQUFDO1FBSkcsc0JBQVcsNEJBQUk7aUJBQWY7Z0JBRUksTUFBTSxDQUFDLElBQUksQ0FBQztZQUNoQixDQUFDOzs7V0FBQTtRQUNMLGlCQUFDO0lBQUQsQ0FBQyxBQU5ELElBTUM7SUFOWSxnQ0FBVTtJQVN2QjtRQWlCSTtZQVpRLFVBQUssR0FBVSxNQUFNLENBQUM7WUFVdkIsU0FBSSxHQUFVLE1BQU0sQ0FBQztZQUl4QixPQUFPLENBQUMsR0FBRyxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDM0MsQ0FBQztRQWRELHNCQUFXLDJCQUFJO2lCQUFmO2dCQUVJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ3RCLENBQUM7aUJBQ0QsVUFBZ0IsS0FBWTtnQkFFeEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7WUFDdkIsQ0FBQzs7O1dBSkE7UUFhTSwyQkFBTyxHQUFkO1lBRUksTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUNsQixDQUFDO1FBdEJEO1lBREMsaUJBQU07c0NBQ00sY0FBSTsrQ0FBQztRQUhELFNBQVM7WUFEN0IscUJBQVUsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDOztXQUNMLFNBQVMsQ0EwQjdCO1FBQUQsZ0JBQUM7S0FBQSxBQTFCRCxJQTBCQztzQkExQm9CLFNBQVMifQ==

/***/ }),
/* 75 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["DOMMediatorClass"] = DOMMediatorClass;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_olympus_r_utils_ConstructUtil__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_olympus_r_engine_injector_Injector__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_olympus_r_engine_bridge_BridgeManager__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_SkinUtil__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__DOMBridge__ = __webpack_require__(19);





function DOMMediatorClass() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (args[0] instanceof Function) {
        // 调用MediatorClass方法
        var cls = Object(__WEBPACK_IMPORTED_MODULE_1_olympus_r_engine_injector_Injector__["MediatorClass"])(args[0]);
        // 监听类型实例化，赋值表现层桥
        Object(__WEBPACK_IMPORTED_MODULE_0_olympus_r_utils_ConstructUtil__["b" /* listenConstruct */])(cls, function (mediator) { return mediator.bridge = __WEBPACK_IMPORTED_MODULE_2_olympus_r_engine_bridge_BridgeManager__["a" /* bridgeManager */].getBridge(__WEBPACK_IMPORTED_MODULE_4__DOMBridge__["default"].TYPE); });
        // 返回结果类型
        return cls;
    }
    else {
        return function (cls) {
            // 调用MediatorClass方法
            cls = Object(__WEBPACK_IMPORTED_MODULE_1_olympus_r_engine_injector_Injector__["MediatorClass"])(cls);
            // 监听类型实例化，转换皮肤格式
            Object(__WEBPACK_IMPORTED_MODULE_0_olympus_r_utils_ConstructUtil__["b" /* listenConstruct */])(cls, function (mediator) { return Object(__WEBPACK_IMPORTED_MODULE_3__utils_SkinUtil__["b" /* wrapSkin */])(mediator, args); });
            // 返回结果类型
            return cls;
        };
    }
}


/***/ }),
/* 76 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_olympus_r_engine_bridge_BridgeManager__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__DOMBridge__ = __webpack_require__(19);


/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-10-25
 * @modify date 2017-10-25
 *
 * DOM遮罩实现
*/
var MaskEntityImpl = /** @class */ (function () {
    function MaskEntityImpl(params) {
        this._showing = false;
        if (params) {
            if (typeof params.loadingSkin == "string") {
                var temp = document.createElement("div");
                temp.innerHTML = params.loadingSkin;
                params.loadingSkin = temp;
            }
            this.loadingSkin = params.loadingSkin;
        }
        this.maskData = params || {};
    }
    /**
     * 显示遮罩
     */
    MaskEntityImpl.prototype.showMask = function (alpha) {
        // DOM框架不需要遮罩，全部依赖CSS实现
    };
    /**
     * 隐藏遮罩
     */
    MaskEntityImpl.prototype.hideMask = function () {
        // DOM框架不需要遮罩，全部依赖CSS实现
    };
    /**当前是否在显示遮罩*/
    MaskEntityImpl.prototype.isShowingMask = function () {
        // DOM框架不需要遮罩，全部依赖CSS实现
        return false;
    };
    /**
     * 显示加载图
     */
    MaskEntityImpl.prototype.showLoading = function (alpha) {
        if (this.loadingSkin == null || this._showing)
            return;
        this._showing = true;
        // 显示
        var bridge = __WEBPACK_IMPORTED_MODULE_0_olympus_r_engine_bridge_BridgeManager__["a" /* bridgeManager */].getBridge(__WEBPACK_IMPORTED_MODULE_1__DOMBridge__["default"].TYPE);
        bridge.addChild(bridge.maskLayer, this.loadingSkin);
    };
    /**
     * 隐藏加载图
     */
    MaskEntityImpl.prototype.hideLoading = function () {
        if (this.loadingSkin == null || !this._showing)
            return;
        this._showing = false;
        // 隐藏
        var bridge = __WEBPACK_IMPORTED_MODULE_0_olympus_r_engine_bridge_BridgeManager__["a" /* bridgeManager */].getBridge(__WEBPACK_IMPORTED_MODULE_1__DOMBridge__["default"].TYPE);
        bridge.removeChild(bridge.maskLayer, this.loadingSkin);
    };
    /**当前是否在显示loading*/
    MaskEntityImpl.prototype.isShowingLoading = function () {
        return this._showing;
    };
    /** 显示模态窗口遮罩 */
    MaskEntityImpl.prototype.showModalMask = function (panel, alpha) {
        // DOM框架不需要模态窗口遮罩，全部依赖CSS实现
    };
    /** 隐藏模态窗口遮罩 */
    MaskEntityImpl.prototype.hideModalMask = function (panel) {
        // DOM框架不需要模态窗口遮罩，全部依赖CSS实现
    };
    /** 当前是否在显示模态窗口遮罩 */
    MaskEntityImpl.prototype.isShowingModalMask = function (panel) {
        // DOM框架不需要模态窗口遮罩，全部依赖CSS实现
        return false;
    };
    return MaskEntityImpl;
}());
/* harmony default export */ __webpack_exports__["a"] = (MaskEntityImpl);


/***/ }),
/* 77 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__engine_Engine__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_Core__ = __webpack_require__(0);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "core", function() { return __WEBPACK_IMPORTED_MODULE_1__core_Core__["a"]; });


/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-18
 * @modify date 2017-09-18
 *
 * Olympus框架便捷启动与框架外观模块
*/
var Olympus = /** @class */ (function () {
    function Olympus() {
    }
    /**
     * 启动Olympus框架
     *
     * @static
     * @param {IInitParams} params 启动参数
     * @memberof Olympus
     */
    Olympus.startup = function (params) {
        // 初始化引擎模块
        __WEBPACK_IMPORTED_MODULE_0__engine_Engine__["a" /* engine */].initialize(params);
    };
    return Olympus;
}());
/* harmony default export */ __webpack_exports__["default"] = (Olympus);


/***/ }),
/* 78 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return engine; });
/* unused harmony export InitStep */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_Core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_injector_Injector__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__bridge_BridgeManager__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__bridge_BridgeMessage__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__module_ModuleManager__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__assets_AssetsManager__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__env_Environment__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__env_Hash__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__version_Version__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__module_ModuleMessage__ = __webpack_require__(12);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};










/**
 * @author Raykid
 * @email initial_r@qq.com
 * @create date 2017-09-06
 * @modify date 2017-09-06
 *
 * Engine模组是开发框架的引擎部分，包括业务模块系统、应用程序启动和初始化、弹窗和场景管理器等与项目开发相关的逻辑都在这个模组中
 * 这个模组的逻辑都高度集成在子模组中了，因此也只是收集相关子模组
*/
var Engine = /** @class */ (function () {
    function Engine() {
    }
    /**
     * 初始化Engine
     *
     * @param {IInitParams} params 初始化参数
     * @memberof Engine
     */
    Engine.prototype.initialize = function (params) {
        var self = this;
        // 调用进度回调，初始化为0%
        params.onInitProgress && params.onInitProgress(0, InitStep.ReadyToInit);
        // 执行初始化
        if (document.readyState == "loading")
            document.addEventListener("readystatechange", doInitialize);
        else
            doInitialize();
        function doInitialize() {
            // 调用进度回调，开始初始化为10%
            params.onInitProgress && params.onInitProgress(0.1, InitStep.StartInit);
            // 移除事件
            if (this == document)
                document.removeEventListener("readystatechange", doInitialize);
            // 要判断document是否初始化完毕
            self._initParams = params;
            // 加载页
            self._loadElement = (typeof params.loadElement == "string" ? document.querySelector(params.loadElement) : params.loadElement);
            // 监听错误事件
            if (params.onError)
                self.listenError(params.onError);
            // 初始化环境参数
            __WEBPACK_IMPORTED_MODULE_6__env_Environment__["environment"].initialize(params.env, params.hostsDict, params.cdnsDict);
            // 初始化版本号工具
            __WEBPACK_IMPORTED_MODULE_8__version_Version__["a" /* version */].initialize(function () {
                // 调用进度回调，版本号初始化完毕为20%
                params.onInitProgress && params.onInitProgress(0.2, InitStep.VersionInited);
                // 监听Bridge初始化完毕事件，显示第一个模块
                __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].listen(__WEBPACK_IMPORTED_MODULE_3__bridge_BridgeMessage__["a" /* default */].BRIDGE_ALL_INIT, self.onAllBridgesInit, self);
                // 注册并初始化表现层桥实例
                __WEBPACK_IMPORTED_MODULE_2__bridge_BridgeManager__["a" /* bridgeManager */].registerBridge.apply(__WEBPACK_IMPORTED_MODULE_2__bridge_BridgeManager__["a" /* bridgeManager */], params.bridges);
            });
        }
    };
    /**
     * 添加错误监听函数
     *
     * @param {(evt?:ErrorEvent)=>void} handler 错误监听函数
     * @memberof Engine
     */
    Engine.prototype.listenError = function (handler) {
        if (handler)
            window.addEventListener("error", handler);
    };
    Engine.prototype.onAllBridgesInit = function () {
        var _this = this;
        // 调用进度回调，表现层桥初始化完毕为30%
        this._initParams.onInitProgress && this._initParams.onInitProgress(0.3, InitStep.BridgesInited);
        // 注销监听
        __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].unlisten(__WEBPACK_IMPORTED_MODULE_3__bridge_BridgeMessage__["a" /* default */].BRIDGE_ALL_INIT, this.onAllBridgesInit, this);
        // 初始化插件
        if (this._initParams.plugins) {
            for (var _i = 0, _a = this._initParams.plugins; _i < _a.length; _i++) {
                var plugin = _a[_i];
                plugin.initPlugin();
            }
        }
        // 注册短名称
        __WEBPACK_IMPORTED_MODULE_5__assets_AssetsManager__["a" /* assetsManager */].configPath(this._initParams.pathDict);
        // 开始预加载过程
        var preloads = this._initParams.preloads;
        if (preloads) {
            // 去加载
            var curIndex = 0;
            var totalCount = preloads.length;
            __WEBPACK_IMPORTED_MODULE_5__assets_AssetsManager__["a" /* assetsManager */].loadAssets(preloads, this.onPreloadOK.bind(this), null, function (key, value) {
                curIndex++;
                // 调用进度回调，每个预加载文件平分30%-90%的进度
                var progress = 0.3 + 0.6 * curIndex / totalCount;
                // 保留2位小数
                progress = Math.round(progress * 100) * 0.01;
                _this._initParams.onInitProgress && _this._initParams.onInitProgress(progress, InitStep.Preload, key, value);
            });
        }
        else {
            // 没有预加载，直接完成
            this.onPreloadOK();
        }
    };
    Engine.prototype.onPreloadOK = function () {
        // 调用进度回调，打开首个模块为90%
        this._initParams.onInitProgress && this._initParams.onInitProgress(0.9, InitStep.OpenFirstModule);
        // 调用初始化完成回调
        this._initParams.onInited && this._initParams.onInited();
        // 监听首个模块开启
        __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].listen(__WEBPACK_IMPORTED_MODULE_9__module_ModuleMessage__["default"].MODULE_CHANGE, this.onModuleChange, this);
        // 打开首个模块
        __WEBPACK_IMPORTED_MODULE_4__module_ModuleManager__["moduleManager"].open(this._initParams.firstModule);
        // 如果有哈希模块则打开之
        if (__WEBPACK_IMPORTED_MODULE_7__env_Hash__["hash"].moduleName)
            __WEBPACK_IMPORTED_MODULE_4__module_ModuleManager__["moduleManager"].open(__WEBPACK_IMPORTED_MODULE_7__env_Hash__["hash"].moduleName, __WEBPACK_IMPORTED_MODULE_7__env_Hash__["hash"].params, __WEBPACK_IMPORTED_MODULE_7__env_Hash__["hash"].direct);
    };
    Engine.prototype.onModuleChange = function (from) {
        // 调用进度回调，全部过程完毕，100%
        this._initParams.onInitProgress && this._initParams.onInitProgress(1, InitStep.Inited);
        // 注销监听
        __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].unlisten(__WEBPACK_IMPORTED_MODULE_9__module_ModuleMessage__["default"].MODULE_CHANGE, this.onModuleChange, this);
        // 移除loadElement显示
        if (this._loadElement) {
            var parent = this._loadElement.parentElement;
            parent && parent.removeChild(this._loadElement);
        }
    };
    Engine = __decorate([
        __WEBPACK_IMPORTED_MODULE_1__core_injector_Injector__["Injectable"]
    ], Engine);
    return Engine;
}());
/* unused harmony default export */ var _unused_webpack_default_export = (Engine);
/** 再额外导出一个单例 */
var engine = __WEBPACK_IMPORTED_MODULE_0__core_Core__["a" /* core */].getInject(Engine);
var InitStep;
(function (InitStep) {
    /** 框架已准备好初始化 */
    InitStep[InitStep["ReadyToInit"] = 0] = "ReadyToInit";
    /** 开始执行初始化 */
    InitStep[InitStep["StartInit"] = 1] = "StartInit";
    /** 版本号系统初始化完毕 */
    InitStep[InitStep["VersionInited"] = 2] = "VersionInited";
    /** 表现层桥初始化完毕 */
    InitStep[InitStep["BridgesInited"] = 3] = "BridgesInited";
    /** 预加载，可能会触发多次，每次传递两个参数：预加载文件名或路径、预加载文件内容 */
    InitStep[InitStep["Preload"] = 4] = "Preload";
    /** 开始打开首个模块 */
    InitStep[InitStep["OpenFirstModule"] = 5] = "OpenFirstModule";
    /** 首个模块打开完毕，初始化流程完毕 */
    InitStep[InitStep["Inited"] = 6] = "Inited";
})(InitStep || (InitStep = {}));


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNTFkY2ZlZWQ4ZTczNmU5YzYxODEiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2NvcmUvQ29yZS5qcyIsIndlYnBhY2s6Ly8vLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvY29yZS9pbmplY3Rvci9JbmplY3Rvci5qcyIsIndlYnBhY2s6Ly8vLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvdXRpbHMvT2JqZWN0VXRpbC5qcyIsIndlYnBhY2s6Ly8vLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvdXRpbHMvRGljdGlvbmFyeS5qcyIsIndlYnBhY2s6Ly8vLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL2JyaWRnZS9CcmlkZ2VNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9lbmdpbmUvZW52L0Vudmlyb25tZW50LmpzIiwid2VicGFjazovLy8uL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci91dGlscy9Db25zdHJ1Y3RVdGlsLmpzIiwid2VicGFjazovLy8uL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9lbmdpbmUvbmV0L05ldE1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2VuZ2luZS9tb2R1bGUvTW9kdWxlTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL2Fzc2V0cy9Bc3NldHNNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9lbmdpbmUvaW5qZWN0b3IvSW5qZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2VuZ2luZS9tYXNrL01hc2tNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9lbmdpbmUvbW9kdWxlL01vZHVsZU1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2VuZ2luZS92ZXJzaW9uL1ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9ub2RlX21vZHVsZXMvcmVmbGVjdC1tZXRhZGF0YS9SZWZsZWN0LmpzIiwid2VicGFjazovLy8uL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9jb3JlL2dsb2JhbC9QYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL3NjZW5lL1NjZW5lTWVkaWF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL3V0aWxzL1VSTFV0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yLWVncmV0L0VncmV0QnJpZGdlLmpzIiwid2VicGFjazovLy8uL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci1kb20vRE9NQnJpZGdlLmpzIiwid2VicGFjazovLy8uL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9jb3JlL29ic2VydmFibGUvT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvY29yZS9tZXNzYWdlL01lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2NvcmUvbWVzc2FnZS9Db3JlTWVzc2FnZS5qcyIsIndlYnBhY2s6Ly8vLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL21lZGlhdG9yL01lZGlhdG9yLmpzIiwid2VicGFjazovLy8uL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9lbmdpbmUvYmluZC9XYXRjaGVyLmpzIiwid2VicGFjazovLy8uL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9lbmdpbmUvYmluZC9VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL2JpbmQvQmluZE1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2VuZ2luZS9uZXQvUmVxdWVzdERhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2VuZ2luZS9icmlkZ2UvQnJpZGdlTWVzc2FnZS5qcyIsIndlYnBhY2s6Ly8vLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL3BhbmVsL1BhbmVsTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvdXRpbHMvSFRUUFV0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2VuZ2luZS9hdWRpby9BdWRpb01hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2VuZ2luZS9hdWRpby9BdWRpb01lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2VuZ2luZS9tb2R1bGUvTW9kdWxlLmpzIiwid2VicGFjazovLy8uL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9lbmdpbmUvbmV0L1Jlc3BvbnNlRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL25ldC9EYXRhVHlwZS5qcyIsIndlYnBhY2s6Ly8vLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL2luamVjdG9yL0JpbmRVdGlsLmpzIiwid2VicGFjazovLy8uL3Rlc3QvbmV0L3Jlc3BvbnNlL1Rlc3RSZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL2Vudi9IYXNoLmpzIiwid2VicGFjazovLy8uL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci1kb20vZG9tL3V0aWxzL1NraW5VdGlsLmpzIiwid2VicGFjazovLy8uL3Rlc3QvbWFpbi50cyIsIndlYnBhY2s6Ly8vLi90ZXN0L21vZHVsZXMvRmlyc3RNb2R1bGUudHMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2NvcmUvbWVzc2FnZS9Db21tb25NZXNzYWdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi90ZXN0L21vZHVsZXMvU2Vjb25kTW9kdWxlLnRzIiwid2VicGFjazovLy8uL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9lbmdpbmUvYmluZC9NdXRhdG9yLmpzIiwid2VicGFjazovLy8uL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9lbmdpbmUvYmluZC9EZXAuanMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2VuZ2luZS9iaW5kL0JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2VuZ2luZS9uZXQvTmV0TWVzc2FnZS5qcyIsIndlYnBhY2s6Ly8vLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL3BhbmVsL05vbmVQYW5lbFBvbGljeS5qcyIsIndlYnBhY2s6Ly8vLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL3BhbmVsL1BhbmVsTWVzc2FnZS5qcyIsIndlYnBhY2s6Ly8vLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL3BhbmVsL0lQcm9tcHRQYW5lbC5qcyIsIndlYnBhY2s6Ly8vLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL2F1ZGlvL0F1ZGlvVGFnSW1wbC5qcyIsIndlYnBhY2s6Ly8vLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL2F1ZGlvL0F1ZGlvQ29udGV4dEltcGwuanMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2VuZ2luZS9zeXN0ZW0vU3lzdGVtLmpzIiwid2VicGFjazovLy8uL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9lbmdpbmUvc2NlbmUvU2NlbmVNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9lbmdpbmUvc2NlbmUvTm9uZVNjZW5lUG9saWN5LmpzIiwid2VicGFjazovLy8uL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9lbmdpbmUvc2NlbmUvU2NlbmVNZXNzYWdlLmpzIiwid2VicGFjazovLy8uL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci91dGlscy9TeW5jVXRpbC5qcyIsIndlYnBhY2s6Ly8vLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXItZWdyZXQvZWdyZXQvaW5qZWN0b3IvSW5qZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yLWVncmV0L2VncmV0L3V0aWxzL1NraW5VdGlsLmpzIiwid2VicGFjazovLy8uL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci1lZ3JldC9lZ3JldC9SZW5kZXJNb2RlLmpzIiwid2VicGFjazovLy8uL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci1lZ3JldC9lZ3JldC9Bc3NldHNMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2VuZ2luZS9wbGF0Zm9ybS9QbGF0Zm9ybU1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2VuZ2luZS9wbGF0Zm9ybS9XZWJQbGF0Zm9ybS5qcyIsIndlYnBhY2s6Ly8vLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXItZWdyZXQvZWdyZXQvcGFuZWwvQmFja1BhbmVsUG9saWN5LmpzIiwid2VicGFjazovLy8uL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci1lZ3JldC9lZ3JldC91dGlscy9Ud2VlblV0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yLWVncmV0L2VncmV0L3NjZW5lL0ZhZGVTY2VuZVBvbGljeS5qcyIsIndlYnBhY2s6Ly8vLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXItZWdyZXQvZWdyZXQvbWFzay9NYXNrRW50aXR5LmpzIiwid2VicGFjazovLy8uL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci1lZ3JldC9lZ3JldC91dGlscy9VSVV0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9uZXQvdHlwZS9UZXN0LnRzIiwid2VicGFjazovLy8uL3Rlc3QvbmV0L3JlcXVlc3QvVGVzdFJlcXVlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2VuZ2luZS9uZXQvcG9saWNpZXMvSFRUUFJlcXVlc3RQb2xpY3kuanMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9tb2RlbHMvRnVja01vZGVsLnRzIiwid2VicGFjazovLy8uL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci1kb20vZG9tL2luamVjdG9yL0luamVjdG9yLmpzIiwid2VicGFjazovLy8uL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci1kb20vZG9tL21hc2svTWFza0VudGl0eS5qcyIsIndlYnBhY2s6Ly8vLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvT2x5bXB1cy5qcyIsIndlYnBhY2s6Ly8vLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL0VuZ2luZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQStELHdCQUF3QjtBQUN2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLFNBQVM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSwwQkFBMEI7QUFDekMsZUFBZSxFQUFFO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOytEQUNEO0FB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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOzs7Ozs7Ozs7OztBQy9rQkE7QUFBQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ3FCO0FBQ047QUFDUztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixZQUFZO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixZQUFZO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOzs7Ozs7OztBQzdLQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7Ozs7Ozs7Ozs7QUM3QkE7QUFBQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ2U7QUFDTTtBQUNIO0FBQ2xCO0FB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LGdDQUFnQztBQUNoQyx3Q0FBd0M7QUFDeEMsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxRQUFRO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsUUFBUTtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2Qyx1QkFBdUI7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsMEJBQTBCO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbkd1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLElBQUk7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGdCQUFnQjtBQUM1QztBQUNBLDZCQUE2QixHQUFHO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxJQUFJO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7OztBQ3pPQTtBQUFBO0FBQ2U7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNB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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7Ozs7Ozs7Ozs7QUNqbkJEO0FBQUE7QUFDeUI7QUFDRDtBQUN4QjtBQUNrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxzQkFBc0I7QUFDckMsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7Ozs7Ozs7QUN0T0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQztBQUNEOzs7Ozs7OztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7Ozs7Ozs7Ozs7O0FDckJlO0FBQ0U7QUFDSztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG1CQUFtQjtBQUNsQyxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxNQUFNO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsT0FBTztBQUN0QixlQUFlLFNBQVM7QUFDeEIsZUFBZSxFQUFFO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxTQUFTO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGlFQUFpRTtBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsU0FBUztBQUN4QixlQUFlLEVBQUU7QUFDakI7QUFDQTtBQUNBO0FBQ0EscURBQXFELFNBQVM7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsU0FBUztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsdUJBQXVCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsRUFBRTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsU0FBUztBQUN4QixlQUFlLEVBQUU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLHNCQUFzQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsc0JBQXNCO0FBQ3JDLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7Ozs7Ozs7OztBQ2xYeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix1QkFBdUI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLElBQUk7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOzs7Ozs7Ozs7OztBQ3BIQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZ0JBQWdCO0FBQ25DO0FBQ0Esd0RBQXdELEVBQUUsZUFBZTtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSx3QkFBd0I7QUFDckM7QUFDQTtBQUNBLGdDQUFnQyxnQkFBZ0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsSUFBSTtBQUN0QixtQkFBbUIsT0FBTztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLEVBQUU7QUFDYixXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHVCQUF1QjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLHVCQUF1QjtBQUNwQztBQUNBO0FBQ0EsZ0NBQWdDLGdCQUFnQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxFQUFFO0FBQ2IsV0FBVyxTQUFTO0FBQ3BCLGFBQWEsRUFBRTtBQUNmO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix1QkFBdUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7O0FDdkZBO0FBQUE7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNxQjtBQUNOO0FBQ2Y7QUFDQTtBQUNpQztBQUNaO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFVBQVU7QUFDekIsaUJBQWlCLEtBQUs7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsaURBQWlELGdCQUFnQjtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFVBQVU7QUFDekIsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFVBQVU7QUFDekIsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFVBQVU7QUFDekIsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsT0FBTztBQUN0QixlQUFlLFlBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix1QkFBdUI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELG9CQUFvQjtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsU0FBUztBQUMvRDtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsU0FBUztBQUM5RDtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsU0FBUztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxVQUFVO0FBQ3pCLGVBQWUsRUFBRTtBQUNqQixlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxVQUFVO0FBQ3pCLGVBQWUsRUFBRTtBQUNqQixlQUFlLE9BQU87QUFDdEIsZUFBZSxzQkFBc0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsVUFBVTtBQUN6QixlQUFlLEVBQUU7QUFDakIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsaUNBQWlDO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsV0FBVztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFVBQVU7QUFDekIsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsb0JBQW9CO0FBQ25DLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZUFBZSxZQUFZO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qix1QkFBdUI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsVUFBVTtBQUN6QixlQUFlLEVBQUU7QUFDakIsZUFBZSxnQ0FBZ0M7QUFDL0MsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixlQUFlLFlBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFLGdCQUFnQjtBQUM3RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOzs7Ozs7Ozs7QUN0WkE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7Ozs7Ozs7QUNwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOzs7Ozs7Ozs7Ozs7Ozs7O0FDckNBO0FBQUE7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNlO0FBQ007QUFDckI7QUFDQTtBQUNxQjtBQUNHO0FBQ0Y7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxhQUFhO0FBQzVCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxpQ0FBaUMsRUFBRTtBQUM1RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsUUFBUTtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsRUFBRTtBQUNqQixlQUFlLFFBQVE7QUFDdkIsZ0JBQWdCLG9CQUFvQjtBQUNwQyxpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxnQkFBZ0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLEVBQUU7QUFDakIsZ0JBQWdCLG9CQUFvQjtBQUNwQyxpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLHdCQUF3QjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHVCQUF1QjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSx1QkFBdUI7QUFDdEMsZUFBZSxTQUFTO0FBQ3hCLGlCQUFpQixhQUFhO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHVCQUF1QjtBQUN0QyxlQUFlLFNBQVM7QUFDeEIsZUFBZSxTQUFTO0FBQ3hCLGlCQUFpQixhQUFhO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsMkhBQW9FO0FBQ2pGLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7MEVBQ0Q7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUN6U3NCO0FBQytCO0FBQy9CO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxtQkFBbUI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEZBQW9DLGlCQUFpQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7OztBQ2pJQTtBQUFBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDcUI7QUFDTjtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxnQkFBZ0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOzs7Ozs7OztBQ3hLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7Ozs7Ozs7Ozs7Ozs7O0FDN0NlO0FBQ2Y7QUFDQTtBQUN3QjtBQUNDO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGtCQUFrQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxnQkFBZ0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxnQkFBZ0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQjtBQUMvQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsY0FBYztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxNQUFNO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLGdCQUFnQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxnQkFBZ0I7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDZCQUE2QjtBQUM1QyxlQUFlLEVBQUU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDZCQUE2QjtBQUM1QyxlQUFlLEVBQUU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsdUJBQXVCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsU0FBUztBQUN4QixlQUFlLEVBQUU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLFNBQVM7QUFDeEIsZUFBZSxFQUFFO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxzQkFBc0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLHNCQUFzQjtBQUNyQyxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsU0FBUztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7Ozs7Ozs7O0FDclZBO0FBQUE7QUFDQTtBQUNBLFVBQVUsZ0JBQWdCLHNDQUFzQyxpQkFBaUIsRUFBRTtBQUNuRix5QkFBeUIsdURBQXVEO0FBQ2hGO0FBQ0E7QUFDQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7Ozs7Ozs7O0FDbEJBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsSUFBSTtBQUNuQixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDeEJzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUIsV0FBVyxhQUFhO0FBQ3hCLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsdUJBQXVCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyx1QkFBdUI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZUFBZTtBQUMxQixXQUFXLGFBQWE7QUFDeEIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix1QkFBdUI7QUFDM0M7QUFDQTtBQUNBLG1DQUFtQyx1QkFBdUI7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixXQUFXLGVBQWU7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsdUJBQXVCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix1QkFBdUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQsK0JBQStCO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxrQ0FBa0MsRUFBRTtBQUNoRjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsV0FBVyxFQUFFO0FBQ2IsV0FBVyxxREFBcUQ7QUFDaEUsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQSwyQkFBMkIsV0FBVztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQzVLQTtBQUNBO0FBQ0EsVUFBVSxnQkFBZ0Isc0NBQXNDLGlCQUFpQixFQUFFO0FBQ25GLHlCQUF5Qix1REFBdUQ7QUFDaEY7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0Esa0RBQWtELGNBQWM7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFBQTtBQUNELDJDQUEyQywyaEM7Ozs7Ozs7Ozs7QUN2RDNDO0FBQUE7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNlO0FBQ007QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELFNBQVM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FB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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLFNBQVM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyx1QkFBdUI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixlQUFlO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7Ozs7Ozs7OztBQzFMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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O0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7MEVBQ0Q7QUFDQTtBQUNBOzs7Ozs7OztBQzVOQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDTztBQUNSO0FBQ0E7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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7Ozs7Ozs7Ozs7QUM3SUE7QUFBQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ2U7QUFDTTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7Ozs7Ozs7QUMxQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOzs7Ozs7Ozs7QUNoQjZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNEOzs7Ozs7Ozs7QUNqRkE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7Ozs7Ozs7Ozs7O0FDdEV3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOzs7Ozs7Ozs7Ozs7QUNqRmlCO0FBQ0Y7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFlBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMxQkE7QUFBQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ2U7QUFDTTtBQUNHO0FBQ3hCO0FBQ3dCO0FBQ0E7QUFDRjtBQUNQO0FBQ0c7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFlBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsd0JBQXdCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsZ0JBQWdCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0QkFBNEIiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDQwKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCA1MWRjZmVlZDhlNzM2ZTljNjE4MSIsImltcG9ydCBEaWN0aW9uYXJ5IGZyb20gXCIuLi91dGlscy9EaWN0aW9uYXJ5XCI7XHJcbmltcG9ydCBPYnNlcnZhYmxlIGZyb20gXCIuL29ic2VydmFibGUvT2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgXCJyZWZsZWN0LW1ldGFkYXRhXCI7XHJcbmltcG9ydCAqIGFzIFBhdGNoIGZyb20gXCIuL2dsb2JhbC9QYXRjaFwiO1xyXG5QYXRjaDtcclxuLyoqXHJcbiAqIOaguOW/g+S4iuS4i+aWh+Wvueixoe+8jOi0n+i0o+WGheaguOa2iOaBr+a2iOaBr+i9rOWPkeOAgeWvueixoeazqOWFpeetieaguOW/g+WKn+iDveeahOWunueOsFxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBjbGFzcyBDb3JlXHJcbiAqL1xyXG52YXIgQ29yZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENvcmUoKSB7XHJcbiAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqIOS4i+mdouaYr+WGheaguOa2iOaBr+ezu+e7nyAqKioqKioqKioqKioqKioqKioqKioqKi9cclxuICAgICAgICB0aGlzLl9vYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUoKTtcclxuICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKiog5LiL6Z2i5piv5L6d6LWW5rOo5YWl57O757ufICoqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiusOW9leW3sue7j+azqOWFpei/h+eahOWvueixoeWNleS+i1xyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKiBAdHlwZSB7RGljdGlvbmFyeTxGdW5jdGlvbiwgYW55Pn1cclxuICAgICAgICAgKiBAbWVtYmVyb2YgQ29yZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuX2luamVjdERpY3QgPSBuZXcgRGljdGlvbmFyeSgpO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOazqOWFpeWtl+espuS4suexu+Wei+Wtl+WFuO+8jOiusOW9leazqOWFpeWtl+espuS4suWSjOexu+Wei+aehOmAoOWHveaVsOeahOaYoOWwhFxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKiBAdHlwZSB7RGljdGlvbmFyeTxhbnksIElDb25zdHJ1Y3Rvcj59XHJcbiAgICAgICAgICogQG1lbWJlcm9mIENvcmVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl9pbmplY3RTdHJEaWN0ID0gbmV3IERpY3Rpb25hcnkoKTtcclxuICAgICAgICAvLyDov5vooYzljZXkvovliKTmlq1cclxuICAgICAgICBpZiAoQ29yZS5faW5zdGFuY2UpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIuW3sueUn+aIkOi/h0NvcmXlrp7kvovvvIzkuI3lhYHorrjlpJrmrKHnlJ/miJBcIik7XHJcbiAgICAgICAgLy8g6LWL5YC85Y2V5L6LXHJcbiAgICAgICAgQ29yZS5faW5zdGFuY2UgPSB0aGlzO1xyXG4gICAgICAgIC8vIOazqOWFpeiHqui6q1xyXG4gICAgICAgIHRoaXMubWFwSW5qZWN0VmFsdWUodGhpcyk7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29yZS5wcm90b3R5cGUsIFwib2JzZXJ2YWJsZVwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5bCGSU9ic2VydmFibGXmmrTpnLLlh7rmnaVcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEByZWFkb25seVxyXG4gICAgICAgICAqIEB0eXBlIHtJT2JzZXJ2YWJsZX1cclxuICAgICAgICAgKiBAbWVtYmVyb2YgQ29yZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fb2JzZXJ2YWJsZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb3JlLnByb3RvdHlwZSwgXCJwYXJlbnRcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPluWIsOeItue6p0lPYnNlcnZhYmxlXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAdHlwZSB7SU9ic2VydmFibGV9XHJcbiAgICAgICAgICogQG1lbWJlcm9mIENvcmVcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICAvKiogZGlzcGF0Y2jmlrnms5Xlrp7njrAgKi9cclxuICAgIENvcmUucHJvdG90eXBlLmRpc3BhdGNoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBwYXJhbXMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBwYXJhbXNbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fb2JzZXJ2YWJsZS5kaXNwYXRjaC5hcHBseSh0aGlzLl9vYnNlcnZhYmxlLCBwYXJhbXMpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog55uR5ZCs5YaF5qC45raI5oGvXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUg5raI5oGv57G75Z6LXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIOa2iOaBr+WkhOeQhuWHveaVsFxyXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10g5raI5oGvdGhpc+aMh+WQkVxyXG4gICAgICogQG1lbWJlcm9mIENvcmVcclxuICAgICAqL1xyXG4gICAgQ29yZS5wcm90b3R5cGUubGlzdGVuID0gZnVuY3Rpb24gKHR5cGUsIGhhbmRsZXIsIHRoaXNBcmcpIHtcclxuICAgICAgICB0aGlzLl9vYnNlcnZhYmxlLmxpc3Rlbih0eXBlLCBoYW5kbGVyLCB0aGlzQXJnKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOenu+mZpOWGheaguOa2iOaBr+ebkeWQrFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIOa2iOaBr+exu+Wei1xyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciDmtojmga/lpITnkIblh73mlbBcclxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIOa2iOaBr3RoaXPmjIflkJFcclxuICAgICAqIEBtZW1iZXJvZiBDb3JlXHJcbiAgICAgKi9cclxuICAgIENvcmUucHJvdG90eXBlLnVubGlzdGVuID0gZnVuY3Rpb24gKHR5cGUsIGhhbmRsZXIsIHRoaXNBcmcpIHtcclxuICAgICAgICB0aGlzLl9vYnNlcnZhYmxlLnVubGlzdGVuKHR5cGUsIGhhbmRsZXIsIHRoaXNBcmcpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5rOo5YaM5ZG95Luk5Yiw54m55a6a5raI5oGv57G75Z6L5LiK77yM5b2T6L+Z5Liq57G75Z6L55qE5raI5oGv5rS+5Y+R5Yiw5qGG5p625YaF5qC45pe25Lya6Kem5Y+RQ29tbWFuZOi/kOihjFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIOimgeazqOWGjOeahOa2iOaBr+exu+Wei1xyXG4gICAgICogQHBhcmFtIHsoSUNvbW1hbmRDb25zdHJ1Y3Rvcil9IGNtZCDlkb3ku6TlpITnkIblmajvvIzlj6/ku6XmmK/mlrnms5XlvaLlvI/vvIzkuZ/lj6/ku6Xkvb/nsbvlvaLlvI9cclxuICAgICAqIEBtZW1iZXJvZiBDb3JlXHJcbiAgICAgKi9cclxuICAgIENvcmUucHJvdG90eXBlLm1hcENvbW1hbmQgPSBmdW5jdGlvbiAodHlwZSwgY21kKSB7XHJcbiAgICAgICAgdGhpcy5fb2JzZXJ2YWJsZS5tYXBDb21tYW5kKHR5cGUsIGNtZCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDms6jplIDlkb3ku6RcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSDopoHms6jplIDnmoTmtojmga/nsbvlnotcclxuICAgICAqIEBwYXJhbSB7KElDb21tYW5kQ29uc3RydWN0b3IpfSBjbWQg5ZG95Luk5aSE55CG5ZmoXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqIEBtZW1iZXJvZiBDb3JlXHJcbiAgICAgKi9cclxuICAgIENvcmUucHJvdG90eXBlLnVubWFwQ29tbWFuZCA9IGZ1bmN0aW9uICh0eXBlLCBjbWQpIHtcclxuICAgICAgICB0aGlzLl9vYnNlcnZhYmxlLnVubWFwQ29tbWFuZCh0eXBlLCBjbWQpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5re75Yqg5LiA5Liq57G75Z6L5rOo5YWl77yM5Lya56uL5Y2z55Sf5oiQ5LiA5Liq5a6e5L6L5bm25rOo5YWl5Yiw5qGG5p625YaF5qC45LitXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtJQ29uc3RydWN0b3J9IHRhcmdldCDopoHms6jlhaXnmoTnsbvlnovvvIjms6jmhI/kuI3mmK/lrp7kvovvvIlcclxuICAgICAqIEBwYXJhbSB7Kn0gW3R5cGVdIOWmguaenOaPkOS+m+ivpeWPguaVsO+8jOWImeS9v+eUqOivpeexu+Wei+S7o+abv+azqOWFpeexu+Wei+eahGtlee+8jOWQpuWImeS9v+eUqOazqOWFpeexu+Wei+iHqui6q+S9nOS4umtleVxyXG4gICAgICogQG1lbWJlcm9mIENvcmVcclxuICAgICAqL1xyXG4gICAgQ29yZS5wcm90b3R5cGUubWFwSW5qZWN0ID0gZnVuY3Rpb24gKHRhcmdldCwgdHlwZSkge1xyXG4gICAgICAgIC8vIOWmguaenOW3sue7j+azqOWFpei/h+S6hu+8jOWImeS9v+eUqOW3sue7j+azqOWFpeeahOWNleS+i+WGjeasoeazqOWFpVxyXG4gICAgICAgIHZhciBvcmlUYXJnZXQgPSB0YXJnZXRbXCJfX29yaV9jb25zdHJ1Y3Rvcl9fXCJdIHx8IHRhcmdldDtcclxuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9pbmplY3REaWN0LmdldChvcmlUYXJnZXQpIHx8IG5ldyB0YXJnZXQoKTtcclxuICAgICAgICB0aGlzLm1hcEluamVjdFZhbHVlKHZhbHVlLCB0eXBlKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOazqOWFpeS4gOS4quWvueixoeWunuS+i1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUg6KaB5rOo5YWl55qE5a+56LGh5a6e5L6LXHJcbiAgICAgKiBAcGFyYW0geyp9IFt0eXBlXSDlpoLmnpzmj5Dkvpvor6Xlj4LmlbDvvIzliJnkvb/nlKjor6Xnsbvlnovku6Pmm7/ms6jlhaXnsbvlnovnmoRrZXnvvIzlkKbliJnkvb/nlKjms6jlhaXlrp7kvovnmoTmnoTpgKDlh73mlbDkvZzkuLprZXlcclxuICAgICAqIEBtZW1iZXJvZiBDb3JlXHJcbiAgICAgKi9cclxuICAgIENvcmUucHJvdG90eXBlLm1hcEluamVjdFZhbHVlID0gZnVuY3Rpb24gKHZhbHVlLCB0eXBlKSB7XHJcbiAgICAgICAgLy8g5aaC5p6c5piv5a2X56ym5Liy5YiZ6K6w5b2V57G75Z6L5p6E6YCg5Ye95pWw5pig5bCEXHJcbiAgICAgICAgaWYgKCEodHlwZSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB8fCAhdHlwZS5wcm90b3R5cGUpXHJcbiAgICAgICAgICAgIHR5cGUgPSB0aGlzLl9pbmplY3RTdHJEaWN0W3R5cGVdID0gdmFsdWUuY29uc3RydWN0b3I7XHJcbiAgICAgICAgLy8g6K6w5b2V5bey5rOo5YWl55qE5Y2V5L6LXHJcbiAgICAgICAgdGhpcy5faW5qZWN0RGljdC5zZXQodmFsdWUuY29uc3RydWN0b3IsIHZhbHVlKTtcclxuICAgICAgICAvLyDlvIDlp4vms6jlhaVcclxuICAgICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgdmFsdWUsIHR5cGUgfHwgdmFsdWUuY29uc3RydWN0b3IpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog56e76Zmk57G75Z6L5rOo5YWlXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHsqfSB0eXBlIOimgeenu+mZpOazqOWFpeeahOexu+Wei1xyXG4gICAgICogQG1lbWJlcm9mIENvcmVcclxuICAgICAqL1xyXG4gICAgQ29yZS5wcm90b3R5cGUudW5tYXBJbmplY3QgPSBmdW5jdGlvbiAodHlwZSkge1xyXG4gICAgICAgIC8vIOWmguaenOaYr+Wtl+espuS4suWImeiusOW9leexu+Wei+aehOmAoOWHveaVsOaYoOWwhFxyXG4gICAgICAgIGlmICghKHR5cGUgaW5zdGFuY2VvZiBGdW5jdGlvbikgfHwgIXR5cGUucHJvdG90eXBlKVxyXG4gICAgICAgICAgICB0eXBlID0gdGhpcy5faW5qZWN0U3RyRGljdFt0eXBlXTtcclxuICAgICAgICBSZWZsZWN0LmRlbGV0ZU1ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgdHlwZSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bms6jlhaXnmoTlr7nosaHlrp7kvotcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyp9IHR5cGUg5rOo5YWl5a+56LGh55qE57G75Z6LXHJcbiAgICAgKiBAcmV0dXJucyB7Kn0g5rOo5YWl55qE5a+56LGh5a6e5L6LXHJcbiAgICAgKiBAbWVtYmVyb2YgQ29yZVxyXG4gICAgICovXHJcbiAgICBDb3JlLnByb3RvdHlwZS5nZXRJbmplY3QgPSBmdW5jdGlvbiAodHlwZSkge1xyXG4gICAgICAgIGlmICghKHR5cGUgaW5zdGFuY2VvZiBGdW5jdGlvbikgfHwgIXR5cGUucHJvdG90eXBlKVxyXG4gICAgICAgICAgICB0eXBlID0gdGhpcy5faW5qZWN0U3RyRGljdFt0eXBlXTtcclxuICAgICAgICBpZiAodHlwZSkge1xyXG4gICAgICAgICAgICAvLyDpnIDopoHnlKjljp/lp4vnmoTmnoTpgKDlh73mlbDlj5ZcclxuICAgICAgICAgICAgdHlwZSA9IHR5cGVbXCJfX29yaV9jb25zdHJ1Y3Rvcl9fXCJdIHx8IHR5cGU7XHJcbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldE1ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgdHlwZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBDb3JlO1xyXG59KCkpO1xyXG5leHBvcnQgZGVmYXVsdCBDb3JlO1xyXG4vKiog5YaN6aKd5aSW5a+85Ye65LiA5Liq5Y2V5L6LICovXHJcbmV4cG9ydCB2YXIgY29yZSA9IG5ldyBDb3JlKCk7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2NvcmUvQ29yZS5qc1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgeyBjb3JlIH0gZnJvbSBcIi4uL0NvcmVcIjtcclxuaW1wb3J0IHsgZGVjb3JhdGVUaGlzIH0gZnJvbSBcIi4uL2dsb2JhbC9QYXRjaFwiO1xyXG5pbXBvcnQgeyBsaXN0ZW5Db25zdHJ1Y3QgfSBmcm9tIFwiLi4vLi4vdXRpbHMvQ29uc3RydWN0VXRpbFwiO1xyXG5pbXBvcnQgXCJyZWZsZWN0LW1ldGFkYXRhXCI7XHJcbi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0wOS0xOVxyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0wOS0xOVxyXG4gKlxyXG4gKiBDb3Jl5qih57uE55qE6KOF6aWw5Zmo5rOo5YWl5qih5Z2XXHJcbiovXHJcbi8qKiDnlJ/miJDnsbvlnovlrp7kvovlubbms6jlhaXvvIzlj6/ku6Xov5vooYznsbvlnovovazmjaLms6jlhaXvvIjljbPms6jlhaXnsbvlnovlj6/ku6Xlkozms6jlhoznsbvlnovkuI3kuIDoh7TvvIzph4fnlKhASW5qZWN0YWJsZShBbm90aGVyQ2xhc3Mp55qE5b2i5byP5Y2z5Y+v77yJICovXHJcbmV4cG9ydCBmdW5jdGlvbiBJbmplY3RhYmxlKCkge1xyXG4gICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMgPT09IGRlY29yYXRlVGhpcykge1xyXG4gICAgICAgIC8vIOS4jemcgOimgei9rOaNouazqOWGjOexu+Wei++8jOebtOaOpeazqOWGjFxyXG4gICAgICAgIGNvcmUubWFwSW5qZWN0KGFyZ3NbMF0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8g6ZyA6KaB6L2s5o2i5rOo5YaM57G75Z6L77yM6ZyA6KaB6L+U5Zue5LiA5LiqQ2xhc3NEZWNvcmF0b3JcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHJlYWxDbHMpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBhcmdzXzEgPSBhcmdzOyBfaSA8IGFyZ3NfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjbHMgPSBhcmdzXzFbX2ldO1xyXG4gICAgICAgICAgICAgICAgLy8g5rOo5YWl57G75Z6LXHJcbiAgICAgICAgICAgICAgICBjb3JlLm1hcEluamVjdChyZWFsQ2xzLCBjbHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIOmcgOimgei9rOaNoueahOS5n+imgemineWkluWwhuiHqui6q+azqOWFpeS4gOS4qlxyXG4gICAgICAgICAgICBjb3JlLm1hcEluamVjdChyZWFsQ2xzKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbjtcclxuZXhwb3J0IGZ1bmN0aW9uIEluamVjdCh0YXJnZXQsIGtleSkge1xyXG4gICAgaWYgKGtleSkge1xyXG4gICAgICAgIHZhciBjbHMgPSBSZWZsZWN0LmdldE1ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgdGFyZ2V0LCBrZXkpO1xyXG4gICAgICAgIGRvSW5qZWN0KHRhcmdldC5jb25zdHJ1Y3Rvciwga2V5LCBjbHMpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChwcm90b3R5cGUsIHByb3BlcnR5S2V5KSB7XHJcbiAgICAgICAgICAgIGRvSW5qZWN0KHByb3RvdHlwZS5jb25zdHJ1Y3RvciwgcHJvcGVydHlLZXksIHRhcmdldCk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG47XHJcbmZ1bmN0aW9uIGRvSW5qZWN0KGNscywga2V5LCB0eXBlKSB7XHJcbiAgICAvLyDnm5HlkKzlrp7kvovljJZcclxuICAgIHZhciB0YXJnZXQ7XHJcbiAgICBsaXN0ZW5Db25zdHJ1Y3QoY2xzLCBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoaW5zdGFuY2UsIGtleSwge1xyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGFyZ2V0IHx8ICh0YXJnZXQgPSBjb3JlLmdldEluamVjdCh0eXBlKSk7IH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2NvcmUvaW5qZWN0b3IvSW5qZWN0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXHJcbiAqIEBhdXRob3IgUmF5a2lkXHJcbiAqIEBlbWFpbCBpbml0aWFsX3JAcXEuY29tXHJcbiAqIEBjcmVhdGUgZGF0ZSAyMDE3LTA5LTExXHJcbiAqIEBtb2RpZnkgZGF0ZSAyMDE3LTA5LTExXHJcbiAqXHJcbiAqIOWvueixoeW3peWFt+mbhlxyXG4qL1xyXG4vKipcclxuICogcG9wdWxhdGUgcHJvcGVydGllc1xyXG4gKiBAcGFyYW0gdGFyZ2V0ICAgICAgICDnm67moIdvYmpcclxuICogQHBhcmFtIHNvdXJjZXMgICAgICAg5p2l5rqQb2JqXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kT2JqZWN0KHRhcmdldCkge1xyXG4gICAgdmFyIHNvdXJjZXMgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgc291cmNlc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHNvdXJjZXMuZm9yRWFjaChmdW5jdGlvbiAoc291cmNlKSB7XHJcbiAgICAgICAgaWYgKCFzb3VyY2UpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBzb3VyY2UpIHtcclxuICAgICAgICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldFtwcm9wTmFtZV0gPSBzb3VyY2VbcHJvcE5hbWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdGFyZ2V0O1xyXG59XHJcbi8qKlxyXG4gKiDlpI3liLblr7nosaFcclxuICogQHBhcmFtIHRhcmdldCDopoHlpI3liLbnmoTlr7nosaFcclxuICogQHBhcmFtIGRlZXAg5piv5ZCm5rex6KGo5aSN5Yi277yM6buY6K6k5rWF6KGo5aSN5Yi2XHJcbiAqIEByZXR1cm5zIHthbnl9IOWkjeWItuWQjueahOWvueixoVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lT2JqZWN0KHRhcmdldCwgZGVlcCkge1xyXG4gICAgaWYgKGRlZXAgPT09IHZvaWQgMCkgeyBkZWVwID0gZmFsc2U7IH1cclxuICAgIGlmICh0YXJnZXQgPT0gbnVsbClcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIHZhciBuZXdPYmplY3QgPSB7fTtcclxuICAgIGZvciAodmFyIGtleSBpbiB0YXJnZXQpIHtcclxuICAgICAgICB2YXIgdmFsdWUgPSB0YXJnZXRba2V5XTtcclxuICAgICAgICBpZiAoZGVlcCAmJiB0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAvLyDlpoLmnpzmmK/mt7HooajlpI3liLbvvIzliJnpnIDopoHpgJLlvZLlpI3liLblrZDlr7nosaFcclxuICAgICAgICAgICAgdmFsdWUgPSBjbG9uZU9iamVjdCh2YWx1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG5ld09iamVjdFtrZXldID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3T2JqZWN0O1xyXG59XHJcbi8qKlxyXG4gKiDnlJ/miJDkuIDkuKrpmo/mnLpJRFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEdVSUQoKSB7XHJcbiAgICB2YXIgcyA9IFtdO1xyXG4gICAgdmFyIGhleERpZ2l0cyA9IFwiMDEyMzQ1Njc4OWFiY2RlZlwiO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzNjsgaSsrKSB7XHJcbiAgICAgICAgc1tpXSA9IGhleERpZ2l0cy5zdWJzdHIoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMHgxMCksIDEpO1xyXG4gICAgfVxyXG4gICAgc1sxNF0gPSBcIjRcIjsgLy8gYml0cyAxMi0xNSBvZiB0aGUgdGltZV9oaV9hbmRfdmVyc2lvbiBmaWVsZCB0byAwMDEwXHJcbiAgICBzWzE5XSA9IGhleERpZ2l0cy5zdWJzdHIoKHBhcnNlSW50KHNbMTldKSAmIDB4MykgfCAweDgsIDEpOyAvLyBiaXRzIDYtNyBvZiB0aGUgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZCB0byAwMVxyXG4gICAgc1s4XSA9IHNbMTNdID0gc1sxOF0gPSBzWzIzXSA9IFwiLVwiO1xyXG4gICAgcmV0dXJuIHMuam9pbihcIlwiKTtcclxufVxyXG52YXIgX2dldEF1dG9JbmNJZE1hcCA9IHt9O1xyXG4vKipcclxuICog55Sf5oiQ6Ieq5aKeaWTvvIjku44w5byA5aeL77yJXHJcbiAqIEBwYXJhbSB0eXBlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXV0b0luY0lkKHR5cGUpIHtcclxuICAgIHZhciBpbmRleCA9IF9nZXRBdXRvSW5jSWRNYXBbdHlwZV0gfHwgMDtcclxuICAgIF9nZXRBdXRvSW5jSWRNYXBbdHlwZV0gPSBpbmRleCsrO1xyXG4gICAgcmV0dXJuIHR5cGUgKyBcIi1cIiArIGluZGV4O1xyXG59XHJcbi8qKlxyXG4gKiDliKTmlq3lr7nosaHmmK/lkKbkuLpudWxs5oiW6ICF56m65a+56LGhXHJcbiAqIEBwYXJhbSBvYmog6KaB5Yik5pat55qE5a+56LGhXHJcbiAqIEByZXR1cm5zIHtib29sZWFufSDmmK/lkKbkuLpudWxs5oiW6ICF56m65a+56LGhXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNFbXB0eShvYmopIHtcclxuICAgIHZhciByZXN1bHQgPSB0cnVlO1xyXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xyXG4gICAgICAgIHJlc3VsdCA9IGZhbHNlO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG4vKipcclxuICog56e76ZmkZGF0YeS4reWMheWQq+eahOepuuW8leeUqOaIluacquWumuS5iVxyXG4gKiBAcGFyYW0gZGF0YSDopoHooqvnp7vpmaTnqbrlvJXnlKjmiJbmnKrlrprkuYnnmoTlr7nosaFcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0cmltRGF0YShkYXRhKSB7XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xyXG4gICAgICAgIGlmIChkYXRhW2tleV0gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBkZWxldGUgZGF0YVtrZXldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBkYXRhO1xyXG59XHJcbi8qKlxyXG4gKiDorqljaGlsZOexu+e7p+aJv+iHqnBhcmVudOexu1xyXG4gKiBAcGFyYW0gY2hpbGQg5a2Q57G7XHJcbiAqIEBwYXJhbSBwYXJlbnQg54i257G7XHJcbiAqL1xyXG5leHBvcnQgdmFyIGV4dGVuZHNDbGFzcyA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdFtcInNldFByb3RvdHlwZU9mXCJdIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYilcclxuICAgICAgICAgICAgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpXHJcbiAgICAgICAgICAgICAgICBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxudmFyIGhhc2ggPSAwO1xyXG52YXIgaGFzaFR5cGVzID0gW1wib2JqZWN0XCIsIFwiZnVuY3Rpb25cIl07XHJcbi8qKlxyXG4gKiDojrflj5bkuIDkuKrlr7nosaHnmoTlr7nosaHlk4jluIzlrZfnrKbkuLJcclxuICpcclxuICogQGV4cG9ydFxyXG4gKiBAcGFyYW0geyp9IHRhcmdldCDku7vmhI/lr7nosaHvvIzlj6/ku6XmmK/ln7rnoYDnsbvlnovmiJZudWxsXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IOWTiOW4jOWAvFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE9iamVjdEhhc2godGFyZ2V0KSB7XHJcbiAgICBpZiAodGFyZ2V0ID09IG51bGwpXHJcbiAgICAgICAgcmV0dXJuIFwiX19vYmplY3RfaGFzaF8wX19cIjtcclxuICAgIHZhciBrZXkgPSBcIl9fb2JqZWN0X2hhc2hfX1wiO1xyXG4gICAgdmFyIHZhbHVlO1xyXG4gICAgLy8g5Y+q5pyJ5b2T5YmN5a+56LGh5LiK5pyJa2V55omN566XXHJcbiAgICBpZiAodGFyZ2V0Lmhhc093blByb3BlcnR5KGtleSkpXHJcbiAgICAgICAgdmFsdWUgPSB0YXJnZXRba2V5XTtcclxuICAgIC8vIOWmguaenOW3sue7j+acieWTiOW4jOWAvOWImeebtOaOpei/lOWbnlxyXG4gICAgaWYgKHZhbHVlKVxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIC8vIOWmguaenOaYr+WfuuehgOexu+Wei+WImeebtOaOpei/lOWbnuWvueW6lOWtl+espuS4slxyXG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgdGFyZ2V0O1xyXG4gICAgaWYgKGhhc2hUeXBlcy5pbmRleE9mKHR5cGUpIDwgMClcclxuICAgICAgICByZXR1cm4gdHlwZSArIFwiOlwiICsgdGFyZ2V0O1xyXG4gICAgLy8g5aaC5p6c5piv5aSN5p2C57G75Z6L5YiZ6L+U5Zue6K6h566X55qE5ZOI5biM5YC85bm25omT5LiK5qCH562+XHJcbiAgICB2YXIgdmFsdWUgPSBcIl9fb2JqZWN0X2hhc2hfXCIgKyAoKytoYXNoKSArIFwiX19cIjtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwge1xyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXHJcbiAgICAgICAgdmFsdWU6IHZhbHVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiB2YWx1ZTtcclxufVxyXG4vKipcclxuICog6I635Y+W5aSa5Liq5a+56LGh55qE5ZOI5biM5a2X56ym5Liy77yM5Lya5a+55q+P5Liq5a+56LGh6LCD55SoZ2V0T2JqZWN0SGFzaOeUn+aIkOWNleS4quWTiOW4jOWAvO+8jOW5tueUqHzov57mjqVcclxuICpcclxuICogQGV4cG9ydFxyXG4gKiBAcGFyYW0gey4uLmFueVtdfSB0YXJnZXRzIOW4jOacm+iOt+WPluWTiOW4jOWAvOeahOWvueixoeWIl+ihqFxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSDlpJrkuKrlr7nosaHlhbHlkIzkvZznlKjkuIvnmoTlk4jluIzlgLxcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRPYmplY3RIYXNocygpIHtcclxuICAgIHZhciB0YXJnZXRzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHRhcmdldHNbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHZhciB2YWx1ZXMgPSB0YXJnZXRzLm1hcChmdW5jdGlvbiAodGFyZ2V0KSB7IHJldHVybiBnZXRPYmplY3RIYXNoKHRhcmdldCk7IH0pO1xyXG4gICAgcmV0dXJuIHZhbHVlcy5qb2luKFwifFwiKTtcclxufVxyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci91dGlscy9PYmplY3RVdGlsLmpzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCB7IGdldE9iamVjdEhhc2ggfSBmcm9tIFwiLi9PYmplY3RVdGlsXCI7XHJcbi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0wOS0xNVxyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0wOS0xNVxyXG4gKlxyXG4gKiDlrZflhbjvvIzmlK/mjIFrZXnkuLrku7vmhI/nsbvlnovnmoTlr7nosaFcclxuKi9cclxudmFyIERpY3Rpb25hcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEaWN0aW9uYXJ5KCkge1xyXG4gICAgICAgIHRoaXMuX2tleURpY3QgPSB7fTtcclxuICAgICAgICB0aGlzLl92YWx1ZURpY3QgPSB7fTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEaWN0aW9uYXJ5LnByb3RvdHlwZSwgXCJzaXplXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDojrflj5blrZflhbjlhoXnmoTlhYPntKDmlbDph49cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEByZWFkb25seVxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICogQG1lbWJlcm9mIERpY3Rpb25hcnlcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHNpemUgPSAwO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBoYXNoIGluIHRoaXMuX2tleURpY3QpXHJcbiAgICAgICAgICAgICAgICBzaXplKys7XHJcbiAgICAgICAgICAgIHJldHVybiBzaXplO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERpY3Rpb25hcnkucHJvdG90eXBlLCBcImtleXNcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPluWtl+WFuGtleeeahOmbhuWQiFxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJlYWRvbmx5XHJcbiAgICAgICAgICogQHR5cGUge0tbXX1cclxuICAgICAgICAgKiBAbWVtYmVyb2YgRGljdGlvbmFyeVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIga2V5cyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBoYXNoIGluIHRoaXMuX2tleURpY3QpIHtcclxuICAgICAgICAgICAgICAgIGtleXMucHVzaCh0aGlzLl9rZXlEaWN0W2hhc2hdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4ga2V5cztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEaWN0aW9uYXJ5LnByb3RvdHlwZSwgXCJ2YWx1ZXNcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPluWtl+WFuOWAvOeahOmbhuWQiFxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJlYWRvbmx5XHJcbiAgICAgICAgICogQHR5cGUge1ZbXX1cclxuICAgICAgICAgKiBAbWVtYmVyb2YgRGljdGlvbmFyeVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIGhhc2ggaW4gdGhpcy5fdmFsdWVEaWN0KSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaCh0aGlzLl92YWx1ZURpY3RbaGFzaF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICAvKipcclxuICAgICAqIOiuvue9ruS4gOS4qumUruWAvOWvuVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7S30ga2V5IOmUrlxyXG4gICAgICogQHBhcmFtIHtWfSB2YWx1ZSDlgLxcclxuICAgICAqIEBtZW1iZXJvZiBEaWN0aW9uYXJ5XHJcbiAgICAgKi9cclxuICAgIERpY3Rpb25hcnkucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIGhhc2ggPSBnZXRPYmplY3RIYXNoKGtleSk7XHJcbiAgICAgICAgdGhpcy5fa2V5RGljdFtoYXNoXSA9IGtleTtcclxuICAgICAgICB0aGlzLl92YWx1ZURpY3RbaGFzaF0gPSB2YWx1ZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluS4gOS4quWAvFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7S30ga2V5IOmUrlxyXG4gICAgICogQHJldHVybnMge1Z9IOWAvFxyXG4gICAgICogQG1lbWJlcm9mIERpY3Rpb25hcnlcclxuICAgICAqL1xyXG4gICAgRGljdGlvbmFyeS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHZhciBoYXNoID0gZ2V0T2JqZWN0SGFzaChrZXkpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZURpY3RbaGFzaF07XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDliKDpmaTkuIDkuKrplK7lgLzlr7lcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0t9IGtleSDplK5cclxuICAgICAqIEBtZW1iZXJvZiBEaWN0aW9uYXJ5XHJcbiAgICAgKi9cclxuICAgIERpY3Rpb25hcnkucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICB2YXIgaGFzaCA9IGdldE9iamVjdEhhc2goa2V5KTtcclxuICAgICAgICBkZWxldGUgdGhpcy5fa2V5RGljdFtoYXNoXTtcclxuICAgICAgICBkZWxldGUgdGhpcy5fdmFsdWVEaWN0W2hhc2hdO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog6YGN5Y6G5a2X5YW4XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHsoa2V5OkssIHZhbHVlOlYpPT52b2lkfSBjYWxsYmFjayDmr4/mrKHpgY3ljobnmoTlm57osINcclxuICAgICAqIEBtZW1iZXJvZiBEaWN0aW9uYXJ5XHJcbiAgICAgKi9cclxuICAgIERpY3Rpb25hcnkucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICBmb3IgKHZhciBoYXNoIGluIHRoaXMuX2tleURpY3QpIHtcclxuICAgICAgICAgICAgdmFyIGtleSA9IHRoaXMuX2tleURpY3RbaGFzaF07XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX3ZhbHVlRGljdFtoYXNoXTtcclxuICAgICAgICAgICAgY2FsbGJhY2soa2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBEaWN0aW9uYXJ5O1xyXG59KCkpO1xyXG5leHBvcnQgZGVmYXVsdCBEaWN0aW9uYXJ5O1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci91dGlscy9EaWN0aW9uYXJ5LmpzXG4vLyBtb2R1bGUgaWQgPSAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn07XHJcbmltcG9ydCB7IGNvcmUgfSBmcm9tIFwiLi4vLi4vY29yZS9Db3JlXCI7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiLi4vLi4vY29yZS9pbmplY3Rvci9JbmplY3RvclwiO1xyXG5pbXBvcnQgQnJpZGdlTWVzc2FnZSBmcm9tIFwiLi9CcmlkZ2VNZXNzYWdlXCI7XHJcbmltcG9ydCB7IHBhbmVsTWFuYWdlciB9IGZyb20gXCIuLi9wYW5lbC9QYW5lbE1hbmFnZXJcIjtcclxuaW1wb3J0IHsgbW9kdWxlTWFuYWdlciB9IGZyb20gXCIuLi9tb2R1bGUvTW9kdWxlTWFuYWdlclwiO1xyXG5pbXBvcnQgeyBtYXNrTWFuYWdlciB9IGZyb20gXCIuLi9tYXNrL01hc2tNYW5hZ2VyXCI7XHJcbi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0wOS0wNlxyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0wOS0wNlxyXG4gKlxyXG4gKiDnlKjmnaXnrqHnkIbmiYDmnInooajnjrDlsYLlr7nosaFcclxuKi9cclxudmFyIEJyaWRnZU1hbmFnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBCcmlkZ2VNYW5hZ2VyKCkge1xyXG4gICAgICAgIHRoaXMuX2JyaWRnZURpY3QgPSB7fTtcclxuICAgICAgICB0aGlzLl9icmlkZ2VMaXN0ID0gW107XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnJpZGdlTWFuYWdlci5wcm90b3R5cGUsIFwiY3VycmVudEJyaWRnZVwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6I635Y+W5b2T5YmN55qE6KGo546w5bGC5qGl5a6e5L6L77yI6KeE5YiZ5piv5Y+W5b2T5YmN5qih5Z2X55qE56ys5LiA5Liq5oul5pyJYnJpZGdl5bGe5oCn55qETWVkaWF0b3LnmoRicmlkZ2XvvIlcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEByZWFkb25seVxyXG4gICAgICAgICAqIEB0eXBlIHtJQnJpZGdlfVxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBCcmlkZ2VNYW5hZ2VyXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIOWFiOeUqOW9k+WJjeaooeWdl+eahOmmluS4quaLpeaciWJyaWRnZeeahE1lZGlhdG9y55qEYnJpZGdlXHJcbiAgICAgICAgICAgIHZhciBjdXJNb2R1bGUgPSBtb2R1bGVNYW5hZ2VyLmN1cnJlbnRNb2R1bGVJbnN0YW5jZTtcclxuICAgICAgICAgICAgaWYgKGN1ck1vZHVsZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGJyaWRnZTtcclxuICAgICAgICAgICAgICAgIHZhciBtZWRpYXRvcnMgPSBjdXJNb2R1bGUuZGVsZWdhdGVkTWVkaWF0b3JzO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBtZWRpYXRvcnNfMSA9IG1lZGlhdG9yczsgX2kgPCBtZWRpYXRvcnNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWVkaWF0b3IgPSBtZWRpYXRvcnNfMVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lZGlhdG9yLmJyaWRnZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1lZGlhdG9yLmJyaWRnZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyDmsqHmib7liLDvvIzlho3nlKjnrKzkuIDkuKrmoaXku6Pmm79cclxuICAgICAgICAgICAgcmV0dXJuICh0aGlzLl9icmlkZ2VMaXN0WzBdICYmIHRoaXMuX2JyaWRnZUxpc3RbMF1bMF0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5booajnjrDlsYLmoaXlrp7kvotcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSDooajnjrDlsYLnsbvlnotcclxuICAgICAqIEByZXR1cm5zIHtJQnJpZGdlfSDooajnjrDlsYLmoaXlrp7kvotcclxuICAgICAqIEBtZW1iZXJvZiBCcmlkZ2VNYW5hZ2VyXHJcbiAgICAgKi9cclxuICAgIEJyaWRnZU1hbmFnZXIucHJvdG90eXBlLmdldEJyaWRnZSA9IGZ1bmN0aW9uICh0eXBlKSB7XHJcbiAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9icmlkZ2VEaWN0W3R5cGVdO1xyXG4gICAgICAgIHJldHVybiAoZGF0YSAmJiBkYXRhWzBdKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOmAmui/h+e7meWHuuS4gOS4quaYvuekuuWvueixoeearuiCpOWunuS+i+adpeiOt+WPluWQiOmAgueahOihqOeOsOWxguahpeWunuS+i1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7Kn0gc2tpbiDnmq7ogqTlrp7kvotcclxuICAgICAqIEByZXR1cm5zIHtJQnJpZGdlfG51bGx9IOearuiCpOaJgOWxnuihqOeOsOWxguahpeWunuS+i1xyXG4gICAgICogQG1lbWJlcm9mIEJyaWRnZU1hbmFnZXJcclxuICAgICAqL1xyXG4gICAgQnJpZGdlTWFuYWdlci5wcm90b3R5cGUuZ2V0QnJpZGdlQnlTa2luID0gZnVuY3Rpb24gKHNraW4pIHtcclxuICAgICAgICBpZiAoc2tpbikge1xyXG4gICAgICAgICAgICAvLyDpgY3ljobmiYDmnInlt7Lms6jlhoznmoTooajnjrDlsYLmoaXov5vooYzliKTmlq1cclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuX2JyaWRnZUxpc3Q7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgIHZhciBicmlkZ2UgPSBkYXRhWzBdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJyaWRnZS5pc015U2tpbihza2luKSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYnJpZGdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5rOo5YaM5LiA5Liq6KGo546w5bGC5qGl5a6e5L6L5Yiw5qGG5p625LitXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHsuLi5JQnJpZGdlW119IGJyaWRnZXMg6KaB5rOo5YaM55qE5omA5pyJ6KGo546w5bGC5qGlXHJcbiAgICAgKiBAbWVtYmVyb2YgQnJpZGdlTWFuYWdlclxyXG4gICAgICovXHJcbiAgICBCcmlkZ2VNYW5hZ2VyLnByb3RvdHlwZS5yZWdpc3RlckJyaWRnZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBicmlkZ2VzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYnJpZGdlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDov5vooYxET03liJ3lp4vljJbliKTmlq1cclxuICAgICAgICBpZiAoIWRvY3VtZW50LmJvZHkpIHtcclxuICAgICAgICAgICAgdmFyIG9uTG9hZCA9IGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLCBvbkxvYWQpO1xyXG4gICAgICAgICAgICAgICAgLy8g6YeN5paw6LCD55So5rOo5YaM5pa55rOVXHJcbiAgICAgICAgICAgICAgICBfdGhpcy5yZWdpc3RlckJyaWRnZS5hcHBseShfdGhpcywgYnJpZGdlcyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBvbkxvYWQpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOi/m+ihjOWIneWni+WMllxyXG4gICAgICAgIGlmIChicmlkZ2VzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICAvLyDorrDlvZVcclxuICAgICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBicmlkZ2VzXzEgPSBicmlkZ2VzOyBfYSA8IGJyaWRnZXNfMS5sZW5ndGg7IF9hKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBicmlkZ2UgPSBicmlkZ2VzXzFbX2FdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBicmlkZ2UudHlwZTtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fYnJpZGdlRGljdFt0eXBlXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gW2JyaWRnZSwgZmFsc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2JyaWRnZURpY3RbdHlwZV0gPSBkYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2JyaWRnZUxpc3QucHVzaChkYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyDlvIDlp4vliJ3lp4vljJZcclxuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBicmlkZ2VzXzIgPSBicmlkZ2VzOyBfYiA8IGJyaWRnZXNfMi5sZW5ndGg7IF9iKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBicmlkZ2UgPSBicmlkZ2VzXzJbX2JdO1xyXG4gICAgICAgICAgICAgICAgLy8g5rS+5Y+R5raI5oGvXHJcbiAgICAgICAgICAgICAgICBjb3JlLmRpc3BhdGNoKEJyaWRnZU1lc3NhZ2UuQlJJREdFX0JFRk9SRV9JTklULCBicmlkZ2UpO1xyXG4gICAgICAgICAgICAgICAgLy8g5Yid5aeL5YyWTWFza1xyXG4gICAgICAgICAgICAgICAgbWFza01hbmFnZXIucmVnaXN0ZXJNYXNrKGJyaWRnZS50eXBlLCBicmlkZ2UubWFza0VudGl0eSk7XHJcbiAgICAgICAgICAgICAgICAvLyDms6jlhozpgJrnlKjmj5DnpLrmoYZcclxuICAgICAgICAgICAgICAgIHBhbmVsTWFuYWdlci5yZWdpc3RlclByb21wdChicmlkZ2UudHlwZSwgYnJpZGdlLnByb21wdENsYXNzKTtcclxuICAgICAgICAgICAgICAgIC8vIOWIneWni+WMluivpeihqOeOsOWxguWunuS+i1xyXG4gICAgICAgICAgICAgICAgaWYgKGJyaWRnZS5pbml0KVxyXG4gICAgICAgICAgICAgICAgICAgIGJyaWRnZS5pbml0KGFmdGVySW5pdEJyaWRnZSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgYWZ0ZXJJbml0QnJpZGdlKGJyaWRnZSk7XHJcbiAgICAgICAgICAgICAgICAvLyDlhYjpmpDol4/ooajnjrDlsYLmoaXnmoRodG1sV3JhcHBlclxyXG4gICAgICAgICAgICAgICAgYnJpZGdlLmh0bWxXcmFwcGVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy50ZXN0QWxsSW5pdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBhZnRlckluaXRCcmlkZ2UoYnJpZGdlKSB7XHJcbiAgICAgICAgICAgIC8vIOa0vuWPkea2iOaBr1xyXG4gICAgICAgICAgICBjb3JlLmRpc3BhdGNoKEJyaWRnZU1lc3NhZ2UuQlJJREdFX0FGVEVSX0lOSVQsIGJyaWRnZSk7XHJcbiAgICAgICAgICAgIC8vIOiuvue9ruWIneWni+WMluWujOavleWxnuaAp1xyXG4gICAgICAgICAgICB2YXIgZGF0YSA9IHNlbGYuX2JyaWRnZURpY3RbYnJpZGdlLnR5cGVdO1xyXG4gICAgICAgICAgICBkYXRhWzFdID0gdHJ1ZTtcclxuICAgICAgICAgICAgLy8g5rWL6K+V5piv5ZCm5YWo6YOo5Yid5aeL5YyW5a6M5q+VXHJcbiAgICAgICAgICAgIHNlbGYudGVzdEFsbEluaXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQnJpZGdlTWFuYWdlci5wcm90b3R5cGUudGVzdEFsbEluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFsbEluaXRlZCA9IHRydWU7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuX2JyaWRnZUxpc3Q7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBkYXRhID0gX2FbX2ldO1xyXG4gICAgICAgICAgICBhbGxJbml0ZWQgPSBhbGxJbml0ZWQgJiYgZGF0YVsxXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFsbEluaXRlZClcclxuICAgICAgICAgICAgY29yZS5kaXNwYXRjaChCcmlkZ2VNZXNzYWdlLkJSSURHRV9BTExfSU5JVCk7XHJcbiAgICB9O1xyXG4gICAgQnJpZGdlTWFuYWdlciA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIEluamVjdGFibGVcclxuICAgIF0sIEJyaWRnZU1hbmFnZXIpO1xyXG4gICAgcmV0dXJuIEJyaWRnZU1hbmFnZXI7XHJcbn0oKSk7XHJcbmV4cG9ydCBkZWZhdWx0IEJyaWRnZU1hbmFnZXI7XHJcbi8qKiDlho3pop3lpJblr7zlh7rkuIDkuKrljZXkvosgKi9cclxuZXhwb3J0IHZhciBicmlkZ2VNYW5hZ2VyID0gY29yZS5nZXRJbmplY3QoQnJpZGdlTWFuYWdlcik7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2VuZ2luZS9icmlkZ2UvQnJpZGdlTWFuYWdlci5qc1xuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59O1xyXG5pbXBvcnQgeyBjb3JlIH0gZnJvbSBcIi4uLy4uL2NvcmUvQ29yZVwiO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIi4uLy4uL2NvcmUvaW5qZWN0b3IvSW5qZWN0b3JcIjtcclxuaW1wb3J0IHsgd3JhcEhvc3QgfSBmcm9tIFwiLi4vLi4vdXRpbHMvVVJMVXRpbFwiO1xyXG4vKipcclxuICogQGF1dGhvciBSYXlraWRcclxuICogQGVtYWlsIGluaXRpYWxfckBxcS5jb21cclxuICogQGNyZWF0ZSBkYXRlIDIwMTctMDktMjFcclxuICogQG1vZGlmeSBkYXRlIDIwMTctMDktMjFcclxuICpcclxuICog546v5aKD5Y+C5pWwXHJcbiovXHJcbnZhciBFbnZpcm9ubWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEVudmlyb25tZW50KCkge1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEVudmlyb25tZW50LnByb3RvdHlwZSwgXCJlbnZcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPluW9k+WJjeeOr+Wig+Wtl+espuS4slxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJlYWRvbmx5XHJcbiAgICAgICAgICogQHR5cGUge3N0cmluZ31cclxuICAgICAgICAgKiBAbWVtYmVyb2YgRW52aXJvbm1lbnRcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VudjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFbnZpcm9ubWVudC5wcm90b3R5cGUsIFwiaG9zdHNEaWN0XCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDojrflj5bln5/lkI3lrZflhbhcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEByZWFkb25seVxyXG4gICAgICAgICAqIEB0eXBlIHt7W2VudjpzdHJpbmddOnN0cmluZ1tdfX1cclxuICAgICAgICAgKiBAbWVtYmVyb2YgRW52aXJvbm1lbnRcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hvc3RzRGljdDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5b2T5YmN546v5aKD5LiL5p+Q57Si5byV5aSE55qE5raI5oGv5Z+f5ZCNXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtpbmRleD0wXSDln5/lkI3lrZflhbjntKLlvJXvvIzpu5jorqTmmK8wXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSDln5/lkI3lrZfnrKbkuLLvvIzlpoLmnpzlj5bkuI3liLDliJnkvb/nlKjlvZPliY3ln5/lkI1cclxuICAgICAqIEBtZW1iZXJvZiBFbnZpcm9ubWVudFxyXG4gICAgICovXHJcbiAgICBFbnZpcm9ubWVudC5wcm90b3R5cGUuZ2V0SG9zdCA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7IGluZGV4ID0gMDsgfVxyXG4gICAgICAgIHZhciBob3N0cyA9IHRoaXMuX2hvc3RzRGljdFt0aGlzLl9lbnZdO1xyXG4gICAgICAgIGlmICghaG9zdHMpXHJcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24ub3JpZ2luO1xyXG4gICAgICAgIHJldHVybiAoaG9zdHNbaW5kZXhdIHx8IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4pO1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFbnZpcm9ubWVudC5wcm90b3R5cGUsIFwiY2Ruc0RpY3RcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPlkNETuWtl+WFuFxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJlYWRvbmx5XHJcbiAgICAgICAgICogQHR5cGUge3tbZW52OnN0cmluZ106c3RyaW5nW119fVxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBFbnZpcm9ubWVudFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2Ruc0RpY3Q7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRW52aXJvbm1lbnQucHJvdG90eXBlLCBcImN1ckNETkhvc3RcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPluW9k+WJjeS9v+eUqOeahENETuWfn+WQjVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJlYWRvbmx5XHJcbiAgICAgICAgICogQHR5cGUge3N0cmluZ31cclxuICAgICAgICAgKiBAbWVtYmVyb2YgRW52aXJvbm1lbnRcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGNkbnMgPSB0aGlzLl9jZG5zRGljdFt0aGlzLl9lbnZdO1xyXG4gICAgICAgICAgICBpZiAoIWNkbnMpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLm9yaWdpbjtcclxuICAgICAgICAgICAgcmV0dXJuIChjZG5zW3RoaXMuX2N1ckNETkluZGV4XSB8fCB3aW5kb3cubG9jYXRpb24ub3JpZ2luKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIC8qKlxyXG4gICAgICog5YiH5o2i5LiL5LiA5LiqQ0ROXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IOaYr+WQpuW3sue7j+WIsOi+vkNETuWIl+ihqOeahOe7iOeCue+8jOWbnuWIsOS6hui1t+eCuVxyXG4gICAgICogQG1lbWJlcm9mIEVudmlyb25tZW50XHJcbiAgICAgKi9cclxuICAgIEVudmlyb25tZW50LnByb3RvdHlwZS5uZXh0Q0ROID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjZG5zID0gdGhpcy5fY2Ruc0RpY3RbdGhpcy5fZW52XTtcclxuICAgICAgICBpZiAoIWNkbnMpXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIHRoaXMuX2N1ckNETkluZGV4Kys7XHJcbiAgICAgICAgaWYgKHRoaXMuX2N1ckNETkluZGV4ID49IGNkbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2N1ckNETkluZGV4ID0gMDtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOWIneWni+WMlkVudmlyb25tZW505a+56LGh77yM5Zug5Li66K+l5a+56LGh5L+d5a2Y55qE5pWw5o2u5Z+65pys5p2l6Ieq6aG555uu5Yid5aeL5Y+C5pWw77yM5omA5Lul5b+F6aG75pyJaW5pdGlhbGl6ZeaWueazlVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbZW52XSDlvZPliY3miYDlsZ7njq/looPlrZfnrKbkuLJcclxuICAgICAqIEBwYXJhbSB7e1tlbnY6c3RyaW5nXTpzdHJpbmdbXX19IFtob3N0c0RpY3RdIGhvc3TmlbDnu4TlrZflhbhcclxuICAgICAqIEBwYXJhbSB7e1tlbnY6c3RyaW5nXTpzdHJpbmdbXX19IFtjZG5zRGljdF0gY2Ru5pWw57uE5a2X5YW4XHJcbiAgICAgKiBAbWVtYmVyb2YgRW52aXJvbm1lbnRcclxuICAgICAqL1xyXG4gICAgRW52aXJvbm1lbnQucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoZW52LCBob3N0c0RpY3QsIGNkbnNEaWN0KSB7XHJcbiAgICAgICAgdGhpcy5fZW52ID0gZW52IHx8IFwiZGV2XCI7XHJcbiAgICAgICAgdGhpcy5faG9zdHNEaWN0ID0gaG9zdHNEaWN0IHx8IHt9O1xyXG4gICAgICAgIHRoaXMuX2NkbnNEaWN0ID0gY2Ruc0RpY3QgfHwge307XHJcbiAgICAgICAgdGhpcy5fY3VyQ0ROSW5kZXggPSAwO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog6K6pdXJs55qE5Z+f5ZCN5Y+Y5oiQ5raI5oGv5Z+f5ZCNXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCDopoHovazlj5jnmoR1cmxcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbaW5kZXg9MF0gaG9zdOe0ouW8le+8jOm7mOiupDBcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IOi9rOWPmOWQjueahHVybFxyXG4gICAgICogQG1lbWJlcm9mIEVudmlyb25tZW50XHJcbiAgICAgKi9cclxuICAgIEVudmlyb25tZW50LnByb3RvdHlwZS50b0hvc3RVUkwgPSBmdW5jdGlvbiAodXJsLCBpbmRleCkge1xyXG4gICAgICAgIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7IGluZGV4ID0gMDsgfVxyXG4gICAgICAgIC8vIOWKoOS4imRvbWFpblxyXG4gICAgICAgIHVybCA9IHdyYXBIb3N0KHVybCwgdGhpcy5nZXRIb3N0KGluZGV4KSk7XHJcbiAgICAgICAgLy8g6L+U5ZuedXJsXHJcbiAgICAgICAgcmV0dXJuIHVybDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOiuqXVybOeahOWfn+WQjeWPmOaIkENETuWfn+WQjVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwg6KaB6L2s5Y+Y55qEdXJsXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmb3JjZWQ9ZmFsc2VdIOaYr+WQpuW8uuWItuabv+aNomhvc3RcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luZml4PXRydWVdIOaYr+WQpuWKoOWFpei3r+W+hOS4ree8gO+8jOWNs2hvc3TkuYvlkI7vvIxpbmRleC5odG1s5LmL5YmN55qE6YOo5YiG77yM6buY6K6k5Yqg5YWlXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSDovazlj5jlkI7nmoR1cmxcclxuICAgICAqIEBtZW1iZXJvZiBFbnZpcm9ubWVudFxyXG4gICAgICovXHJcbiAgICBFbnZpcm9ubWVudC5wcm90b3R5cGUudG9DRE5Ib3N0VVJMID0gZnVuY3Rpb24gKHVybCwgZm9yY2VkLCBpbmZpeCkge1xyXG4gICAgICAgIGlmIChmb3JjZWQgPT09IHZvaWQgMCkgeyBmb3JjZWQgPSBmYWxzZTsgfVxyXG4gICAgICAgIGlmIChpbmZpeCA9PT0gdm9pZCAwKSB7IGluZml4ID0gdHJ1ZTsgfVxyXG4gICAgICAgIGlmIChpbmZpeCkge1xyXG4gICAgICAgICAgICAvLyDnu4Tnu4fkuK3nvIBcclxuICAgICAgICAgICAgdmFyIG1pZG5hbWVJbmRleCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5sYXN0SW5kZXhPZihcIi9cIik7XHJcbiAgICAgICAgICAgIHZhciBtaWRuYW1lID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cmluZygwLCBtaWRuYW1lSW5kZXggKyAxKTtcclxuICAgICAgICAgICAgcmV0dXJuIHdyYXBIb3N0KHVybCwgdGhpcy5jdXJDRE5Ib3N0ICsgXCIvXCIgKyBtaWRuYW1lLCBmb3JjZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8g5Y+q5pu/5o2i5Z+f5ZCNXHJcbiAgICAgICAgICAgIHJldHVybiB3cmFwSG9zdCh1cmwsIHRoaXMuY3VyQ0ROSG9zdCwgZm9yY2VkKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRW52aXJvbm1lbnQgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBJbmplY3RhYmxlXHJcbiAgICBdLCBFbnZpcm9ubWVudCk7XHJcbiAgICByZXR1cm4gRW52aXJvbm1lbnQ7XHJcbn0oKSk7XHJcbmV4cG9ydCBkZWZhdWx0IEVudmlyb25tZW50O1xyXG4vKiog5YaN6aKd5aSW5a+85Ye65LiA5Liq5Y2V5L6LICovXHJcbmV4cG9ydCB2YXIgZW52aXJvbm1lbnQgPSBjb3JlLmdldEluamVjdChFbnZpcm9ubWVudCk7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2VuZ2luZS9lbnYvRW52aXJvbm1lbnQuanNcbi8vIG1vZHVsZSBpZCA9IDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IHsgZXh0ZW5kc0NsYXNzIH0gZnJvbSBcIi4uL3V0aWxzL09iamVjdFV0aWxcIjtcclxuaW1wb3J0IERpY3Rpb25hcnkgZnJvbSBcIi4uL3V0aWxzL0RpY3Rpb25hcnlcIjtcclxuLyoqXHJcbiAqIEBhdXRob3IgUmF5a2lkXHJcbiAqIEBlbWFpbCBpbml0aWFsX3JAcXEuY29tXHJcbiAqIEBjcmVhdGUgZGF0ZSAyMDE3LTA5LTEzXHJcbiAqIEBtb2RpZnkgZGF0ZSAyMDE3LTA5LTEzXHJcbiAqXHJcbiAqIOijhemlsOWZqOW3peWFt+mbhlxyXG4qL1xyXG52YXIgaW5zdGFuY2VEaWN0ID0gbmV3IERpY3Rpb25hcnkoKTtcclxuZnVuY3Rpb24gaGFuZGxlSW5zdGFuY2UoaW5zdGFuY2UpIHtcclxuICAgIHZhciBjbHMgPSBpbnN0YW5jZS5jb25zdHJ1Y3RvcjtcclxuICAgIGNscyA9IGNsc1tcIl9fb3JpX2NvbnN0cnVjdG9yX19cIl0gfHwgY2xzO1xyXG4gICAgdmFyIGZ1bmNzID0gaW5zdGFuY2VEaWN0LmdldChjbHMpO1xyXG4gICAgaWYgKGZ1bmNzKVxyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgZnVuY3NfMSA9IGZ1bmNzOyBfaSA8IGZ1bmNzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBmdW5jID0gZnVuY3NfMVtfaV07XHJcbiAgICAgICAgICAgIGZ1bmMoaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxufVxyXG4vKipcclxuICog5YyF6KOF5LiA5Liq57G75Z6L77yM55uR5ZCs57G75Z6L55qE5a6e5L6L5YyW5pON5L2cXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQHBhcmFtIHtJQ29uc3RydWN0b3J9IGNscyDopoHnm5HlkKzmnoTpgKDnmoTnsbvlnovmnoTpgKDlmahcclxuICogQHJldHVybnMge0lDb25zdHJ1Y3Rvcn0g5paw55qE5p6E6YCg5Ye95pWwXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gd3JhcENvbnN0cnVjdChjbHMpIHtcclxuICAgIC8vIOWIm+W7uuS4gOS4quaWsOeahOaehOmAoOWHveaVsFxyXG4gICAgdmFyIGZ1bmM7XHJcbiAgICBldmFsKCdmdW5jID0gZnVuY3Rpb24gJyArIGNsc1tcIm5hbWVcIl0gKyAnKCl7b25Db25zdHJ1Y3QuY2FsbCh0aGlzLCBhcmd1bWVudHMpfScpO1xyXG4gICAgLy8g5Yqo5oCB6K6+572u57un5om/XHJcbiAgICBleHRlbmRzQ2xhc3MoZnVuYywgY2xzKTtcclxuICAgIC8vIOS4uuaWsOeahOaehOmAoOWHveaVsOaJk+S4gOS4quagh+etvu+8jOeUqOS7peiusOW9leWOn+Wni+eahOaehOmAoOWHveaVsFxyXG4gICAgZnVuY1tcIl9fb3JpX2NvbnN0cnVjdG9yX19cIl0gPSBjbHM7XHJcbiAgICAvLyDkuLrljp/lp4vmnoTpgKDlh73mlbDkuZ/miZPkuIDkuKrmoIfnrb7vvIznlKjku6XorrDlvZXmlrDmnoTpgKDlh73mlbBcclxuICAgIGNsc1tcIl9fd3JhcF9jb25zdHJ1Y3Rvcl9fXCJdID0gZnVuYztcclxuICAgIC8vIOi/lOWbnuaWsOeahOaehOmAoOWHveaVsFxyXG4gICAgcmV0dXJuIGZ1bmM7XHJcbiAgICBmdW5jdGlvbiBvbkNvbnN0cnVjdChhcmdzKSB7XHJcbiAgICAgICAgLy8g5oGi5aSNX19wcm90b19fXHJcbiAgICAgICAgdGhpc1tcIl9fcHJvdG9fX1wiXSA9IGNscy5wcm90b3R5cGU7XHJcbiAgICAgICAgLy8g6LCD55So54i257G75p6E6YCg5Ye95pWw5p6E6YCg5a6e5L6LXHJcbiAgICAgICAgY2xzLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgIC8vIOiwg+eUqOWbnuiwg1xyXG4gICAgICAgIGhhbmRsZUluc3RhbmNlKHRoaXMpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiDlpoLmnpzkvKDlhaXnmoTnsbvmnInljIXoo4XnsbvvvIzliJnov5Tlm57ljIXoo4XnsbvvvIzlkKbliJnov5Tlm57lhbbmnKzouqtcclxuICpcclxuICogQGV4cG9ydFxyXG4gKiBAcGFyYW0ge0lDb25zdHJ1Y3Rvcn0gY2xzIOimgeiOt+WPluWMheijheexu+eahOexu+aehOmAoOWHveaVsFxyXG4gKiBAcmV0dXJucyB7SUNvbnN0cnVjdG9yfVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbnN0cnVjdG9yKGNscykge1xyXG4gICAgcmV0dXJuIChjbHNbXCJfX3dyYXBfY29uc3RydWN0b3JfX1wiXSB8fCBjbHMpO1xyXG59XHJcbi8qKlxyXG4gKiDnm5HlkKznsbvlnovnmoTlrp7kvovljJZcclxuICpcclxuICogQGV4cG9ydFxyXG4gKiBAcGFyYW0ge0lDb25zdHJ1Y3Rvcn0gY2xzIOimgeebkeWQrOWunuS+i+WMlueahOexu1xyXG4gKiBAcGFyYW0geyhpbnN0YW5jZT86YW55KT0+dm9pZH0gaGFuZGxlciDlpITnkIblh73mlbBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBsaXN0ZW5Db25zdHJ1Y3QoY2xzLCBoYW5kbGVyKSB7XHJcbiAgICBjbHMgPSBjbHNbXCJfX29yaV9jb25zdHJ1Y3Rvcl9fXCJdIHx8IGNscztcclxuICAgIHZhciBsaXN0ID0gaW5zdGFuY2VEaWN0LmdldChjbHMpO1xyXG4gICAgaWYgKCFsaXN0KVxyXG4gICAgICAgIGluc3RhbmNlRGljdC5zZXQoY2xzLCBsaXN0ID0gW10pO1xyXG4gICAgaWYgKGxpc3QuaW5kZXhPZihoYW5kbGVyKSA8IDApXHJcbiAgICAgICAgbGlzdC5wdXNoKGhhbmRsZXIpO1xyXG59XHJcbi8qKlxyXG4gKiDnp7vpmaTlrp7kvovljJbnm5HlkKxcclxuICpcclxuICogQGV4cG9ydFxyXG4gKiBAcGFyYW0ge0lDb25zdHJ1Y3Rvcn0gY2xzIOimgeenu+mZpOebkeWQrOWunuS+i+WMlueahOexu1xyXG4gKiBAcGFyYW0geyhpbnN0YW5jZT86YW55KT0+dm9pZH0gaGFuZGxlciDlpITnkIblh73mlbBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1bmxpc3RlbkNvbnN0cnVjdChjbHMsIGhhbmRsZXIpIHtcclxuICAgIGNscyA9IGNsc1tcIl9fb3JpX2NvbnN0cnVjdG9yX19cIl0gfHwgY2xzO1xyXG4gICAgdmFyIGxpc3QgPSBpbnN0YW5jZURpY3QuZ2V0KGNscyk7XHJcbiAgICBpZiAobGlzdCkge1xyXG4gICAgICAgIHZhciBpbmRleCA9IGxpc3QuaW5kZXhPZihoYW5kbGVyKTtcclxuICAgICAgICBpZiAoaW5kZXggPj0gMClcclxuICAgICAgICAgICAgbGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiDnm5HlkKznsbvlnovplIDmr4HvvIjlpoLmnpzog73lpJ/plIDmr4HnmoTor53vvIzpnIDopoHnsbvlnovlhbfmnIlkaXNwb3Nl5pa55rOV77yJ77yM6K+l55uR5ZCs5LiN6ZyA6KaB56e76ZmkXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQHBhcmFtIHtJQ29uc3RydWN0b3J9IGNscyDopoHnm5HlkKzplIDmr4HnmoTnsbtcclxuICogQHBhcmFtIHsoaW5zdGFuY2U/OmFueSk9PnZvaWR9IGhhbmRsZXIg5aSE55CG5Ye95pWwXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbGlzdGVuRGlzcG9zZShjbHMsIGhhbmRsZXIpIHtcclxuICAgIHZhciBkaXNwb3NlID0gY2xzLnByb3RvdHlwZS5kaXNwb3NlO1xyXG4gICAgLy8g5Yik5pat57G75Z6L5piv5ZCm5YW35pyJZGlzcG9zZeaWueazlVxyXG4gICAgaWYgKGRpc3Bvc2UpIHtcclxuICAgICAgICAvLyDmm7/mjaJkaXNwb3Nl5pa55rOVXHJcbiAgICAgICAgY2xzLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyDosIPnlKjlm57osINcclxuICAgICAgICAgICAgaGFuZGxlcih0aGlzKTtcclxuICAgICAgICAgICAgLy8g6LCD55So5Y6f5aeLZGlzcG9zZeaWueazleaJp+ihjOmUgOavgVxyXG4gICAgICAgICAgICByZXR1cm4gZGlzcG9zZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvdXRpbHMvQ29uc3RydWN0VXRpbC5qc1xuLy8gbW9kdWxlIGlkID0gNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxuaW1wb3J0IHsgY29yZSB9IGZyb20gXCIuLi8uLi9jb3JlL0NvcmVcIjtcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCIuLi8uLi9jb3JlL2luamVjdG9yL0luamVjdG9yXCI7XHJcbmltcG9ydCBDb3JlTWVzc2FnZSBmcm9tIFwiLi4vLi4vY29yZS9tZXNzYWdlL0NvcmVNZXNzYWdlXCI7XHJcbmltcG9ydCB7IGV4dGVuZE9iamVjdCB9IGZyb20gXCIuLi8uLi91dGlscy9PYmplY3RVdGlsXCI7XHJcbmltcG9ydCBSZXF1ZXN0RGF0YSwgeyBjb21tb25EYXRhIH0gZnJvbSBcIi4vUmVxdWVzdERhdGFcIjtcclxuaW1wb3J0IE5ldE1lc3NhZ2UgZnJvbSBcIi4vTmV0TWVzc2FnZVwiO1xyXG5pbXBvcnQgeyBtYXNrTWFuYWdlciB9IGZyb20gXCIuLi9tYXNrL01hc2tNYW5hZ2VyXCI7XHJcbnZhciBOZXRNYW5hZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTmV0TWFuYWdlcigpIHtcclxuICAgICAgICB0aGlzLl9yZXNwb25zZURpY3QgPSB7fTtcclxuICAgICAgICB0aGlzLl9yZXNwb25zZUxpc3RlbmVycyA9IHt9O1xyXG4gICAgICAgIGNvcmUubGlzdGVuKENvcmVNZXNzYWdlLk1FU1NBR0VfRElTUEFUQ0hFRCwgdGhpcy5vbk1zZ0Rpc3BhdGNoZWQsIGNvcmUpO1xyXG4gICAgfVxyXG4gICAgTmV0TWFuYWdlci5wcm90b3R5cGUub25Nc2dEaXNwYXRjaGVkID0gZnVuY3Rpb24gKG1zZykge1xyXG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gdGhpcy5vYnNlcnZhYmxlO1xyXG4gICAgICAgIC8vIOWmguaenOa2iOaBr+aYr+mAmuiur+a2iOaBr+WImeWBmuWkhOeQhlxyXG4gICAgICAgIGlmIChtc2cgaW5zdGFuY2VvZiBSZXF1ZXN0RGF0YSkge1xyXG4gICAgICAgICAgICAvLyDmt7vliqDpga7nvalcclxuICAgICAgICAgICAgbWFza01hbmFnZXIuc2hvd0xvYWRpbmcobnVsbCwgXCJuZXRcIik7XHJcbiAgICAgICAgICAgIC8vIOaMh+Wumua2iOaBr+WPguaVsOi/nuaOpeS4iuWFrOWFseWPguaVsOS9nOS4uuWPguaVsFxyXG4gICAgICAgICAgICBleHRlbmRPYmplY3QobXNnLl9fcGFyYW1zLmRhdGEsIGNvbW1vbkRhdGEpO1xyXG4gICAgICAgICAgICAvLyDlj5HpgIHmtojmga9cclxuICAgICAgICAgICAgbXNnLl9fcG9saWN5LnNlbmRSZXF1ZXN0KG1zZyk7XHJcbiAgICAgICAgICAgIC8vIOa0vuWPkeezu+e7n+a2iOaBr1xyXG4gICAgICAgICAgICBvYnNlcnZhYmxlLmRpc3BhdGNoKE5ldE1lc3NhZ2UuTkVUX1JFUVVFU1QsIG1zZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5rOo5YaM5LiA5Liq6L+U5Zue57uT5p6E5L2TXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUg6L+U5Zue57G75Z6LXHJcbiAgICAgKiBAcGFyYW0ge0lSZXNwb25zZURhdGFDb25zdHJ1Y3Rvcn0gY2xzIOi/lOWbnue7k+aehOS9k+aehOmAoOWZqFxyXG4gICAgICogQG1lbWJlcm9mIE5ldE1hbmFnZXJcclxuICAgICAqL1xyXG4gICAgTmV0TWFuYWdlci5wcm90b3R5cGUucmVnaXN0ZXJSZXNwb25zZSA9IGZ1bmN0aW9uIChjbHMpIHtcclxuICAgICAgICB0aGlzLl9yZXNwb25zZURpY3RbY2xzLnR5cGVdID0gY2xzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5re75Yqg5LiA5Liq6YCa6K6v6L+U5Zue55uR5ZCsXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHsoSVJlc3BvbnNlRGF0YUNvbnN0cnVjdG9yfHN0cmluZyl9IGNsc09yVHlwZSDopoHnm5HlkKznmoTov5Tlm57nu5PmnoTmnoTpgKDlmajmiJbogIXnsbvlnovlrZfnrKbkuLJcclxuICAgICAqIEBwYXJhbSB7UmVzcG9uc2VIYW5kbGVyfSBoYW5kbGVyIOWbnuiwg+WHveaVsFxyXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gdGhpc+aMh+WQkVxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb25jZT1mYWxzZV0g5piv5ZCm5LiA5qyh5oCn55uR5ZCsXHJcbiAgICAgKiBAcGFyYW0ge0lPYnNlcnZhYmxlfSBbb2JzZXJ2YWJsZV0g6KaB5Y+R6YCB5Yiw55qE5YaF5qC4XHJcbiAgICAgKiBAbWVtYmVyb2YgTmV0TWFuYWdlclxyXG4gICAgICovXHJcbiAgICBOZXRNYW5hZ2VyLnByb3RvdHlwZS5saXN0ZW5SZXNwb25zZSA9IGZ1bmN0aW9uIChjbHNPclR5cGUsIGhhbmRsZXIsIHRoaXNBcmcsIG9uY2UsIG9ic2VydmFibGUpIHtcclxuICAgICAgICBpZiAob25jZSA9PT0gdm9pZCAwKSB7IG9uY2UgPSBmYWxzZTsgfVxyXG4gICAgICAgIGlmICghb2JzZXJ2YWJsZSlcclxuICAgICAgICAgICAgb2JzZXJ2YWJsZSA9IGNvcmUub2JzZXJ2YWJsZTtcclxuICAgICAgICB2YXIgdHlwZSA9ICh0eXBlb2YgY2xzT3JUeXBlID09IFwic3RyaW5nXCIgPyBjbHNPclR5cGUgOiBjbHNPclR5cGUudHlwZSk7XHJcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX3Jlc3BvbnNlTGlzdGVuZXJzW3R5cGVdO1xyXG4gICAgICAgIGlmICghbGlzdGVuZXJzKVxyXG4gICAgICAgICAgICB0aGlzLl9yZXNwb25zZUxpc3RlbmVyc1t0eXBlXSA9IGxpc3RlbmVycyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgbGlzdGVuZXJzXzEgPSBsaXN0ZW5lcnM7IF9pIDwgbGlzdGVuZXJzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc18xW19pXTtcclxuICAgICAgICAgICAgaWYgKGhhbmRsZXIgPT0gbGlzdGVuZXJbMF0gJiYgdGhpc0FyZyA9PSBsaXN0ZW5lclsxXSAmJiBvbmNlID09IGxpc3RlbmVyWzJdKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsaXN0ZW5lcnMucHVzaChbaGFuZGxlciwgdGhpc0FyZywgb25jZSwgb2JzZXJ2YWJsZV0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog56e76Zmk5LiA5Liq6YCa6K6v6L+U5Zue55uR5ZCsXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHsoSVJlc3BvbnNlRGF0YUNvbnN0cnVjdG9yfHN0cmluZyl9IGNsc09yVHlwZSDopoHnp7vpmaTnm5HlkKznmoTov5Tlm57nu5PmnoTmnoTpgKDlmajmiJbogIXnsbvlnovlrZfnrKbkuLJcclxuICAgICAqIEBwYXJhbSB7UmVzcG9uc2VIYW5kbGVyfSBoYW5kbGVyIOWbnuiwg+WHveaVsFxyXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gdGhpc+aMh+WQkVxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb25jZT1mYWxzZV0g5piv5ZCm5LiA5qyh5oCn55uR5ZCsXHJcbiAgICAgKiBAcGFyYW0ge0lPYnNlcnZhYmxlfSBbb2JzZXJ2YWJsZV0g6KaB5Y+R6YCB5Yiw55qE5YaF5qC4XHJcbiAgICAgKiBAbWVtYmVyb2YgTmV0TWFuYWdlclxyXG4gICAgICovXHJcbiAgICBOZXRNYW5hZ2VyLnByb3RvdHlwZS51bmxpc3RlblJlc3BvbnNlID0gZnVuY3Rpb24gKGNsc09yVHlwZSwgaGFuZGxlciwgdGhpc0FyZywgb25jZSwgb2JzZXJ2YWJsZSkge1xyXG4gICAgICAgIGlmIChvbmNlID09PSB2b2lkIDApIHsgb25jZSA9IGZhbHNlOyB9XHJcbiAgICAgICAgaWYgKCFvYnNlcnZhYmxlKVxyXG4gICAgICAgICAgICBvYnNlcnZhYmxlID0gY29yZS5vYnNlcnZhYmxlO1xyXG4gICAgICAgIHZhciB0eXBlID0gKHR5cGVvZiBjbHNPclR5cGUgPT0gXCJzdHJpbmdcIiA/IGNsc09yVHlwZSA6IGNsc09yVHlwZS50eXBlKTtcclxuICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fcmVzcG9uc2VMaXN0ZW5lcnNbdHlwZV07XHJcbiAgICAgICAgaWYgKGxpc3RlbmVycykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlciA9PSBsaXN0ZW5lclswXSAmJiB0aGlzQXJnID09IGxpc3RlbmVyWzFdICYmIG9uY2UgPT0gbGlzdGVuZXJbMl0gJiYgb2JzZXJ2YWJsZSA9PSBsaXN0ZW5lclszXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDlj5HpgIHlpJrmnaHor7fmsYLvvIzlubbkuJTnrYnlvoXov5Tlm57nu5PmnpzvvIjlpoLmnpzmnInnmoTor53vvInvvIzosIPnlKjlm57osINcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3REYXRhW119IFtyZXF1ZXN0cyDopoHlj5HpgIHnmoTor7fmsYLliJfooahcclxuICAgICAqIEBwYXJhbSB7KHJlc3BvbnNlcz86UmVzcG9uc2VEYXRhW10pPT52b2lkfSBbaGFuZGxlcl0g5pS25Yiw6L+U5Zue57uT5p6c5ZCO55qE5Zue6LCD5Ye95pWwXHJcbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSB0aGlz5oyH5ZCRXHJcbiAgICAgKiBAcGFyYW0ge0lPYnNlcnZhYmxlfSBbb2JzZXJ2YWJsZV0g6KaB5Y+R6YCB5Yiw55qE5YaF5qC4XHJcbiAgICAgKiBAbWVtYmVyb2YgTmV0TWFuYWdlclxyXG4gICAgICovXHJcbiAgICBOZXRNYW5hZ2VyLnByb3RvdHlwZS5zZW5kTXVsdGlSZXF1ZXN0cyA9IGZ1bmN0aW9uIChyZXF1ZXN0cywgaGFuZGxlciwgdGhpc0FyZywgb2JzZXJ2YWJsZSkge1xyXG4gICAgICAgIHZhciByZXNwb25zZXMgPSBbXTtcclxuICAgICAgICB2YXIgbGVmdFJlc0NvdW50ID0gMDtcclxuICAgICAgICBpZiAoIW9ic2VydmFibGUpXHJcbiAgICAgICAgICAgIG9ic2VydmFibGUgPSBjb3JlLm9ic2VydmFibGU7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHJlcXVlc3RzIHx8IFtdOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgcmVxdWVzdCA9IF9hW19pXTtcclxuICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0gcmVxdWVzdC5fX3BhcmFtcy5yZXNwb25zZTtcclxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDnm5HlkKzkuIDmrKHmgKfov5Tlm55cclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuUmVzcG9uc2UocmVzcG9uc2UsIG9uUmVzcG9uc2UsIHRoaXMsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgLy8g6K6w5b2V6L+U5Zue55uR5ZCsXHJcbiAgICAgICAgICAgICAgICByZXNwb25zZXMucHVzaChyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAvLyDorrDlvZXmlbDph49cclxuICAgICAgICAgICAgICAgIGxlZnRSZXNDb3VudCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIOWPkemAgeivt+axglxyXG4gICAgICAgICAgICBvYnNlcnZhYmxlLmRpc3BhdGNoKHJlcXVlc3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDmtYvor5Xlm57osINcclxuICAgICAgICB0ZXN0Q2FsbGJhY2soKTtcclxuICAgICAgICBmdW5jdGlvbiBvblJlc3BvbnNlKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiByZXNwb25zZXMpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0ZW1wID0gcmVzcG9uc2VzW2tleV07XHJcbiAgICAgICAgICAgICAgICBpZiAodGVtcCA9PSByZXNwb25zZS5jb25zdHJ1Y3Rvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlc1trZXldID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdFJlc0NvdW50LS07XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5rWL6K+V5Zue6LCDXHJcbiAgICAgICAgICAgICAgICAgICAgdGVzdENhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gdGVzdENhbGxiYWNrKCkge1xyXG4gICAgICAgICAgICAvLyDliKTmlq3mmK/lkKblhajpg6jmm7/mjaLlrozmr5VcclxuICAgICAgICAgICAgaWYgKGxlZnRSZXNDb3VudCA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyICYmIGhhbmRsZXIuY2FsbCh0aGlzQXJnLCByZXNwb25zZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiDov5nph4zlr7zlh7rkuI3luIzmnJvnlKjmiLfkvb/nlKjnmoTmlrnms5XvvIzkvpvmoYbmnrblhoXkvb/nlKggKi9cclxuICAgIE5ldE1hbmFnZXIucHJvdG90eXBlLl9fb25SZXNwb25zZSA9IGZ1bmN0aW9uICh0eXBlLCByZXN1bHQsIHJlcXVlc3QpIHtcclxuICAgICAgICAvLyDnp7vpmaTpga7nvalcclxuICAgICAgICBtYXNrTWFuYWdlci5oaWRlTG9hZGluZyhcIm5ldFwiKTtcclxuICAgICAgICAvLyDop6PmnpDnu5PmnpxcclxuICAgICAgICB2YXIgY2xzID0gdGhpcy5fcmVzcG9uc2VEaWN0W3R5cGVdO1xyXG4gICAgICAgIGlmIChjbHMpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0gbmV3IGNscygpO1xyXG4gICAgICAgICAgICAvLyDmiafooYzop6PmnpBcclxuICAgICAgICAgICAgcmVzcG9uc2UucGFyc2UocmVzdWx0KTtcclxuICAgICAgICAgICAgLy8g6K6+572u6YWN5a+56K+35rGC5ZKM5Y+R6YCB5YaF5qC4XHJcbiAgICAgICAgICAgIHZhciBvYnNlcnZhYmxlID0gY29yZS5vYnNlcnZhYmxlO1xyXG4gICAgICAgICAgICBpZiAocmVxdWVzdCkge1xyXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UuX19wYXJhbXMucmVxdWVzdCA9IHJlcXVlc3Q7XHJcbiAgICAgICAgICAgICAgICAvLyDlpoLmnpzmnInphY3lr7nor7fmsYLvvIzliJnlsIbov5Tlm57lgLzlj5HpgIHliLDor7fmsYLmiYDlnKjnmoTljp/lp4vlhoXmoLjph4xcclxuICAgICAgICAgICAgICAgIG9ic2VydmFibGUgPSByZXF1ZXN0Ll9fb3JpT2JzZXJ2YWJsZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyDmtL7lj5Hkuovku7ZcclxuICAgICAgICAgICAgb2JzZXJ2YWJsZS5kaXNwYXRjaChOZXRNZXNzYWdlLk5FVF9SRVNQT05TRSwgcmVzcG9uc2UsIHJlc3BvbnNlLl9fcGFyYW1zLnJlcXVlc3QpO1xyXG4gICAgICAgICAgICAvLyDpgJLlvZLlpITnkIbkuovku7bnm5HlkKxcclxuICAgICAgICAgICAgdGhpcy5yZWN1cnNlUmVzcG9uc2UodHlwZSwgcmVzcG9uc2UsIG9ic2VydmFibGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKFwi5rKh5pyJ5om+5Yiw6L+U5Zue57uT5p6E5L2T5a6a5LmJ77yaXCIgKyB0eXBlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTmV0TWFuYWdlci5wcm90b3R5cGUucmVjdXJzZVJlc3BvbnNlID0gZnVuY3Rpb24gKHR5cGUsIHJlc3BvbnNlLCBvYnNlcnZhYmxlKSB7XHJcbiAgICAgICAgLy8g5YWI6YCS5b2S54i257qn77yM5LiO5raI5oGv5Y+R6YCB5pe26aG65bqP55u45Y+NXHJcbiAgICAgICAgaWYgKG9ic2VydmFibGUucGFyZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVjdXJzZVJlc3BvbnNlKHR5cGUsIHJlc3BvbnNlLCBvYnNlcnZhYmxlLnBhcmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOinpuWPkeS6i+S7tuW9ouW8j+ebkeWQrFxyXG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9yZXNwb25zZUxpc3RlbmVyc1t0eXBlXTtcclxuICAgICAgICBpZiAobGlzdGVuZXJzKSB7XHJcbiAgICAgICAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5jb25jYXQoKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBsaXN0ZW5lcnNfMiA9IGxpc3RlbmVyczsgX2kgPCBsaXN0ZW5lcnNfMi5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc18yW19pXTtcclxuICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lclszXSA9PSBvYnNlcnZhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5b+F6aG75piv5ZCM5qC45raI5oGv5omN6IO96Kem5Y+R5Zue6LCDXHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJbMF0uY2FsbChsaXN0ZW5lclsxXSwgcmVzcG9uc2UsIHJlc3BvbnNlLl9fcGFyYW1zLnJlcXVlc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOWmguaenOaYr+S4gOasoeaAp+ebkeWQrOWImeenu+mZpOS5i1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lclsyXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51bmxpc3RlblJlc3BvbnNlKHR5cGUsIGxpc3RlbmVyWzBdLCBsaXN0ZW5lclsxXSwgbGlzdGVuZXJbMl0sIGxpc3RlbmVyWzNdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBOZXRNYW5hZ2VyLnByb3RvdHlwZS5fX29uRXJyb3IgPSBmdW5jdGlvbiAoZXJyLCByZXF1ZXN0KSB7XHJcbiAgICAgICAgLy8g56e76Zmk6YGu572pXHJcbiAgICAgICAgbWFza01hbmFnZXIuaGlkZUxvYWRpbmcoXCJuZXRcIik7XHJcbiAgICAgICAgLy8g5aaC5p6c5pyJ6YWN5a+56K+35rGC77yM5YiZ5bCG6L+U5Zue5YC85Y+R6YCB5Yiw6K+35rGC5omA5Zyo55qE5Y6f5aeL5YaF5qC46YeMXHJcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSByZXF1ZXN0ICYmIHJlcXVlc3QuX19vcmlPYnNlcnZhYmxlO1xyXG4gICAgICAgIC8vIOa0vuWPkeS6i+S7tlxyXG4gICAgICAgIG9ic2VydmFibGUuZGlzcGF0Y2goTmV0TWVzc2FnZS5ORVRfRVJST1IsIGVyciwgcmVxdWVzdCk7XHJcbiAgICB9O1xyXG4gICAgTmV0TWFuYWdlciA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIEluamVjdGFibGUsXHJcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtdKVxyXG4gICAgXSwgTmV0TWFuYWdlcik7XHJcbiAgICByZXR1cm4gTmV0TWFuYWdlcjtcclxufSgpKTtcclxuZXhwb3J0IGRlZmF1bHQgTmV0TWFuYWdlcjtcclxuLyoqIOWGjemineWkluWvvOWHuuS4gOS4quWNleS+iyAqL1xyXG5leHBvcnQgdmFyIG5ldE1hbmFnZXIgPSBjb3JlLmdldEluamVjdChOZXRNYW5hZ2VyKTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL25ldC9OZXRNYW5hZ2VyLmpzXG4vLyBtb2R1bGUgaWQgPSA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn07XHJcbmltcG9ydCB7IGNvcmUgfSBmcm9tIFwiLi4vLi4vY29yZS9Db3JlXCI7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiLi4vLi4vY29yZS9pbmplY3Rvci9JbmplY3RvclwiO1xyXG5pbXBvcnQgeyBuZXRNYW5hZ2VyIH0gZnJvbSBcIi4uL25ldC9OZXRNYW5hZ2VyXCI7XHJcbmltcG9ydCBNb2R1bGVNZXNzYWdlIGZyb20gXCIuL01vZHVsZU1lc3NhZ2VcIjtcclxuaW1wb3J0IHsgZW52aXJvbm1lbnQgfSBmcm9tIFwiLi4vZW52L0Vudmlyb25tZW50XCI7XHJcbmltcG9ydCB7IG1hc2tNYW5hZ2VyIH0gZnJvbSBcIi4uL21hc2svTWFza01hbmFnZXJcIjtcclxuaW1wb3J0IHsgYXNzZXRzTWFuYWdlciB9IGZyb20gXCIuLi9hc3NldHMvQXNzZXRzTWFuYWdlclwiO1xyXG5pbXBvcnQgeyBhdWRpb01hbmFnZXIgfSBmcm9tIFwiLi4vYXVkaW8vQXVkaW9NYW5hZ2VyXCI7XHJcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi4vdmVyc2lvbi9WZXJzaW9uXCI7XHJcbi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0wOS0xNFxyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0wOS0xNVxyXG4gKlxyXG4gKiDmqKHlnZfnrqHnkIblmajvvIznrqHnkIbmqKHlnZfnm7jlhbPnmoTmiYDmnInmk43kvZzjgILmqKHlnZflhbfmnInllK/kuIDmgKfvvIzlkIzkuIDml7bpl7TkuI3lj6/ku6XmiZPlvIDkuKTkuKrnm7jlkIzmqKHlnZfvvIzlpoLmnpzmiZPlvIDliJnkvJrpgIDlm57liLDlhYjliY3nmoTmqKHlnZflpIRcclxuKi9cclxudmFyIE1vZHVsZU1hbmFnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBNb2R1bGVNYW5hZ2VyKCkge1xyXG4gICAgICAgIHRoaXMuX21vZHVsZURpY3QgPSB7fTtcclxuICAgICAgICB0aGlzLl9tb2R1bGVTdGFjayA9IFtdO1xyXG4gICAgICAgIHRoaXMuX29wZW5DYWNoZSA9IFtdO1xyXG4gICAgICAgIHRoaXMuX29wZW5pbmcgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZU1hbmFnZXIucHJvdG90eXBlLCBcImN1cnJlbnRNb2R1bGVcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPluW9k+WJjeaooeWdl1xyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJlYWRvbmx5XHJcbiAgICAgICAgICogQHR5cGUge0lNb2R1bGVDb25zdHJ1Y3Rvcnx1bmRlZmluZWR9XHJcbiAgICAgICAgICogQG1lbWJlcm9mIE1vZHVsZU1hbmFnZXJcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGN1ckRhdGEgPSB0aGlzLmdldEN1cnJlbnQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIChjdXJEYXRhICYmIGN1ckRhdGFbMF0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZU1hbmFnZXIucHJvdG90eXBlLCBcImN1cnJlbnRNb2R1bGVJbnN0YW5jZVwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6I635Y+W5b2T5YmN5qih5Z2X55qE5a6e5L6LXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcmVhZG9ubHlcclxuICAgICAgICAgKiBAdHlwZSB7KElNb2R1bGV8dW5kZWZpbmVkKX1cclxuICAgICAgICAgKiBAbWVtYmVyb2YgTW9kdWxlTWFuYWdlclxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgY3VyRGF0YSA9IHRoaXMuZ2V0Q3VycmVudCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gKGN1ckRhdGEgJiYgY3VyRGF0YVsxXSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlTWFuYWdlci5wcm90b3R5cGUsIFwiYWN0aXZlQ291bnRcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPlua0u+WKqOaooeWdl+aVsOmHj1xyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJlYWRvbmx5XHJcbiAgICAgICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAgICAgKiBAbWVtYmVyb2YgTW9kdWxlTWFuYWdlclxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9kdWxlU3RhY2subGVuZ3RoO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bmqKHlnZflnKjmoIjkuK3nmoTntKLlvJVcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0lNb2R1bGVDb25zdHJ1Y3Rvcn0gY2xzIOaooeWdl+exu+Wei1xyXG4gICAgICogQHJldHVybnMge251bWJlcn0g57Si5byV5YC8XHJcbiAgICAgKiBAbWVtYmVyb2YgTW9kdWxlTWFuYWdlclxyXG4gICAgICovXHJcbiAgICBNb2R1bGVNYW5hZ2VyLnByb3RvdHlwZS5nZXRJbmRleCA9IGZ1bmN0aW9uIChjbHMpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fbW9kdWxlU3RhY2subGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX21vZHVsZVN0YWNrW2ldWzBdID09IGNscylcclxuICAgICAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bntKLlvJXlpITmqKHlnZfnsbvlnotcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXgg5qih5Z2X57Si5byV5YC8XHJcbiAgICAgKiBAcmV0dXJucyB7SU1vZHVsZUNvbnN0cnVjdG9yfSDmqKHlnZfnsbvlnotcclxuICAgICAqIEBtZW1iZXJvZiBNb2R1bGVNYW5hZ2VyXHJcbiAgICAgKi9cclxuICAgIE1vZHVsZU1hbmFnZXIucHJvdG90eXBlLmdldE1vZHVsZSA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5fbW9kdWxlU3RhY2tbaW5kZXhdO1xyXG4gICAgICAgIHJldHVybiBkYXRhICYmIGRhdGFbMF07XHJcbiAgICB9O1xyXG4gICAgTW9kdWxlTWFuYWdlci5wcm90b3R5cGUuZ2V0QWZ0ZXIgPSBmdW5jdGlvbiAoY2xzKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLl9tb2R1bGVTdGFjazsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIG1vZHVsZSA9IF9hW19pXTtcclxuICAgICAgICAgICAgaWYgKG1vZHVsZVswXSA9PSBjbHMpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaChtb2R1bGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICBNb2R1bGVNYW5hZ2VyLnByb3RvdHlwZS5nZXRDdXJyZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIOaMiemhuuW6j+mBjeWOhuaooeWdl++8jOWPluWHuuacgOaWsOeahOayoeacieWcqOW8gOWQr+S4reeahOaooeWdl1xyXG4gICAgICAgIHZhciB0YXJnZXQ7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuX21vZHVsZVN0YWNrOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgdGVtcCA9IF9hW19pXTtcclxuICAgICAgICAgICAgaWYgKHRlbXBbMF0gIT09IHRoaXMuX29wZW5pbmcpIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldCA9IHRlbXA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgfTtcclxuICAgIE1vZHVsZU1hbmFnZXIucHJvdG90eXBlLnJlZ2lzdGVyTW9kdWxlID0gZnVuY3Rpb24gKGNscykge1xyXG4gICAgICAgIHRoaXMuX21vZHVsZURpY3RbY2xzW1wibmFtZVwiXV0gPSBjbHM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bmqKHlnZfmmK/lkKblvIDlkK/kuK1cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0lNb2R1bGVDb25zdHJ1Y3Rvcn0gY2xzIOimgeWIpOaWreeahOaooeWdl+exu+Wei1xyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IOaYr+WQpuW8gOWQr1xyXG4gICAgICogQG1lbWJlcm9mIE1vZHVsZU1hbmFnZXJcclxuICAgICAqL1xyXG4gICAgTW9kdWxlTWFuYWdlci5wcm90b3R5cGUuaXNPcGVuZWQgPSBmdW5jdGlvbiAoY2xzKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLl9tb2R1bGVTdGFjay5maWx0ZXIoZnVuY3Rpb24gKHRlbXApIHsgcmV0dXJuIHRlbXBbMF0gPT0gY2xzOyB9KS5sZW5ndGggPiAwKTtcclxuICAgIH07XHJcbiAgICBNb2R1bGVNYW5hZ2VyLnByb3RvdHlwZS5hY3RpdmF0ZU1vZHVsZSA9IGZ1bmN0aW9uIChtb2R1bGUsIGZyb20sIGRhdGEpIHtcclxuICAgICAgICBpZiAobW9kdWxlKSB7XHJcbiAgICAgICAgICAgIC8vIOiwg+eUqG9uQWN0aXZhdGXmjqXlj6NcclxuICAgICAgICAgICAgbW9kdWxlLm9uQWN0aXZhdGUoZnJvbSwgZGF0YSk7XHJcbiAgICAgICAgICAgIC8vIOaSreaUvuiDjOaZr+mfs+S5kFxyXG4gICAgICAgICAgICB2YXIgYmdNdXNpYyA9IG1vZHVsZS5iZ011c2ljO1xyXG4gICAgICAgICAgICBpZiAoYmdNdXNpYykge1xyXG4gICAgICAgICAgICAgICAgLy8g5L2/55SoTXVzaWPpn7PpopHmkq3mlL5cclxuICAgICAgICAgICAgICAgIGF1ZGlvTWFuYWdlci5wbGF5TXVzaWMoeyB1cmw6IGJnTXVzaWMsIGxvb3A6IHRydWUsIHN0b3BPdGhlcnM6IHRydWUgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTW9kdWxlTWFuYWdlci5wcm90b3R5cGUuZGVhY3RpdmF0ZU1vZHVsZSA9IGZ1bmN0aW9uIChtb2R1bGUsIHRvLCBkYXRhKSB7XHJcbiAgICAgICAgaWYgKG1vZHVsZSkge1xyXG4gICAgICAgICAgICAvLyDosIPnlKhvbkRlYWN0aXZhdGXmjqXlj6NcclxuICAgICAgICAgICAgbW9kdWxlLm9uRGVhY3RpdmF0ZSh0bywgZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5omT5byA5qih5Z2XXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtJTW9kdWxlQ29uc3RydWN0b3J8c3RyaW5nfSBjbHNPck5hbWUg5qih5Z2X57G75Z6L5oiW5ZCN56ewXHJcbiAgICAgKiBAcGFyYW0geyp9IFtkYXRhXSDlj4LmlbBcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JlcGxhY2U9ZmFsc2VdIOaYr+WQpuabv+aNouW9k+WJjeaooeWdl1xyXG4gICAgICogQG1lbWJlcm9mIE1vZHVsZU1hbmFnZXJcclxuICAgICAqL1xyXG4gICAgTW9kdWxlTWFuYWdlci5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uIChjbHNPck5hbWUsIGRhdGEsIHJlcGxhY2UpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmIChyZXBsYWNlID09PSB2b2lkIDApIHsgcmVwbGFjZSA9IGZhbHNlOyB9XHJcbiAgICAgICAgLy8g5aaC5p6c5piv5a2X56ym5Liy5YiZ6I635Y+W5byV55SoXHJcbiAgICAgICAgdmFyIGNscyA9ICh0eXBlb2YgY2xzT3JOYW1lID09IFwic3RyaW5nXCIgPyB0aGlzLl9tb2R1bGVEaWN0W2Nsc09yTmFtZV0gOiBjbHNPck5hbWUpO1xyXG4gICAgICAgIC8vIOmdnuepuuWIpOaWrVxyXG4gICAgICAgIGlmICghY2xzKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgLy8g5Yik5pat5piv5ZCm5q2j5Zyo5omT5byA5qih5Z2XXHJcbiAgICAgICAgaWYgKHRoaXMuX29wZW5pbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5fb3BlbkNhY2hlLnB1c2goW2NscywgZGF0YSwgcmVwbGFjZV0pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX29wZW5pbmcgPSBjbHM7XHJcbiAgICAgICAgdmFyIGFmdGVyID0gdGhpcy5nZXRBZnRlcihjbHMpO1xyXG4gICAgICAgIGlmICghYWZ0ZXIpIHtcclxuICAgICAgICAgICAgLy8g5bCa5pyq5omT5byA6L+H77yM5q2j5bi45byA5ZCv5qih5Z2XXHJcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSBuZXcgY2xzKCk7XHJcbiAgICAgICAgICAgIC8vIOi1i+WAvOaJk+W8gOWPguaVsFxyXG4gICAgICAgICAgICB0YXJnZXQuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgICAgIC8vIOaVsOaNruWFiOihjFxyXG4gICAgICAgICAgICB2YXIgZnJvbSA9IHRoaXMuZ2V0Q3VycmVudCgpO1xyXG4gICAgICAgICAgICB2YXIgZnJvbU1vZHVsZSA9IGZyb20gJiYgZnJvbVsxXTtcclxuICAgICAgICAgICAgdGhpcy5fbW9kdWxlU3RhY2sudW5zaGlmdChbY2xzLCB0YXJnZXRdKTtcclxuICAgICAgICAgICAgLy8g6K6w5LiA5Liq5piv5ZCm6ZyA6KaB6YGu572p55qEZmxhZ1xyXG4gICAgICAgICAgICB2YXIgbWFza0ZsYWcgPSB0cnVlO1xyXG4gICAgICAgICAgICAvLyDliqDovb3miYDmnInlt7LmiZjnrqHkuK3ku4vogIXnmoTotYTmupBcclxuICAgICAgICAgICAgdmFyIG1lZGlhdG9ycyA9IHRhcmdldC5kZWxlZ2F0ZWRNZWRpYXRvcnMuY29uY2F0KCk7XHJcbiAgICAgICAgICAgIHZhciBsb2FkTWVkaWF0b3JBc3NldHMgPSBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g6ZqQ6JePTG9hZGluZ1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbWFza0ZsYWcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tNYW5hZ2VyLmhpZGVMb2FkaW5nKFwibW9kdWxlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hc2tGbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5YGc5q2i5Yqg6L2977yM6LCD55So5qih5Z2X5Yqg6L295aSx6LSl5o6l5Y+jXHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Lm9uTG9hZEFzc2V0cyhlcnIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobWVkaWF0b3JzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWVkaWF0b3IgPSBtZWRpYXRvcnMuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBtZWRpYXRvci5sb2FkQXNzZXRzKGxvYWRNZWRpYXRvckFzc2V0cyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDpmpDol49Mb2FkaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtYXNrRmxhZylcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza01hbmFnZXIuaGlkZUxvYWRpbmcoXCJtb2R1bGVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFza0ZsYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAvLyDosIPnlKhvbkxvYWRBc3NldHPmjqXlj6NcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQub25Mb2FkQXNzZXRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5byA5aeL5Yqg6L29Y3Nz5paH5Lu277yMY3Nz5paH5Lu25b+F6aG755SobGlua+agh+etvuS7jkNETuWKoOi9ve+8jOWboOS4uuWbvueJh+mcgOimgeS7jkNETuWKoOi9vVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjc3NGaWxlcyA9IHRhcmdldC5saXN0U3R5bGVGaWxlcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjc3NGaWxlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGNzc0ZpbGVzXzEgPSBjc3NGaWxlczsgX2kgPCBjc3NGaWxlc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNzc0ZpbGUgPSBjc3NGaWxlc18xW19pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3NOb2RlLnJlbCA9IFwic3R5bGVzaGVldFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzTm9kZS50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzTm9kZS5ocmVmID0gZW52aXJvbm1lbnQudG9DRE5Ib3N0VVJMKHZlcnNpb24ud3JhcEhhc2hVcmwoY3NzRmlsZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyDlvIDlp4vliqDovb1qc+aWh+S7tu+8jOi/memHjGpz5paH5Lu25L2/55So5bWM5YWlaHRtbOeahOaWueW8j++8jOS7peS4uui/meagt2pz5LiN5Lya6Leo5Z+f77yM5oql6ZSZ5L+h5oGv5Y+v5Lul5pS26ZuG5YiwXHJcbiAgICAgICAgICAgICAgICAgICAgYXNzZXRzTWFuYWdlci5sb2FkQXNzZXRzKHRhcmdldC5saXN0SnNGaWxlcygpLCBmdW5jdGlvbiAocmVzdWx0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0cyBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQub25Mb2FkQXNzZXRzKHJlc3VsdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDkvb/nlKhzY3JpcHTmoIfnrb7lsIZqc+aWh+S7tuWKoOWFpWh0bWzkuK1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqc05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganNOb2RlLmlubmVySFRNTCA9IHJlc3VsdHMuam9pbihcIlxcblwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoanNOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDlj5HpgIHmiYDmnInmqKHlnZfmtojmga/vvIzmqKHlnZfmtojmga/pu5jorqTlj5HpgIHlhajlsYDlhoXmoLhcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlcXVlc3RzID0gdGFyZ2V0Lmxpc3RJbml0UmVxdWVzdHMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV0TWFuYWdlci5zZW5kTXVsdGlSZXF1ZXN0cyhyZXF1ZXN0cywgZnVuY3Rpb24gKHJlc3BvbnNlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g6LWL5YC8cmVzcG9uc2VzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQucmVzcG9uc2VzID0gcmVzcG9uc2VzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g5YWz6Zet5qCH6K+G56ymXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcGVuaW5nID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOiwg+eUqG9uT3BlbuaOpeWPo1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Lm9uT3BlbihkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOiwg+eUqG9uRGVhY3RpdmF0ZeaOpeWPo1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWFjdGl2YXRlTW9kdWxlKGZyb21Nb2R1bGUgJiYgZnJvbU1vZHVsZSwgY2xzLCBkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOiwg+eUqG9uQWN0aXZhdGXmjqXlj6NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZhdGVNb2R1bGUodGFyZ2V0LCBmcm9tICYmIGZyb21bMF0sIGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g5aaC5p6ccmVwbGFjZeaYr3RydWXvvIzliJnlhbPmjonkuIrkuIDkuKrmqKHlnZdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXBsYWNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoZnJvbSAmJiBmcm9tWzBdLCBkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOa0vuWPkea2iOaBr1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29yZS5kaXNwYXRjaChNb2R1bGVNZXNzYWdlLk1PRFVMRV9DSEFOR0UsIGNscywgZnJvbSAmJiBmcm9tWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOWmguaenOaciee8k+WtmOeahOaooeWdl+mcgOimgeaJk+W8gOWImeaJk+W8gOS5i1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX29wZW5DYWNoZS5sZW5ndGggPiAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3Blbi5hcHBseSh0aGlzLCB0aGlzLl9vcGVuQ2FjaGUuc2hpZnQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIF90aGlzLCB0YXJnZXQub2JzZXJ2YWJsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGxvYWRNZWRpYXRvckFzc2V0cygpO1xyXG4gICAgICAgICAgICAvLyDmmL7npLpMb2FkaW5nXHJcbiAgICAgICAgICAgIGlmIChtYXNrRmxhZykge1xyXG4gICAgICAgICAgICAgICAgbWFza01hbmFnZXIuc2hvd0xvYWRpbmcobnVsbCwgXCJtb2R1bGVcIik7XHJcbiAgICAgICAgICAgICAgICBtYXNrRmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGFmdGVyLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgLy8g5bey57uP5omT5byA5LiU5LiN5piv5b2T5YmN5qih5Z2X77yM5YWI5YWz6Zet5b2T5YmN5qih5Z2X5Yiw55uu5qCH5qih5Z2X5LmL6Ze055qE5omA5pyJ5qih5Z2XXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAxLCBsZW4gPSBhZnRlci5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZShhZnRlcltpXVswXSwgZGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8g5pyA5ZCO5YWz6Zet5b2T5YmN5qih5Z2X77yM5Lul5a6e546w5LuO5b2T5YmN5qih5Z2X55u05o6l6Lez5Zue5Yiw55uu5qCH5qih5Z2XXHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoYWZ0ZXJbMF1bMF0sIGRhdGEpO1xyXG4gICAgICAgICAgICAvLyDlhbPpl63moIfor4bnrKZcclxuICAgICAgICAgICAgdGhpcy5fb3BlbmluZyA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyDlhbPpl63moIfor4bnrKZcclxuICAgICAgICAgICAgdGhpcy5fb3BlbmluZyA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5YWz6Zet5qih5Z2X77yM5Y+q5pyJ5YWz6Zet55qE5piv5b2T5YmN5qih5Z2X5pe25omN5Lya6Kem5Y+Rb25EZWFjdGl2YXRl5ZKMb25BY3RpdmF0Ze+8jOWQpuWImeWPquS8muinpuWPkW9uQ2xvc2VcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0lNb2R1bGVDb25zdHJ1Y3RvcnxzdHJpbmd9IGNsc09yTmFtZSDmqKHlnZfnsbvlnovmiJblkI3np7BcclxuICAgICAqIEBwYXJhbSB7Kn0gW2RhdGFdIOWPguaVsFxyXG4gICAgICogQG1lbWJlcm9mIE1vZHVsZU1hbmFnZXJcclxuICAgICAqL1xyXG4gICAgTW9kdWxlTWFuYWdlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoY2xzT3JOYW1lLCBkYXRhKSB7XHJcbiAgICAgICAgLy8g5aaC5p6c5piv5a2X56ym5Liy5YiZ6I635Y+W5byV55SoXHJcbiAgICAgICAgdmFyIGNscyA9ICh0eXBlb2YgY2xzT3JOYW1lID09IFwic3RyaW5nXCIgPyB0aGlzLl9tb2R1bGVEaWN0W2Nsc09yTmFtZV0gOiBjbHNPck5hbWUpO1xyXG4gICAgICAgIC8vIOmdnuepuuWIpOaWrVxyXG4gICAgICAgIGlmICghY2xzKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgLy8g5pWw6YeP5Yik5pat77yM5LiN6Laz5LiA5Liq5qih5Z2X5pe25LiN5YWz6ZetXHJcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlQ291bnQgPD0gMSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIC8vIOWtmOWcqOaAp+WIpOaWrVxyXG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuZ2V0SW5kZXgoY2xzKTtcclxuICAgICAgICBpZiAoaW5kZXggPCAwKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgLy8g5Y+W5Yiw55uu5qCH5qih5Z2XXHJcbiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMuX21vZHVsZVN0YWNrW2luZGV4XVsxXTtcclxuICAgICAgICAvLyDlpoLmnpzmmK/lvZPliY3mqKHlnZfvvIzliJnpnIDopoHosIPnlKhvbkRlYWN0aXZhdGXlkoxvbkFjdGl2YXRl5o6l5Y+j77yM5ZCm5YiZ5LiN55SoXHJcbiAgICAgICAgaWYgKGluZGV4ID09IDApIHtcclxuICAgICAgICAgICAgLy8g5pWw5o2u5YWI6KGMXHJcbiAgICAgICAgICAgIHRoaXMuX21vZHVsZVN0YWNrLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIC8vIOiOt+WPluWJjeS4gOS4quaooeWdl1xyXG4gICAgICAgICAgICB2YXIgdG8gPSB0aGlzLl9tb2R1bGVTdGFja1swXTtcclxuICAgICAgICAgICAgdmFyIHRvTW9kdWxlID0gdG8gJiYgdG9bMV07XHJcbiAgICAgICAgICAgIC8vIOiwg+eUqG9uRGVhY3RpdmF0ZeaOpeWPo1xyXG4gICAgICAgICAgICB0aGlzLmRlYWN0aXZhdGVNb2R1bGUodGFyZ2V0LCB0byAmJiB0b1swXSwgZGF0YSk7XHJcbiAgICAgICAgICAgIC8vIOiwg+eUqG9uQ2xvc2XmjqXlj6NcclxuICAgICAgICAgICAgdGFyZ2V0Lm9uQ2xvc2UoZGF0YSk7XHJcbiAgICAgICAgICAgIC8vIOiwg+eUqG9uQWN0aXZhdGXmjqXlj6NcclxuICAgICAgICAgICAgdGhpcy5hY3RpdmF0ZU1vZHVsZSh0b01vZHVsZSAmJiB0b01vZHVsZSwgY2xzLCBkYXRhKTtcclxuICAgICAgICAgICAgLy8g5rS+5Y+R5raI5oGvXHJcbiAgICAgICAgICAgIGNvcmUuZGlzcGF0Y2goTW9kdWxlTWVzc2FnZS5NT0RVTEVfQ0hBTkdFLCB0byAmJiB0b1swXSwgY2xzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIOaVsOaNruWFiOihjFxyXG4gICAgICAgICAgICB0aGlzLl9tb2R1bGVTdGFjay5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAvLyDosIPnlKhvbkNsb3Nl5o6l5Y+jXHJcbiAgICAgICAgICAgIHRhcmdldC5vbkNsb3NlKGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBNb2R1bGVNYW5hZ2VyID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgSW5qZWN0YWJsZVxyXG4gICAgXSwgTW9kdWxlTWFuYWdlcik7XHJcbiAgICByZXR1cm4gTW9kdWxlTWFuYWdlcjtcclxufSgpKTtcclxuZXhwb3J0IGRlZmF1bHQgTW9kdWxlTWFuYWdlcjtcclxuLyoqIOWGjemineWkluWvvOWHuuS4gOS4quWNleS+iyAqL1xyXG5leHBvcnQgdmFyIG1vZHVsZU1hbmFnZXIgPSBjb3JlLmdldEluamVjdChNb2R1bGVNYW5hZ2VyKTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL21vZHVsZS9Nb2R1bGVNYW5hZ2VyLmpzXG4vLyBtb2R1bGUgaWQgPSA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn07XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiLi4vLi4vY29yZS9pbmplY3Rvci9JbmplY3RvclwiO1xyXG5pbXBvcnQgeyBjb3JlIH0gZnJvbSBcIi4uLy4uL2NvcmUvQ29yZVwiO1xyXG5pbXBvcnQgeyBsb2FkIH0gZnJvbSBcIi4uLy4uL3V0aWxzL0hUVFBVdGlsXCI7XHJcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi4vdmVyc2lvbi9WZXJzaW9uXCI7XHJcbi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0xMC0yNlxyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0xMC0yNlxyXG4gKlxyXG4gKiDotYTmupDnrqHnkIblmahcclxuKi9cclxudmFyIEFzc2V0c01hbmFnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBc3NldHNNYW5hZ2VyKCkge1xyXG4gICAgICAgIHRoaXMuX2tleURpY3QgPSB7fTtcclxuICAgICAgICB0aGlzLl9hc3NldHNEaWN0ID0ge307XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIEFzc2V0c01hbmFnZXIucHJvdG90eXBlLmNvbmZpZ1BhdGggPSBmdW5jdGlvbiAoYXJnMSwgYXJnMikge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYXJnMSA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2tleURpY3RbYXJnMV0gPSBhcmcyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGFyZzEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2tleURpY3Rba2V5XSA9IGFyZzFba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPlui1hOa6kO+8jOWQjOatpeeahO+8jOS4lOWmguaenOaJvuS4jeWIsOi1hOa6kOW5tuS4jeS8muinpuWPkeWKoOi9vVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlPclBhdGgg6LWE5rqQ55qE55+t5ZCN56ew5oiW6Lev5b6EXHJcbiAgICAgKiBAcmV0dXJucyB7Kn1cclxuICAgICAqIEBtZW1iZXJvZiBBc3NldHNNYW5hZ2VyXHJcbiAgICAgKi9cclxuICAgIEFzc2V0c01hbmFnZXIucHJvdG90eXBlLmdldEFzc2V0cyA9IGZ1bmN0aW9uIChrZXlPclBhdGgpIHtcclxuICAgICAgICB2YXIgcGF0aCA9IHRoaXMuX2tleURpY3Rba2V5T3JQYXRoXSB8fCBrZXlPclBhdGg7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Fzc2V0c0RpY3RbcGF0aF07XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDliqDovb3otYTmupDvvIzlpoLmnpzlt7LliqDovb3ov4fliJnlkIzmraXlm57osIPvvIzlpoLmnpzmnKrliqDovb3liJnliqDovb3lkI7lvILmraXlm57osINcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0ga2V5T3JQYXRoIOi1hOa6kOefreWQjeensOaIlui1hOa6kOi3r+W+hFxyXG4gICAgICogQHBhcmFtIHsoYXNzZXRzPzphbnl8YW55W10pPT52b2lkfSBjb21wbGV0ZSDlrozmiJDlm57osIPvvIzlpoLmnpzliqDovb3lpLHotKXliJnlj4LmlbDmmK/kuKpFcnJvcuWvueixoVxyXG4gICAgICogQHBhcmFtIHtYTUxIdHRwUmVxdWVzdFJlc3BvbnNlVHlwZX0gW3Jlc3BvbnNlVHlwZV0g5Yqg6L2957G75Z6LXHJcbiAgICAgKiBAcGFyYW0geyhrZXlPclBhdGg/OnN0cmluZywgYXNzZXRzPzphbnkpPT52b2lkfSBbb25lQ29tcGxldGVdIOS4gOS4qui1hOa6kOWKoOi9veWujOavleS8muiwg+eUqOi/meS4quWbnuiwg++8jOWmguaenOacieeahOivneOAguS7heWcqGtleU9yUGF0aOaYr+aVsOe7hOaDheWGteS4i+eUn+aViFxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKiBAbWVtYmVyb2YgQXNzZXRzTWFuYWdlclxyXG4gICAgICovXHJcbiAgICBBc3NldHNNYW5hZ2VyLnByb3RvdHlwZS5sb2FkQXNzZXRzID0gZnVuY3Rpb24gKGtleU9yUGF0aCwgY29tcGxldGUsIHJlc3BvbnNlVHlwZSwgb25lQ29tcGxldGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIC8vIOmdnuepuuWIpOaWrVxyXG4gICAgICAgIGlmICgha2V5T3JQYXRoKSB7XHJcbiAgICAgICAgICAgIGNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g6I635Y+W6Lev5b6EXHJcbiAgICAgICAgaWYgKGtleU9yUGF0aCBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICAgIC8vIOS9v+eUqOWJr+acrO+8jOmYsuatouS/ruaUueWOn+Wni+aVsOe7hFxyXG4gICAgICAgICAgICB2YXIgdGVtcCA9IGtleU9yUGF0aC5jb25jYXQoKTtcclxuICAgICAgICAgICAgLy8g5piv5Liq5pWw57uE77yM6L2s5o2i5oiQ5Y2V5LiA5ZCN56ew5oiW5a+56LGhXHJcbiAgICAgICAgICAgIHZhciByZXN1bHRzID0gW107XHJcbiAgICAgICAgICAgIHZhciBjdXJLZXk7XHJcbiAgICAgICAgICAgIHZhciBvbkdldE9uZSA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIC8vIOiusOW9lee7k+aenFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAvLyDosIPnlKjlm57osINcclxuICAgICAgICAgICAgICAgIG9uZUNvbXBsZXRlICYmIG9uZUNvbXBsZXRlKGN1cktleSwgcmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIC8vIOiOt+WPluS4i+S4gOS4qlxyXG4gICAgICAgICAgICAgICAgZ2V0T25lKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZhciBnZXRPbmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGVtcC5sZW5ndGggPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlKHJlc3VsdHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VyS2V5ID0gdGVtcC5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmxvYWRBc3NldHMoY3VyS2V5LCBvbkdldE9uZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGdldE9uZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8g5piv5Y2V5LiA5ZCN56ew5oiW5a+56LGhXHJcbiAgICAgICAgICAgIHZhciBwYXRoID0gdGhpcy5fa2V5RGljdFtrZXlPclBhdGhdIHx8IGtleU9yUGF0aDtcclxuICAgICAgICAgICAgLy8g6I635Y+W5YC8XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX2Fzc2V0c0RpY3RbcGF0aF07XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAvLyDmraPlnKjliqDovb3kuK3vvIznrYnlvoXkuYtcclxuICAgICAgICAgICAgICAgIHZhbHVlLnB1c2goY29tcGxldGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDlt7Lnu4/liqDovb3ov4fkuobvvIznm7TmjqXov5Tlm55cclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlKHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIOayoeacieWwseWOu+WKoOi9vVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXNzZXRzRGljdFtwYXRoXSA9IHZhbHVlID0gW2NvbXBsZXRlXTtcclxuICAgICAgICAgICAgICAgIGxvYWQoe1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogdmVyc2lvbi53cmFwSGFzaFVybChwYXRoKSxcclxuICAgICAgICAgICAgICAgICAgICB1c2VDRE46IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiByZXNwb25zZVR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgb25SZXNwb25zZTogZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDorrDlvZXnu5PmnpxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2Fzc2V0c0RpY3RbcGF0aF0gPSByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOmAmuefpeWQhOS4quWbnuiwg1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHZhbHVlXzEgPSB2YWx1ZTsgX2kgPCB2YWx1ZV8xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSB2YWx1ZV8xW19pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXIocmVzdWx0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcjogZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDnp7vpmaTnu5PmnpxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF90aGlzLl9hc3NldHNEaWN0W3BhdGhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDpgJrnn6XlkITkuKrlm57osINcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCB2YWx1ZV8yID0gdmFsdWU7IF9pIDwgdmFsdWVfMi5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYW5kbGVyID0gdmFsdWVfMltfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyKGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBBc3NldHNNYW5hZ2VyID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgSW5qZWN0YWJsZVxyXG4gICAgXSwgQXNzZXRzTWFuYWdlcik7XHJcbiAgICByZXR1cm4gQXNzZXRzTWFuYWdlcjtcclxufSgpKTtcclxuZXhwb3J0IGRlZmF1bHQgQXNzZXRzTWFuYWdlcjtcclxuLyoqIOWGjemineWkluWvvOWHuuS4gOS4quWNleS+iyAqL1xyXG5leHBvcnQgdmFyIGFzc2V0c01hbmFnZXIgPSBjb3JlLmdldEluamVjdChBc3NldHNNYW5hZ2VyKTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL2Fzc2V0cy9Bc3NldHNNYW5hZ2VyLmpzXG4vLyBtb2R1bGUgaWQgPSA5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCB7IGNvcmUgfSBmcm9tIFwiLi4vLi4vY29yZS9Db3JlXCI7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiLi4vLi4vY29yZS9pbmplY3Rvci9JbmplY3RvclwiO1xyXG5pbXBvcnQgTWVzc2FnZSBmcm9tIFwiLi4vLi4vY29yZS9tZXNzYWdlL01lc3NhZ2VcIjtcclxuaW1wb3J0IHsgd3JhcENvbnN0cnVjdCwgbGlzdGVuQ29uc3RydWN0LCBsaXN0ZW5EaXNwb3NlLCBnZXRDb25zdHJ1Y3RvciB9IGZyb20gXCIuLi8uLi91dGlscy9Db25zdHJ1Y3RVdGlsXCI7XHJcbmltcG9ydCBSZXNwb25zZURhdGEgZnJvbSBcIi4uL25ldC9SZXNwb25zZURhdGFcIjtcclxuaW1wb3J0IHsgbmV0TWFuYWdlciB9IGZyb20gXCIuLi9uZXQvTmV0TWFuYWdlclwiO1xyXG5pbXBvcnQgeyBicmlkZ2VNYW5hZ2VyIH0gZnJvbSBcIi4uL2JyaWRnZS9CcmlkZ2VNYW5hZ2VyXCI7XHJcbmltcG9ydCBNZWRpYXRvciBmcm9tIFwiLi4vbWVkaWF0b3IvTWVkaWF0b3JcIjtcclxuaW1wb3J0IHsgbW9kdWxlTWFuYWdlciB9IGZyb20gXCIuLi9tb2R1bGUvTW9kdWxlTWFuYWdlclwiO1xyXG5pbXBvcnQgeyBkZWNvcmF0ZVRoaXMgfSBmcm9tIFwiLi4vLi4vY29yZS9nbG9iYWwvUGF0Y2hcIjtcclxuaW1wb3J0IERpY3Rpb25hcnkgZnJvbSBcIi4uLy4uL3V0aWxzL0RpY3Rpb25hcnlcIjtcclxuaW1wb3J0ICogYXMgQmluZFV0aWwgZnJvbSBcIi4vQmluZFV0aWxcIjtcclxuaW1wb3J0IHsgc2VhcmNoVUkgfSBmcm9tIFwiLi9CaW5kVXRpbFwiO1xyXG5pbXBvcnQgXCJyZWZsZWN0LW1ldGFkYXRhXCI7XHJcbi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0wOS0xOVxyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0wOS0xOVxyXG4gKlxyXG4gKiDotJ/otKPms6jlhaXnmoTmqKHlnZdcclxuKi9cclxuLyoqIOWumuS5ieaVsOaNruaooeWei++8jOaUr+aMgeWunuS+i+azqOWFpe+8jOW5tuS4lOiHqui6q+S5n+S8muiiq+azqOWFpSAqL1xyXG5leHBvcnQgZnVuY3Rpb24gTW9kZWxDbGFzcygpIHtcclxuICAgIHZhciBhcmdzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIC8vIOi9rOiwg0luamVjdGFibGXmlrnms5VcclxuICAgIGlmICh0aGlzID09PSBkZWNvcmF0ZVRoaXMpIHtcclxuICAgICAgICB2YXIgY2xzID0gd3JhcENvbnN0cnVjdChhcmdzWzBdKTtcclxuICAgICAgICBJbmplY3RhYmxlLmNhbGwodGhpcywgY2xzKTtcclxuICAgICAgICByZXR1cm4gY2xzO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IEluamVjdGFibGUuYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChyZWFsQ2xzKSB7XHJcbiAgICAgICAgICAgIHJlYWxDbHMgPSB3cmFwQ29uc3RydWN0KHJlYWxDbHMpO1xyXG4gICAgICAgICAgICByZXN1bHQuY2FsbCh0aGlzLCByZWFsQ2xzKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlYWxDbHM7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG4vKiog5a6a5LmJ55WM6Z2i5Lit5LuL6ICF77yM5pSv5oyB5a6e5L6L5rOo5YWl77yM5bm25Y+v5qC55o2u5omA6LWL5pi+56S65a+56LGh6Ieq5Yqo6LCD5pW05omA5L2/55So55qE6KGo546w5bGC5qGlICovXHJcbmV4cG9ydCBmdW5jdGlvbiBNZWRpYXRvckNsYXNzKGNscykge1xyXG4gICAgLy8g5Yik5pat5LiA5LiLTWVkaWF0b3LmmK/lkKbmnIlkaXNwb3Nl5pa55rOV77yM5rKh5pyJ55qE6K+d5by55LiA5Liq6K2m5ZGKXHJcbiAgICBpZiAoIWNscy5wcm90b3R5cGUuZGlzcG9zZSlcclxuICAgICAgICBjb25zb2xlLndhcm4oXCJNZWRpYXRvcltcIiArIGNsc1tcIm5hbWVcIl0gKyBcIl3kuI3lhbfmnIlkaXNwb3Nl5pa55rOV77yM5Y+v6IO95Lya6YCg5oiQ5YaF5a2Y6Zeu6aKY77yM6K+36K6p6K+lTWVkaWF0b3Llrp7njrBJRGlzcG9zYWJsZeaOpeWPo1wiKTtcclxuICAgIC8vIOebkeWQrOWunuS+i+WMllxyXG4gICAgbGlzdGVuQ29uc3RydWN0KGNscywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgLy8g5pu/5o2ic2V0U2tpbuaWueazlVxyXG4gICAgICAgIHZhciAkc2tpbjtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoaW5zdGFuY2UsIFwic2tpblwiLCB7XHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJHNraW47XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDorrDlvZXlgLxcclxuICAgICAgICAgICAgICAgICRza2luID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAvLyDmoLnmja5za2lu57G75Z6L6YCJ5Y+W6KGo546w5bGC5qGlXHJcbiAgICAgICAgICAgICAgICB0aGlzLmJyaWRnZSA9IGJyaWRnZU1hbmFnZXIuZ2V0QnJpZGdlQnlTa2luKHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gd3JhcENvbnN0cnVjdChjbHMpO1xyXG59XHJcbi8qKiDlrprkuYnmqKHlnZfvvIzmlK/mjIHlrp7kvovms6jlhaUgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIE1vZHVsZUNsYXNzKGNscykge1xyXG4gICAgLy8g5Yik5pat5LiA5LiLTW9kdWxl5piv5ZCm5pyJZGlzcG9zZeaWueazle+8jOayoeacieeahOivneW8ueS4gOS4quitpuWRilxyXG4gICAgaWYgKCFjbHMucHJvdG90eXBlLmRpc3Bvc2UpXHJcbiAgICAgICAgY29uc29sZS53YXJuKFwiTW9kdWxlW1wiICsgY2xzW1wibmFtZVwiXSArIFwiXeS4jeWFt+aciWRpc3Bvc2Xmlrnms5XvvIzlj6/og73kvJrpgKDmiJDlhoXlrZjpl67popjvvIzor7forqnor6VNb2R1bGXlrp7njrBJRGlzcG9zYWJsZeaOpeWPo1wiKTtcclxuICAgIC8vIOWMheijheexu1xyXG4gICAgdmFyIHdyYXBwZXJDbHMgPSB3cmFwQ29uc3RydWN0KGNscyk7XHJcbiAgICAvLyDms6jlhozmqKHlnZdcclxuICAgIG1vZHVsZU1hbmFnZXIucmVnaXN0ZXJNb2R1bGUod3JhcHBlckNscyk7XHJcbiAgICAvLyDov5Tlm57ljIXoo4XnsbtcclxuICAgIHJldHVybiB3cmFwcGVyQ2xzO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBNZXNzYWdlSGFuZGxlcih0YXJnZXQsIGtleSkge1xyXG4gICAgaWYgKGtleSkge1xyXG4gICAgICAgIHZhciBkZWZzID0gUmVmbGVjdC5nZXRNZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIHRhcmdldCwga2V5KTtcclxuICAgICAgICB2YXIgcmVzQ2xhc3MgPSBkZWZzWzBdO1xyXG4gICAgICAgIGlmICghKHJlc0NsYXNzLnByb3RvdHlwZSBpbnN0YW5jZW9mIE1lc3NhZ2UpKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJATWVzc2FnZUhhbmRsZXLoo4XppbDlmajoo4XppbDnmoTmlrnms5XnmoTpppbkuKrlj4LmlbDlv4XpobvmmK9NZXNzYWdlXCIpO1xyXG4gICAgICAgIGRvTWVzc2FnZUhhbmRsZXIodGFyZ2V0LmNvbnN0cnVjdG9yLCBrZXksIHJlc0NsYXNzLCB0cnVlKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAocHJvdG90eXBlLCBwcm9wZXJ0eUtleSwgZGVzY3JpcHRvcikge1xyXG4gICAgICAgICAgICBkb01lc3NhZ2VIYW5kbGVyKHByb3RvdHlwZS5jb25zdHJ1Y3RvciwgcHJvcGVydHlLZXksIHRhcmdldCwgdHJ1ZSk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG47XHJcbmV4cG9ydCBmdW5jdGlvbiBHbG9iYWxNZXNzYWdlSGFuZGxlcih0YXJnZXQsIGtleSkge1xyXG4gICAgaWYgKGtleSkge1xyXG4gICAgICAgIHZhciBkZWZzID0gUmVmbGVjdC5nZXRNZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIHRhcmdldCwga2V5KTtcclxuICAgICAgICB2YXIgcmVzQ2xhc3MgPSBkZWZzWzBdO1xyXG4gICAgICAgIGlmICghKHJlc0NsYXNzLnByb3RvdHlwZSBpbnN0YW5jZW9mIE1lc3NhZ2UpKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJAR2xvYmFsTWVzc2FnZUhhbmRsZXLoo4XppbDlmajoo4XppbDnmoTmlrnms5XnmoTpppbkuKrlj4LmlbDlv4XpobvmmK9NZXNzYWdlXCIpO1xyXG4gICAgICAgIGRvTWVzc2FnZUhhbmRsZXIodGFyZ2V0LmNvbnN0cnVjdG9yLCBrZXksIHJlc0NsYXNzLCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHByb3RvdHlwZSwgcHJvcGVydHlLZXksIGRlc2NyaXB0b3IpIHtcclxuICAgICAgICAgICAgZG9NZXNzYWdlSGFuZGxlcihwcm90b3R5cGUuY29uc3RydWN0b3IsIHByb3BlcnR5S2V5LCB0YXJnZXQsIGZhbHNlKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbjtcclxuZnVuY3Rpb24gZG9NZXNzYWdlSGFuZGxlcihjbHMsIGtleSwgdHlwZSwgaW5Nb2R1bGUpIHtcclxuICAgIC8vIOebkeWQrOWunuS+i+WMllxyXG4gICAgbGlzdGVuQ29uc3RydWN0KGNscywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgaWYgKGluc3RhbmNlIGluc3RhbmNlb2YgTWVkaWF0b3IpIHtcclxuICAgICAgICAgICAgLy8g5aaC5p6c5pivTWVkaWF0b3LvvIzliJnpnIDopoHnrYnliLDooqvmiZjnrqHlkI7lho3miafooYzms6jlhoxcclxuICAgICAgICAgICAgYWRkRGVsZWdhdGVIYW5kbGVyKGluc3RhbmNlLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IGluTW9kdWxlID8gaW5zdGFuY2UgOiBjb3JlO1xyXG4gICAgICAgICAgICAgICAgb2JzZXJ2YWJsZS5saXN0ZW4odHlwZSwgaW5zdGFuY2Vba2V5XSwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBvYnNlcnZhYmxlID0gaW5Nb2R1bGUgPyBpbnN0YW5jZSA6IGNvcmU7XHJcbiAgICAgICAgICAgIG9ic2VydmFibGUubGlzdGVuKHR5cGUsIGluc3RhbmNlW2tleV0sIGluc3RhbmNlKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIC8vIOebkeWQrOmUgOavgVxyXG4gICAgbGlzdGVuRGlzcG9zZShjbHMsIGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gaW5Nb2R1bGUgPyBpbnN0YW5jZSA6IGNvcmU7XHJcbiAgICAgICAgb2JzZXJ2YWJsZS51bmxpc3Rlbih0eXBlLCBpbnN0YW5jZVtrZXldLCBpbnN0YW5jZSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gUmVzcG9uc2VIYW5kbGVyKHRhcmdldCwga2V5KSB7XHJcbiAgICBpZiAoa2V5KSB7XHJcbiAgICAgICAgdmFyIGRlZnMgPSBSZWZsZWN0LmdldE1ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgdGFyZ2V0LCBrZXkpO1xyXG4gICAgICAgIHZhciByZXNDbGFzcyA9IGRlZnNbMF07XHJcbiAgICAgICAgaWYgKCEocmVzQ2xhc3MucHJvdG90eXBlIGluc3RhbmNlb2YgUmVzcG9uc2VEYXRhKSlcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwi5peg5Y+C5pWwQFJlc3BvbnNlSGFuZGxlcuijhemlsOWZqOijhemlsOeahOaWueazleeahOmmluS4quWPguaVsOW/hemhu+aYr1Jlc3BvbnNlRGF0YVwiKTtcclxuICAgICAgICBkb1Jlc3BvbnNlSGFuZGxlcih0YXJnZXQuY29uc3RydWN0b3IsIGtleSwgZGVmc1swXSwgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHByb3RvdHlwZSwgcHJvcGVydHlLZXksIGRlc2NyaXB0b3IpIHtcclxuICAgICAgICAgICAgZG9SZXNwb25zZUhhbmRsZXIocHJvdG90eXBlLmNvbnN0cnVjdG9yLCBwcm9wZXJ0eUtleSwgdGFyZ2V0LCB0cnVlKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBHbG9iYWxSZXNwb25zZUhhbmRsZXIodGFyZ2V0LCBrZXkpIHtcclxuICAgIGlmIChrZXkpIHtcclxuICAgICAgICB2YXIgZGVmcyA9IFJlZmxlY3QuZ2V0TWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCB0YXJnZXQsIGtleSk7XHJcbiAgICAgICAgdmFyIHJlc0NsYXNzID0gZGVmc1swXTtcclxuICAgICAgICBpZiAoIShyZXNDbGFzcy5wcm90b3R5cGUgaW5zdGFuY2VvZiBSZXNwb25zZURhdGEpKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLml6Dlj4LmlbBAR2xvYmFsUmVzcG9uc2VIYW5kbGVy6KOF6aWw5Zmo6KOF6aWw55qE5pa55rOV55qE6aaW5Liq5Y+C5pWw5b+F6aG75pivUmVzcG9uc2VEYXRhXCIpO1xyXG4gICAgICAgIGRvUmVzcG9uc2VIYW5kbGVyKHRhcmdldC5jb25zdHJ1Y3Rvciwga2V5LCBkZWZzWzBdLCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHByb3RvdHlwZSwgcHJvcGVydHlLZXksIGRlc2NyaXB0b3IpIHtcclxuICAgICAgICAgICAgZG9SZXNwb25zZUhhbmRsZXIocHJvdG90eXBlLmNvbnN0cnVjdG9yLCBwcm9wZXJ0eUtleSwgdGFyZ2V0LCBmYWxzZSk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBkb1Jlc3BvbnNlSGFuZGxlcihjbHMsIGtleSwgdHlwZSwgaW5Nb2R1bGUpIHtcclxuICAgIC8vIOebkeWQrOWunuS+i+WMllxyXG4gICAgbGlzdGVuQ29uc3RydWN0KGNscywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgaWYgKGluc3RhbmNlIGluc3RhbmNlb2YgTWVkaWF0b3IpIHtcclxuICAgICAgICAgICAgLy8g5aaC5p6c5pivTWVkaWF0b3LvvIzliJnpnIDopoHnrYnliLDooqvmiZjnrqHlkI7lho3miafooYzms6jlhoxcclxuICAgICAgICAgICAgYWRkRGVsZWdhdGVIYW5kbGVyKGluc3RhbmNlLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBuZXRNYW5hZ2VyLmxpc3RlblJlc3BvbnNlKHR5cGUsIGluc3RhbmNlW2tleV0sIGluc3RhbmNlLCBmYWxzZSwgKGluTW9kdWxlID8gaW5zdGFuY2Uub2JzZXJ2YWJsZSA6IHVuZGVmaW5lZCkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5ldE1hbmFnZXIubGlzdGVuUmVzcG9uc2UodHlwZSwgaW5zdGFuY2Vba2V5XSwgaW5zdGFuY2UsIGZhbHNlLCAoaW5Nb2R1bGUgPyBpbnN0YW5jZS5vYnNlcnZhYmxlIDogdW5kZWZpbmVkKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICAvLyDnm5HlkKzplIDmr4FcclxuICAgIGxpc3RlbkRpc3Bvc2UoY2xzLCBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICBuZXRNYW5hZ2VyLnVubGlzdGVuUmVzcG9uc2UodHlwZSwgaW5zdGFuY2Vba2V5XSwgaW5zdGFuY2UsIGZhbHNlLCAoaW5Nb2R1bGUgPyBpbnN0YW5jZS5vYnNlcnZhYmxlIDogdW5kZWZpbmVkKSk7XHJcbiAgICB9KTtcclxufVxyXG52YXIgZGVsZWdhdGVIYW5kbGVyRGljdCA9IG5ldyBEaWN0aW9uYXJ5KCk7XHJcbmZ1bmN0aW9uIGFkZERlbGVnYXRlSGFuZGxlcihpbnN0YW5jZSwgaGFuZGxlcikge1xyXG4gICAgaWYgKCFpbnN0YW5jZSlcclxuICAgICAgICByZXR1cm47XHJcbiAgICB2YXIgaGFuZGxlcnMgPSBkZWxlZ2F0ZUhhbmRsZXJEaWN0LmdldChpbnN0YW5jZSk7XHJcbiAgICBpZiAoIWhhbmRsZXJzKVxyXG4gICAgICAgIGRlbGVnYXRlSGFuZGxlckRpY3Quc2V0KGluc3RhbmNlLCBoYW5kbGVycyA9IFtdKTtcclxuICAgIGlmIChoYW5kbGVycy5pbmRleE9mKGhhbmRsZXIpIDwgMClcclxuICAgICAgICBoYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xyXG59XHJcbi8qKiDlnKhNb2R1bGXlhoXmiZjnrqFNZWRpYXRvciAqL1xyXG5leHBvcnQgZnVuY3Rpb24gRGVsZWdhdGVNZWRpYXRvcihwcm90b3R5cGUsIHByb3BlcnR5S2V5KSB7XHJcbiAgICBpZiAocHJvdG90eXBlLmRlbGVnYXRlTWVkaWF0b3IgaW5zdGFuY2VvZiBGdW5jdGlvbiAmJiBwcm90b3R5cGUudW5kZWxlZ2F0ZU1lZGlhdG9yIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcclxuICAgICAgICAvLyDnm5HlkKzlrp7kvovljJZcclxuICAgICAgICBsaXN0ZW5Db25zdHJ1Y3QocHJvdG90eXBlLmNvbnN0cnVjdG9yLCBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgLy8g5a6e5L6L5YyWXHJcbiAgICAgICAgICAgIHZhciBtZWRpYXRvciA9IGluc3RhbmNlW3Byb3BlcnR5S2V5XTtcclxuICAgICAgICAgICAgaWYgKG1lZGlhdG9yID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjbHMgPSBSZWZsZWN0LmdldE1ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgcHJvdG90eXBlLCBwcm9wZXJ0eUtleSk7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZVtwcm9wZXJ0eUtleV0gPSBtZWRpYXRvciA9IG5ldyBjbHMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyDotYvlgLzmiYDlsZ7mqKHlnZdcclxuICAgICAgICAgICAgbWVkaWF0b3JbXCJfZGVwZW5kTW9kdWxlSW5zdGFuY2VcIl0gPSBpbnN0YW5jZTtcclxuICAgICAgICAgICAgbWVkaWF0b3JbXCJfZGVwZW5kTW9kdWxlXCJdID0gZ2V0Q29uc3RydWN0b3IocHJvdG90eXBlLmNvbnN0cnVjdG9yKTtcclxuICAgICAgICAgICAgLy8g5omn6KGM5Zue6LCDXHJcbiAgICAgICAgICAgIHZhciBoYW5kbGVycyA9IGRlbGVnYXRlSGFuZGxlckRpY3QuZ2V0KG1lZGlhdG9yKTtcclxuICAgICAgICAgICAgaWYgKGhhbmRsZXJzKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGhhbmRsZXJzXzEgPSBoYW5kbGVyczsgX2kgPCBoYW5kbGVyc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBoYW5kbGVyID0gaGFuZGxlcnNfMVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcihtZWRpYXRvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyDnp7vpmaTorrDlvZVcclxuICAgICAgICAgICAgICAgIGRlbGVnYXRlSGFuZGxlckRpY3QuZGVsZXRlKG1lZGlhdG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIOebkeWQrOmUgOavgVxyXG4gICAgICAgIGxpc3RlbkRpc3Bvc2UocHJvdG90eXBlLmNvbnN0cnVjdG9yLCBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgdmFyIG1lZGlhdG9yID0gaW5zdGFuY2VbcHJvcGVydHlLZXldO1xyXG4gICAgICAgICAgICBpZiAobWVkaWF0b3IpIHtcclxuICAgICAgICAgICAgICAgIC8vIOenu+mZpOaJgOWxnuaooeWdl1xyXG4gICAgICAgICAgICAgICAgbWVkaWF0b3JbXCJfZGVwZW5kTW9kdWxlSW5zdGFuY2VcIl0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICBtZWRpYXRvcltcIl9kZXBlbmRNb2R1bGVcIl0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAvLyDnp7vpmaTlrp7kvotcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlW3Byb3BlcnR5S2V5XSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIOevoeaUueWxnuaAp1xyXG4gICAgICAgIHZhciBtZWRpYXRvcjtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lZGlhdG9yO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IG1lZGlhdG9yKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIC8vIOWPlua2iOaJmOeuoeS4reS7i+iAhVxyXG4gICAgICAgICAgICAgICAgaWYgKG1lZGlhdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bmRlbGVnYXRlTWVkaWF0b3IobWVkaWF0b3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8g6K6+572u5Lit5LuL6ICFXHJcbiAgICAgICAgICAgICAgICBtZWRpYXRvciA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgLy8g5omY566h5paw55qE5Lit5LuL6ICFXHJcbiAgICAgICAgICAgICAgICBpZiAobWVkaWF0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlbGVnYXRlTWVkaWF0b3IobWVkaWF0b3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG52YXIgb25PcGVuRGljdCA9IG5ldyBEaWN0aW9uYXJ5KCk7XHJcbmZ1bmN0aW9uIGxpc3Rlbk9uT3Blbihwcm90b3R5cGUsIHByb3BlcnR5S2V5LCBiZWZvcmUsIGFmdGVyKSB7XHJcbiAgICBsaXN0ZW5Db25zdHJ1Y3QocHJvdG90eXBlLmNvbnN0cnVjdG9yLCBmdW5jdGlvbiAobWVkaWF0b3IpIHtcclxuICAgICAgICAvLyDnr6HmlLlvbk9wZW7mlrnms5VcclxuICAgICAgICB2YXIgb3JpRnVuYyA9IG1lZGlhdG9yLmhhc093blByb3BlcnR5KFwib25PcGVuXCIpID8gbWVkaWF0b3Iub25PcGVuIDogbnVsbDtcclxuICAgICAgICBtZWRpYXRvci5vbk9wZW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8g5rOo5YaM5Yiw5a2X5YW45LitXHJcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSBtZWRpYXRvcltwcm9wZXJ0eUtleV07XHJcbiAgICAgICAgICAgIC8vIOiwg+eUqOWbnuiwg1xyXG4gICAgICAgICAgICBiZWZvcmUgJiYgYmVmb3JlKG1lZGlhdG9yKTtcclxuICAgICAgICAgICAgLy8g5oGi5aSN5Y6f5aeL5pa55rOVXHJcbiAgICAgICAgICAgIGlmIChvcmlGdW5jKVxyXG4gICAgICAgICAgICAgICAgbWVkaWF0b3Iub25PcGVuID0gb3JpRnVuYztcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgZGVsZXRlIG1lZGlhdG9yLm9uT3BlbjtcclxuICAgICAgICAgICAgLy8g6LCD55So5Y6f5aeL5pa55rOVXHJcbiAgICAgICAgICAgIG1lZGlhdG9yLm9uT3Blbi5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgICAgICAgICAgLy8g6LCD55So5Zue6LCDXHJcbiAgICAgICAgICAgIGFmdGVyICYmIGFmdGVyKG1lZGlhdG9yKTtcclxuICAgICAgICAgICAgLy8g6YCS5YeP56+h5pS55qyh5pWwXHJcbiAgICAgICAgICAgIHZhciBjb3VudCA9IG9uT3BlbkRpY3QuZ2V0KG1lZGlhdG9yKSAtIDE7XHJcbiAgICAgICAgICAgIG9uT3BlbkRpY3Quc2V0KG1lZGlhdG9yLCBjb3VudCk7XHJcbiAgICAgICAgICAgIC8vIOWIpOaWreaYr+WQpuaJgOaciW9uT3BlbumDveiwg+eUqOWujOavle+8jOWmguaenOWujOavleS6hu+8jOWImeWQr+WKqOe8luivkei/h+eoi1xyXG4gICAgICAgICAgICBpZiAoY291bnQgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8g56e76Zmk5pWw5o2uXHJcbiAgICAgICAgICAgICAgICBvbk9wZW5EaWN0LmRlbGV0ZShtZWRpYXRvcik7XHJcbiAgICAgICAgICAgICAgICAvLyDlhajosIPnlKjlrozmr5XkuobvvIzmjInlsYLnuqfpobrluo/nlLHmtYXlhaXmt7HnvJbor5FcclxuICAgICAgICAgICAgICAgIHZhciBiaW5kVGFyZ2V0cyA9IG1lZGlhdG9yLmJpbmRUYXJnZXRzO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZGVwdGggaW4gYmluZFRhcmdldHMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGljdCA9IGJpbmRUYXJnZXRzW2RlcHRoXTtcclxuICAgICAgICAgICAgICAgICAgICBkaWN0LmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkgeyByZXR1cm4gQmluZFV0aWwuY29tcGlsZShtZWRpYXRvciwgdGFyZ2V0KTsgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIOiusOW9lW9uT3BlbuevoeaUueasoeaVsFxyXG4gICAgICAgIHZhciBjb3VudCA9IG9uT3BlbkRpY3QuZ2V0KG1lZGlhdG9yKSB8fCAwO1xyXG4gICAgICAgIG9uT3BlbkRpY3Quc2V0KG1lZGlhdG9yLCBjb3VudCArIDEpO1xyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIOiOt+WPluaYvuekuuWvueixoeWcqG1lZGlhdG9yLnNraW7kuK3nmoTltYzlpZflsYLnuqdcclxuICpcclxuICogQHBhcmFtIHtJTWVkaWF0b3J9IG1lZGlhdG9yIOS4reS7i+iAhVxyXG4gKiBAcGFyYW0geyp9IHRhcmdldCDnm67moIfmmL7npLrlr7nosaFcclxuICogQHJldHVybnMge251bWJlcn1cclxuICovXHJcbmZ1bmN0aW9uIGdldERlcHRoKG1lZGlhdG9yLCB0YXJnZXQpIHtcclxuICAgIHZhciBza2luID0gbWVkaWF0b3Iuc2tpbjtcclxuICAgIHZhciBicmlkZ2UgPSBtZWRpYXRvci5icmlkZ2U7XHJcbiAgICB2YXIgZGVwdGggPSAwO1xyXG4gICAgaWYgKGJyaWRnZS5pc015U2tpbih0YXJnZXQpKSB7XHJcbiAgICAgICAgd2hpbGUgKHRhcmdldCAmJiB0YXJnZXQgIT09IHNraW4pIHtcclxuICAgICAgICAgICAgZGVwdGgrKztcclxuICAgICAgICAgICAgdGFyZ2V0ID0gYnJpZGdlLmdldFBhcmVudCh0YXJnZXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDlpoLmnpzmmL7npLrlr7nosaHmmK/msqHmnInmoLnnmoTvvIzmiJbogIXkuI3lnKhza2lu55qE5pi+56S65qCR5Lit77yM5YiZ6L+U5ZueMFxyXG4gICAgICAgIGlmICghdGFyZ2V0KVxyXG4gICAgICAgICAgICBkZXB0aCA9IDA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGVwdGg7XHJcbn1cclxuZnVuY3Rpb24gc2VhcmNoVUlEZXB0aCh2YWx1ZXMsIG1lZGlhdG9yLCB0YXJnZXQsIGNhbGxiYWNrLCBhZGRyZXNzaW5nKSB7XHJcbiAgICBpZiAoYWRkcmVzc2luZyA9PT0gdm9pZCAwKSB7IGFkZHJlc3NpbmcgPSBmYWxzZTsgfVxyXG4gICAgLy8g6I635Y+W5pi+56S65bGC57qnXHJcbiAgICB2YXIgZGVwdGggPSBnZXREZXB0aChtZWRpYXRvciwgdGFyZ2V0KTtcclxuICAgIC8vIOWmguaenOacieS4reaWree8luivkeWImeWwhumBjeWOhueahOW3peS9nOaOqOi/n+WIsOS4reaWremHjeWQr+WQju+8jOWQpuWImeebtOaOpeW8gOWni+mBjeWOhlxyXG4gICAgdmFyIHN0b3BMZWZ0SGFuZGxlcnMgPSB0YXJnZXQuX19zdG9wX2xlZnRfaGFuZGxlcnNfXztcclxuICAgIGlmIChzdG9wTGVmdEhhbmRsZXJzKVxyXG4gICAgICAgIHN0b3BMZWZ0SGFuZGxlcnMucHVzaChoYW5kbGVyKTtcclxuICAgIGVsc2VcclxuICAgICAgICBoYW5kbGVyKHRhcmdldCwgbWVkaWF0b3IuYmluZFRhcmdldHMsIHN0b3BMZWZ0SGFuZGxlcnMpO1xyXG4gICAgZnVuY3Rpb24gaGFuZGxlcih0YXJnZXQsIGJpbmRUYXJnZXRzLCBsZWZ0SGFuZGxlcnMpIHtcclxuICAgICAgICB2YXIgaW5kZXggPSAtMTtcclxuICAgICAgICBpZiAobGVmdEhhbmRsZXJzKVxyXG4gICAgICAgICAgICBpbmRleCA9IGxlZnRIYW5kbGVycy5pbmRleE9mKGhhbmRsZXIpO1xyXG4gICAgICAgIC8vIOmBjeWOhue7keWumueahOebruagh++8jOWwhue8luivkeaMh+S7pOe7keWumuWIsOebruagh+i6q+S4iu+8jOiAjOS4jeaYr+aMh+S7pOaJgOWcqOeahOaYvuekuuWvueixoei6q+S4ilxyXG4gICAgICAgIHNlYXJjaFVJKHZhbHVlcywgdGFyZ2V0LCBmdW5jdGlvbiAodGFyZ2V0LCBuYW1lLCBleHAsIGRlcHRoKSB7XHJcbiAgICAgICAgICAgIGlmIChhZGRyZXNzaW5nKVxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0W25hbWVdO1xyXG4gICAgICAgICAgICAvLyDorrDlvZXnvJbor5Hnm67moIfliLBiaW5kVGFyZ2V0c+S4rVxyXG4gICAgICAgICAgICB2YXIgZGljdCA9IGJpbmRUYXJnZXRzW2RlcHRoXTtcclxuICAgICAgICAgICAgaWYgKCFkaWN0KVxyXG4gICAgICAgICAgICAgICAgYmluZFRhcmdldHNbZGVwdGhdID0gZGljdCA9IG5ldyBEaWN0aW9uYXJ5KCk7XHJcbiAgICAgICAgICAgIGRpY3Quc2V0KHRhcmdldCwgdGFyZ2V0KTtcclxuICAgICAgICAgICAgLy8g6LCD55So5Zue6LCDXHJcbiAgICAgICAgICAgIGNhbGxiYWNrKHRhcmdldCwgbmFtZSwgZXhwLCBsZWZ0SGFuZGxlcnMsIGluZGV4KTtcclxuICAgICAgICB9LCBkZXB0aCk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gQmluZFZhbHVlKGFyZzEsIGFyZzIpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAocHJvdG90eXBlLCBwcm9wZXJ0eUtleSkge1xyXG4gICAgICAgIGxpc3Rlbk9uT3Blbihwcm90b3R5cGUsIHByb3BlcnR5S2V5LCBmdW5jdGlvbiAobWVkaWF0b3IpIHtcclxuICAgICAgICAgICAgLy8g57uE57uH5Y+C5pWw5a2X5YW4XHJcbiAgICAgICAgICAgIHZhciB1aURpY3Q7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnMSA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICB1aURpY3QgPSB7fTtcclxuICAgICAgICAgICAgICAgIHVpRGljdFthcmcxXSA9IGFyZzI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB1aURpY3QgPSBhcmcxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIOmBjeWOhue7keWumueahOebruagh++8jOWwhue8luivkeaMh+S7pOe7keWumuWIsOebruagh+i6q+S4iu+8jOiAjOS4jeaYr+aMh+S7pOaJgOWcqOeahOaYvuekuuWvueixoei6q+S4ilxyXG4gICAgICAgICAgICBzZWFyY2hVSURlcHRoKHVpRGljdCwgbWVkaWF0b3IsIG1lZGlhdG9yW3Byb3BlcnR5S2V5XSwgZnVuY3Rpb24gKHRhcmdldCwgbmFtZSwgZXhwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDmt7vliqDnvJbor5HmjIfku6RcclxuICAgICAgICAgICAgICAgIEJpbmRVdGlsLnB1c2hDb21waWxlQ29tbWFuZCh0YXJnZXQsIEJpbmRVdGlsLmNvbXBpbGVWYWx1ZSwgbmFtZSwgZXhwKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIEJpbmRGdW5jKGFyZzEsIGFyZzIpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAocHJvdG90eXBlLCBwcm9wZXJ0eUtleSkge1xyXG4gICAgICAgIGxpc3Rlbk9uT3Blbihwcm90b3R5cGUsIHByb3BlcnR5S2V5LCBmdW5jdGlvbiAobWVkaWF0b3IpIHtcclxuICAgICAgICAgICAgLy8g57uE57uH5Y+C5pWw5a2X5YW4XHJcbiAgICAgICAgICAgIHZhciBmdW5jRGljdDtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmcxID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIGZ1bmNEaWN0ID0ge307XHJcbiAgICAgICAgICAgICAgICBmdW5jRGljdFthcmcxXSA9IGFyZzI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmdW5jRGljdCA9IGFyZzE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8g6YGN5Y6G57uR5a6a55qE55uu5qCH77yM5bCG57yW6K+R5oyH5Luk57uR5a6a5Yiw55uu5qCH6Lqr5LiK77yM6ICM5LiN5piv5oyH5Luk5omA5Zyo55qE5pi+56S65a+56LGh6Lqr5LiKXHJcbiAgICAgICAgICAgIHNlYXJjaFVJRGVwdGgoZnVuY0RpY3QsIG1lZGlhdG9yLCBtZWRpYXRvcltwcm9wZXJ0eUtleV0sIGZ1bmN0aW9uICh0YXJnZXQsIG5hbWUsIGFyZ0V4cHMpIHtcclxuICAgICAgICAgICAgICAgIC8vIOe7n+S4gOWPguaVsOexu+Wei+S4uuWtl+espuS4suaVsOe7hFxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmdFeHBzID09IFwic3RyaW5nXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgYXJnRXhwcyA9IFthcmdFeHBzXTtcclxuICAgICAgICAgICAgICAgIC8vIOa3u+WKoOe8luivkeaMh+S7pFxyXG4gICAgICAgICAgICAgICAgQmluZFV0aWwucHVzaENvbXBpbGVDb21tYW5kLmFwcGx5KEJpbmRVdGlsLCBbdGFyZ2V0LCBCaW5kVXRpbC5jb21waWxlRnVuYywgbmFtZV0uY29uY2F0KGFyZ0V4cHMpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIEJpbmRPbihhcmcxLCBhcmcyLCBhcmczKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHByb3RvdHlwZSwgcHJvcGVydHlLZXkpIHtcclxuICAgICAgICBsaXN0ZW5Pbk9wZW4ocHJvdG90eXBlLCBwcm9wZXJ0eUtleSwgZnVuY3Rpb24gKG1lZGlhdG9yKSB7XHJcbiAgICAgICAgICAgIC8vIOiOt+WPlue8luivkeWQr+WKqOebruagh1xyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gbWVkaWF0b3JbcHJvcGVydHlLZXldO1xyXG4gICAgICAgICAgICAvLyDnu4Tnu4flj4LmlbDlrZflhbhcclxuICAgICAgICAgICAgdmFyIGV2dERpY3Q7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnMSA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICBldnREaWN0ID0ge307XHJcbiAgICAgICAgICAgICAgICBpZiAoYXJnMykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOaMh+WumuS6hlVJ5a+56LGh77yM5YWI5Y675a+75om+XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWVEaWN0ID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZURpY3RbYXJnMV0gPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaFVJKG5hbWVEaWN0LCB0YXJnZXQsIGZ1bmN0aW9uICh1aSwga2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSB1aVtrZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2dERpY3RbYXJnMl0gPSBhcmczO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZ0RGljdFthcmcxXSA9IGFyZzI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBldnREaWN0ID0gYXJnMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyDpgY3ljobnu5HlrprnmoTnm67moIfvvIzlsIbnvJbor5HmjIfku6Tnu5HlrprliLDnm67moIfouqvkuIrvvIzogIzkuI3mmK/mjIfku6TmiYDlnKjnmoTmmL7npLrlr7nosaHouqvkuIpcclxuICAgICAgICAgICAgc2VhcmNoVUlEZXB0aChldnREaWN0LCBtZWRpYXRvciwgdGFyZ2V0LCBmdW5jdGlvbiAodGFyZ2V0LCB0eXBlLCBleHApIHtcclxuICAgICAgICAgICAgICAgIC8vIOa3u+WKoOe8luivkeaMh+S7pFxyXG4gICAgICAgICAgICAgICAgQmluZFV0aWwucHVzaENvbXBpbGVDb21tYW5kKHRhcmdldCwgQmluZFV0aWwuY29tcGlsZU9uLCB0eXBlLCBleHApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gQmluZElmKGFyZzEsIGFyZzIpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAocHJvdG90eXBlLCBwcm9wZXJ0eUtleSkge1xyXG4gICAgICAgIGxpc3Rlbk9uT3Blbihwcm90b3R5cGUsIHByb3BlcnR5S2V5LCBmdW5jdGlvbiAobWVkaWF0b3IpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmcxID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmICghYXJnMikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOayoeacieaMh+WumuWvu+WdgOi3r+W+hO+8jOWwseaYr+imgeaTjeS9nOW9k+WJjeWvueixoe+8jOS9huS5n+imgee7j+i/h+S4gOasoXNlYXJjaFVJRGVwdGjmk43kvZxcclxuICAgICAgICAgICAgICAgICAgICBzZWFyY2hVSURlcHRoKHsgcjogMTMgfSwgbWVkaWF0b3IsIG1lZGlhdG9yW3Byb3BlcnR5S2V5XSwgZnVuY3Rpb24gKHRhcmdldCwgbmFtZSwgZXhwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOa3u+WKoOe8luivkeaMh+S7pFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBCaW5kVXRpbC5wdXNoQ29tcGlsZUNvbW1hbmQodGFyZ2V0LCBCaW5kVXRpbC5jb21waWxlSWYsIGFyZzEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5oyH5a6a5LqG5a+75Z2A6Lev5b6E77yM6ZyA6KaB5a+75Z2AXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVpRGljdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHVpRGljdFthcmcxXSA9IGFyZzI7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g6YGN5Y6G57uR5a6a55qE55uu5qCH77yM5bCG57yW6K+R5oyH5Luk57uR5a6a5Yiw55uu5qCH6Lqr5LiK77yM6ICM5LiN5piv5oyH5Luk5omA5Zyo55qE5pi+56S65a+56LGh6Lqr5LiKXHJcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoVUlEZXB0aCh1aURpY3QsIG1lZGlhdG9yLCBtZWRpYXRvcltwcm9wZXJ0eUtleV0sIGZ1bmN0aW9uICh0YXJnZXQsIG5hbWUsIGV4cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDmt7vliqDnvJbor5HmjIfku6RcclxuICAgICAgICAgICAgICAgICAgICAgICAgQmluZFV0aWwucHVzaENvbXBpbGVDb21tYW5kKHRhcmdldCwgQmluZFV0aWwuY29tcGlsZUlmLCBleHApO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8g6YGN5Y6G57uR5a6a55qE55uu5qCH77yM5bCG57yW6K+R5oyH5Luk57uR5a6a5Yiw55uu5qCH6Lqr5LiK77yM6ICM5LiN5piv5oyH5Luk5omA5Zyo55qE5pi+56S65a+56LGh6Lqr5LiKXHJcbiAgICAgICAgICAgICAgICBzZWFyY2hVSURlcHRoKGFyZzEsIG1lZGlhdG9yLCBtZWRpYXRvcltwcm9wZXJ0eUtleV0sIGZ1bmN0aW9uICh0YXJnZXQsIG5hbWUsIGV4cCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOa3u+WKoOe8luivkeaMh+S7pFxyXG4gICAgICAgICAgICAgICAgICAgIEJpbmRVdGlsLnB1c2hDb21waWxlQ29tbWFuZCh0YXJnZXQsIEJpbmRVdGlsLmNvbXBpbGVJZiwgZXhwKTtcclxuICAgICAgICAgICAgICAgIH0sIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIEJpbmRGb3IoYXJnMSwgYXJnMikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwcm90b3R5cGUsIHByb3BlcnR5S2V5KSB7XHJcbiAgICAgICAgbGlzdGVuT25PcGVuKHByb3RvdHlwZSwgcHJvcGVydHlLZXksIGZ1bmN0aW9uIChtZWRpYXRvcikge1xyXG4gICAgICAgICAgICAvLyDlj5bliLDnvJbor5Hnm67moIflr7nosaFcclxuICAgICAgICAgICAgdmFyIHRhcmdldCA9IG1lZGlhdG9yW3Byb3BlcnR5S2V5XTtcclxuICAgICAgICAgICAgLy8g5byA5aeL6LWL5YC85oyH5LukXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnMSA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWFyZzIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDmsqHmnInmjIflrprlr7vlnYDot6/lvoTvvIzlsLHmmK/opoHmk43kvZzlvZPliY3lr7nosaHvvIzkvYbkuZ/opoHnu4/ov4fkuIDmrKFzZWFyY2hVSURlcHRo5pON5L2cXHJcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoVUlEZXB0aCh7IHI6IDEzIH0sIG1lZGlhdG9yLCBtZWRpYXRvcltwcm9wZXJ0eUtleV0sIGZ1bmN0aW9uICh0YXJnZXQsIG5hbWUsIGV4cCwgbGVmdEhhbmRsZXJzLCBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDmt7vliqDnvJbor5HmjIfku6RcclxuICAgICAgICAgICAgICAgICAgICAgICAgQmluZFV0aWwucHVzaENvbXBpbGVDb21tYW5kKHRhcmdldCwgQmluZFV0aWwuY29tcGlsZUZvciwgYXJnMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOiuvue9ruS4reaWree8luivkVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQuX19zdG9wX2xlZnRfaGFuZGxlcnNfXyA9IGxlZnRIYW5kbGVycyA/IGxlZnRIYW5kbGVycy5zcGxpY2UoaW5kZXggKyAxLCBsZWZ0SGFuZGxlcnMubGVuZ3RoIC0gaW5kZXggLSAxKSA6IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5oyH5a6a5LqG5a+75Z2A6Lev5b6E77yM6ZyA6KaB5a+75Z2AXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVpRGljdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHVpRGljdFthcmcxXSA9IGFyZzI7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g6YGN5Y6G57uR5a6a55qE55uu5qCH77yM5bCG57yW6K+R5oyH5Luk57uR5a6a5Yiw55uu5qCH6Lqr5LiK77yM6ICM5LiN5piv5oyH5Luk5omA5Zyo55qE5pi+56S65a+56LGh6Lqr5LiKXHJcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoVUlEZXB0aCh1aURpY3QsIG1lZGlhdG9yLCB0YXJnZXQsIGZ1bmN0aW9uICh0YXJnZXQsIG5hbWUsIGV4cCwgbGVmdEhhbmRsZXJzLCBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDmt7vliqDnvJbor5HmjIfku6RcclxuICAgICAgICAgICAgICAgICAgICAgICAgQmluZFV0aWwucHVzaENvbXBpbGVDb21tYW5kKHRhcmdldCwgQmluZFV0aWwuY29tcGlsZUZvciwgZXhwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g6K6+572u5Lit5pat57yW6K+RXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5fX3N0b3BfbGVmdF9oYW5kbGVyc19fID0gbGVmdEhhbmRsZXJzID8gbGVmdEhhbmRsZXJzLnNwbGljZShpbmRleCArIDEsIGxlZnRIYW5kbGVycy5sZW5ndGggLSBpbmRleCAtIDEpIDogW107XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyDpgY3ljobnu5HlrprnmoTnm67moIfvvIzlsIbnvJbor5HmjIfku6Tnu5HlrprliLDnm67moIfouqvkuIrvvIzogIzkuI3mmK/mjIfku6TmiYDlnKjnmoTmmL7npLrlr7nosaHouqvkuIpcclxuICAgICAgICAgICAgICAgIHNlYXJjaFVJRGVwdGgoYXJnMSwgbWVkaWF0b3IsIHRhcmdldCwgZnVuY3Rpb24gKHRhcmdldCwgbmFtZSwgZXhwLCBsZWZ0SGFuZGxlcnMsIGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5re75Yqg57yW6K+R5oyH5LukXHJcbiAgICAgICAgICAgICAgICAgICAgQmluZFV0aWwucHVzaENvbXBpbGVDb21tYW5kKHRhcmdldCwgQmluZFV0aWwuY29tcGlsZUZvciwgZXhwKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyDorr7nva7kuK3mlq3nvJbor5FcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuX19zdG9wX2xlZnRfaGFuZGxlcnNfXyA9IGxlZnRIYW5kbGVycyA/IGxlZnRIYW5kbGVycy5zcGxpY2UoaW5kZXggKyAxLCBsZWZ0SGFuZGxlcnMubGVuZ3RoIC0gaW5kZXggLSAxKSA6IFtdO1xyXG4gICAgICAgICAgICAgICAgfSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gZG9CaW5kTWVzc2FnZShtZWRpYXRvciwgdGFyZ2V0LCB0eXBlLCB1aURpY3QsIG9ic2VydmFibGUpIHtcclxuICAgIHNlYXJjaFVJRGVwdGgodWlEaWN0LCBtZWRpYXRvciwgdGFyZ2V0LCBmdW5jdGlvbiAodGFyZ2V0LCBuYW1lLCBleHApIHtcclxuICAgICAgICBCaW5kVXRpbC5wdXNoQ29tcGlsZUNvbW1hbmQodGFyZ2V0LCBCaW5kVXRpbC5jb21waWxlTWVzc2FnZSwgdHlwZSwgbmFtZSwgZXhwLCBvYnNlcnZhYmxlKTtcclxuICAgIH0pO1xyXG59XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIEJpbmRNZXNzYWdlKGFyZzEsIGFyZzIpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAocHJvdG90eXBlLCBwcm9wZXJ0eUtleSkge1xyXG4gICAgICAgIGxpc3Rlbk9uT3Blbihwcm90b3R5cGUsIHByb3BlcnR5S2V5LCBmdW5jdGlvbiAobWVkaWF0b3IpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmcxID09IFwic3RyaW5nXCIgfHwgYXJnMSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDmmK/nsbvlnovmlrnlvI9cclxuICAgICAgICAgICAgICAgIGRvQmluZE1lc3NhZ2UobWVkaWF0b3IsIG1lZGlhdG9yW3Byb3BlcnR5S2V5XSwgYXJnMSwgYXJnMiwgbWVkaWF0b3Iub2JzZXJ2YWJsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyDmmK/lrZflhbjmlrnlvI9cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHR5cGUgaW4gYXJnMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRvQmluZE1lc3NhZ2UobWVkaWF0b3IsIG1lZGlhdG9yW3Byb3BlcnR5S2V5XSwgdHlwZSwgYXJnMVt0eXBlXSwgbWVkaWF0b3Iub2JzZXJ2YWJsZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gQmluZEdsb2JhbE1lc3NhZ2UoYXJnMSwgYXJnMikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwcm90b3R5cGUsIHByb3BlcnR5S2V5KSB7XHJcbiAgICAgICAgbGlzdGVuT25PcGVuKHByb3RvdHlwZSwgcHJvcGVydHlLZXksIGZ1bmN0aW9uIChtZWRpYXRvcikge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGFyZzEgPT0gXCJzdHJpbmdcIiB8fCBhcmcxIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIC8vIOaYr+exu+Wei+aWueW8j1xyXG4gICAgICAgICAgICAgICAgZG9CaW5kTWVzc2FnZShtZWRpYXRvciwgbWVkaWF0b3JbcHJvcGVydHlLZXldLCBhcmcxLCBhcmcyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIOaYr+Wtl+WFuOaWueW8j1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdHlwZSBpbiBhcmcxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9CaW5kTWVzc2FnZShtZWRpYXRvciwgbWVkaWF0b3JbcHJvcGVydHlLZXldLCB0eXBlLCBhcmcxW3R5cGVdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBkb0JpbmRSZXNwb25zZShtZWRpYXRvciwgdGFyZ2V0LCB0eXBlLCB1aURpY3QsIG9ic2VydmFibGUpIHtcclxuICAgIHNlYXJjaFVJRGVwdGgodWlEaWN0LCBtZWRpYXRvciwgdGFyZ2V0LCBmdW5jdGlvbiAodGFyZ2V0LCBuYW1lLCBleHApIHtcclxuICAgICAgICBCaW5kVXRpbC5wdXNoQ29tcGlsZUNvbW1hbmQodGFyZ2V0LCBCaW5kVXRpbC5jb21waWxlUmVzcG9uc2UsIHR5cGUsIG5hbWUsIGV4cCwgb2JzZXJ2YWJsZSk7XHJcbiAgICB9KTtcclxufVxyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBCaW5kUmVzcG9uc2UoYXJnMSwgYXJnMikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwcm90b3R5cGUsIHByb3BlcnR5S2V5KSB7XHJcbiAgICAgICAgLy8gUmVzcG9uc2XpnIDopoHlnKhvbk9wZW7kuYvlkI7miafooYzvvIzlm6DkuLrlj6/og73mnInliJ3lp4vljJbmtojmga/pnIDopoHnu5HlrprvvIzopoHlnKhvbk9wZW7lkI7mnInkuoZ2aWV3TW9kZWzlho3pppbmrKHmm7TmlrDmmL7npLpcclxuICAgICAgICBsaXN0ZW5Pbk9wZW4ocHJvdG90eXBlLCBwcm9wZXJ0eUtleSwgZnVuY3Rpb24gKG1lZGlhdG9yKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnMSA9PSBcInN0cmluZ1wiIHx8IGFyZzEgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xyXG4gICAgICAgICAgICAgICAgLy8g5piv57G75Z6L5pa55byPXHJcbiAgICAgICAgICAgICAgICBkb0JpbmRSZXNwb25zZShtZWRpYXRvciwgbWVkaWF0b3JbcHJvcGVydHlLZXldLCBhcmcxLCBhcmcyLCBtZWRpYXRvci5vYnNlcnZhYmxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIOaYr+Wtl+WFuOaWueW8j1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdHlwZSBpbiBhcmcxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9CaW5kUmVzcG9uc2UobWVkaWF0b3IsIG1lZGlhdG9yW3Byb3BlcnR5S2V5XSwgdHlwZSwgYXJnMVt0eXBlXSwgbWVkaWF0b3Iub2JzZXJ2YWJsZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gQmluZEdsb2JhbFJlc3BvbnNlKGFyZzEsIGFyZzIpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAocHJvdG90eXBlLCBwcm9wZXJ0eUtleSkge1xyXG4gICAgICAgIGxpc3Rlbk9uT3Blbihwcm90b3R5cGUsIHByb3BlcnR5S2V5LCBmdW5jdGlvbiAobWVkaWF0b3IpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmcxID09IFwic3RyaW5nXCIgfHwgYXJnMSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDmmK/nsbvlnovmlrnlvI9cclxuICAgICAgICAgICAgICAgIGRvQmluZFJlc3BvbnNlKG1lZGlhdG9yLCBtZWRpYXRvcltwcm9wZXJ0eUtleV0sIGFyZzEsIGFyZzIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8g5piv5a2X5YW45pa55byPXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB0eXBlIGluIGFyZzEpIHtcclxuICAgICAgICAgICAgICAgICAgICBkb0JpbmRSZXNwb25zZShtZWRpYXRvciwgbWVkaWF0b3JbcHJvcGVydHlLZXldLCB0eXBlLCBhcmcxW3R5cGVdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxufVxyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9lbmdpbmUvaW5qZWN0b3IvSW5qZWN0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn07XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiLi4vLi4vY29yZS9pbmplY3Rvci9JbmplY3RvclwiO1xyXG5pbXBvcnQgeyBjb3JlIH0gZnJvbSBcIi4uLy4uL2NvcmUvQ29yZVwiO1xyXG5pbXBvcnQgeyBicmlkZ2VNYW5hZ2VyIH0gZnJvbSBcIi4uL2JyaWRnZS9CcmlkZ2VNYW5hZ2VyXCI7XHJcbi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0xMC0yNVxyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0xMC0yNVxyXG4gKlxyXG4gKiDpga7nvannrqHnkIblmahcclxuKi9cclxudmFyIE1hc2tNYW5hZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTWFza01hbmFnZXIoKSB7XHJcbiAgICAgICAgdGhpcy5fZW50aXR5RGljdCA9IHt9O1xyXG4gICAgICAgIHRoaXMuX2xvYWRpbmdNYXNrRGljdCA9IHt9O1xyXG4gICAgfVxyXG4gICAgTWFza01hbmFnZXIucHJvdG90eXBlLmdldExvYWRpbmdNYXNrQ291bnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNvdW50ID0gMDtcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fbG9hZGluZ01hc2tEaWN0KSB7XHJcbiAgICAgICAgICAgIHZhciB0ZW1wID0gdGhpcy5fbG9hZGluZ01hc2tEaWN0W2tleV07XHJcbiAgICAgICAgICAgIGlmICh0ZW1wID4gMClcclxuICAgICAgICAgICAgICAgIGNvdW50ICs9IHRlbXA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb3VudDtcclxuICAgIH07XHJcbiAgICBNYXNrTWFuYWdlci5wcm90b3R5cGUucGx1c0xvYWRpbmdNYXNrQ291bnQgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgdmFyIGNvdW50ID0gdGhpcy5fbG9hZGluZ01hc2tEaWN0W2tleV0gfHwgMDtcclxuICAgICAgICBpZiAoY291bnQgPCAwKVxyXG4gICAgICAgICAgICBjb3VudCA9IDA7XHJcbiAgICAgICAgdGhpcy5fbG9hZGluZ01hc2tEaWN0W2tleV0gPSArK2NvdW50O1xyXG4gICAgICAgIHJldHVybiBjb3VudDtcclxuICAgIH07XHJcbiAgICBNYXNrTWFuYWdlci5wcm90b3R5cGUubWludXNMb2FkaW5nTWFza0NvdW50ID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHZhciBjb3VudCA9IHRoaXMuX2xvYWRpbmdNYXNrRGljdFtrZXldIHx8IDA7XHJcbiAgICAgICAgY291bnQtLTtcclxuICAgICAgICBpZiAoY291bnQgPCAwKVxyXG4gICAgICAgICAgICBjb3VudCA9IDA7XHJcbiAgICAgICAgdGhpcy5fbG9hZGluZ01hc2tEaWN0W2tleV0gPSBjb3VudDtcclxuICAgICAgICBpZiAoY291bnQgPT0gMClcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2xvYWRpbmdNYXNrRGljdFtrZXldO1xyXG4gICAgICAgIHJldHVybiBjb3VudDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOWIneWni+WMlk1hc2tVdGlsXHJcbiAgICAgKiBAcGFyYW0gdHlwZSDmiYDlsZ7ooajnjrDlsYLmoaVcclxuICAgICAqIEBwYXJhbSBlbnRpdHkg6YGu572p5a6e5L2TXHJcbiAgICAgKi9cclxuICAgIE1hc2tNYW5hZ2VyLnByb3RvdHlwZS5yZWdpc3Rlck1hc2sgPSBmdW5jdGlvbiAodHlwZSwgZW50aXR5KSB7XHJcbiAgICAgICAgdGhpcy5fZW50aXR5RGljdFt0eXBlXSA9IGVudGl0eTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOaYvuekuumBrue9qVxyXG4gICAgICovXHJcbiAgICBNYXNrTWFuYWdlci5wcm90b3R5cGUuc2hvd01hc2sgPSBmdW5jdGlvbiAoYWxwaGEpIHtcclxuICAgICAgICB2YXIgdHlwZSA9IGJyaWRnZU1hbmFnZXIuY3VycmVudEJyaWRnZS50eXBlO1xyXG4gICAgICAgIHZhciBlbnRpdHkgPSB0aGlzLl9lbnRpdHlEaWN0W3R5cGVdO1xyXG4gICAgICAgIGlmIChlbnRpdHkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyDmmL7npLrpga7nvalcclxuICAgICAgICAgICAgZW50aXR5LnNob3dNYXNrKGFscGhhKTtcclxuICAgICAgICAgICAgLy8g6LCD55So5Zue6LCDXHJcbiAgICAgICAgICAgIGVudGl0eS5tYXNrRGF0YS5vblNob3dNYXNrICYmIGVudGl0eS5tYXNrRGF0YS5vblNob3dNYXNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog6ZqQ6JeP6YGu572pXHJcbiAgICAgKi9cclxuICAgIE1hc2tNYW5hZ2VyLnByb3RvdHlwZS5oaWRlTWFzayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdHlwZSA9IGJyaWRnZU1hbmFnZXIuY3VycmVudEJyaWRnZS50eXBlO1xyXG4gICAgICAgIHZhciBlbnRpdHkgPSB0aGlzLl9lbnRpdHlEaWN0W3R5cGVdO1xyXG4gICAgICAgIGlmIChlbnRpdHkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyDosIPnlKjlm57osINcclxuICAgICAgICAgICAgZW50aXR5Lm1hc2tEYXRhLm9uSGlkZU1hc2sgJiYgZW50aXR5Lm1hc2tEYXRhLm9uSGlkZU1hc2soKTtcclxuICAgICAgICAgICAgLy8g6ZqQ6JeP6YGu572pXHJcbiAgICAgICAgICAgIGVudGl0eS5oaWRlTWFzaygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKirlvZPliY3mmK/lkKblnKjmmL7npLrpga7nvakqL1xyXG4gICAgTWFza01hbmFnZXIucHJvdG90eXBlLmlzU2hvd2luZ01hc2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHR5cGUgPSBicmlkZ2VNYW5hZ2VyLmN1cnJlbnRCcmlkZ2UudHlwZTtcclxuICAgICAgICB2YXIgZW50aXR5ID0gdGhpcy5fZW50aXR5RGljdFt0eXBlXTtcclxuICAgICAgICBpZiAoZW50aXR5ICE9IG51bGwpXHJcbiAgICAgICAgICAgIHJldHVybiBlbnRpdHkuaXNTaG93aW5nTWFzaygpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOaYvuekuuWKoOi9veWbvlxyXG4gICAgICovXHJcbiAgICBNYXNrTWFuYWdlci5wcm90b3R5cGUuc2hvd0xvYWRpbmcgPSBmdW5jdGlvbiAoYWxwaGEsIGtleSkge1xyXG4gICAgICAgIGlmIChrZXkgPT09IHZvaWQgMCkgeyBrZXkgPSBudWxsOyB9XHJcbiAgICAgICAgLy8g6Iul5b2T5YmN5L2g5rKh5pyJbG9hZGluZ+WImeaYvuekumxvYWRpbmdcclxuICAgICAgICBpZiAodGhpcy5nZXRMb2FkaW5nTWFza0NvdW50KCkgPT0gMCkge1xyXG4gICAgICAgICAgICB2YXIgdHlwZSA9IGJyaWRnZU1hbmFnZXIuY3VycmVudEJyaWRnZS50eXBlO1xyXG4gICAgICAgICAgICB2YXIgZW50aXR5ID0gdGhpcy5fZW50aXR5RGljdFt0eXBlXTtcclxuICAgICAgICAgICAgaWYgKGVudGl0eSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDmmL7npLrpga7nvalcclxuICAgICAgICAgICAgICAgIGVudGl0eS5zaG93TG9hZGluZyhhbHBoYSk7XHJcbiAgICAgICAgICAgICAgICAvLyDosIPnlKjlm57osINcclxuICAgICAgICAgICAgICAgIGVudGl0eS5tYXNrRGF0YS5vblNob3dMb2FkaW5nICYmIGVudGl0eS5tYXNrRGF0YS5vblNob3dMb2FkaW5nKGVudGl0eS5sb2FkaW5nU2tpbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g5aKe6K6h5pWwXHJcbiAgICAgICAgdGhpcy5wbHVzTG9hZGluZ01hc2tDb3VudChrZXkpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog6ZqQ6JeP5Yqg6L295Zu+XHJcbiAgICAgKi9cclxuICAgIE1hc2tNYW5hZ2VyLnByb3RvdHlwZS5oaWRlTG9hZGluZyA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICBpZiAoa2V5ID09PSB2b2lkIDApIHsga2V5ID0gbnVsbDsgfVxyXG4gICAgICAgIC8vIOWHj+iuoeaVsFxyXG4gICAgICAgIHRoaXMubWludXNMb2FkaW5nTWFza0NvdW50KGtleSk7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2V0TG9hZGluZ01hc2tDb3VudCgpID09IDApIHtcclxuICAgICAgICAgICAgLy8g56e76ZmkbG9hZGluZ1xyXG4gICAgICAgICAgICB2YXIgdHlwZSA9IGJyaWRnZU1hbmFnZXIuY3VycmVudEJyaWRnZS50eXBlO1xyXG4gICAgICAgICAgICB2YXIgZW50aXR5ID0gdGhpcy5fZW50aXR5RGljdFt0eXBlXTtcclxuICAgICAgICAgICAgaWYgKGVudGl0eSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDosIPnlKjlm57osINcclxuICAgICAgICAgICAgICAgIGVudGl0eS5tYXNrRGF0YS5vbkhpZGVMb2FkaW5nICYmIGVudGl0eS5tYXNrRGF0YS5vbkhpZGVMb2FkaW5nKGVudGl0eS5sb2FkaW5nU2tpbik7XHJcbiAgICAgICAgICAgICAgICAvLyDpmpDol4/pga7nvalcclxuICAgICAgICAgICAgICAgIGVudGl0eS5oaWRlTG9hZGluZygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKuW9k+WJjeaYr+WQpuWcqOaYvuekumxvYWRpbmcqL1xyXG4gICAgTWFza01hbmFnZXIucHJvdG90eXBlLmlzU2hvd2luZ0xvYWRpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHR5cGUgPSBicmlkZ2VNYW5hZ2VyLmN1cnJlbnRCcmlkZ2UudHlwZTtcclxuICAgICAgICB2YXIgZW50aXR5ID0gdGhpcy5fZW50aXR5RGljdFt0eXBlXTtcclxuICAgICAgICBpZiAoZW50aXR5ICE9IG51bGwpXHJcbiAgICAgICAgICAgIHJldHVybiBlbnRpdHkuaXNTaG93aW5nTG9hZGluZygpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgICAvKiog5pi+56S65qih5oCB56qX5Y+j6YGu572pICovXHJcbiAgICBNYXNrTWFuYWdlci5wcm90b3R5cGUuc2hvd01vZGFsTWFzayA9IGZ1bmN0aW9uIChwb3B1cCwgYWxwaGEpIHtcclxuICAgICAgICB2YXIgdHlwZSA9IHBvcHVwLmJyaWRnZS50eXBlO1xyXG4gICAgICAgIHZhciBlbnRpdHkgPSB0aGlzLl9lbnRpdHlEaWN0W3R5cGVdO1xyXG4gICAgICAgIGlmIChlbnRpdHkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyDmmL7npLrpga7nvalcclxuICAgICAgICAgICAgZW50aXR5LnNob3dNb2RhbE1hc2socG9wdXAsIGFscGhhKTtcclxuICAgICAgICAgICAgLy8g6LCD55So5Zue6LCDXHJcbiAgICAgICAgICAgIGVudGl0eS5tYXNrRGF0YS5vblNob3dNb2RhbE1hc2sgJiYgZW50aXR5Lm1hc2tEYXRhLm9uU2hvd01vZGFsTWFzayhwb3B1cCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiDpmpDol4/mqKHmgIHnqpflj6Ppga7nvakgKi9cclxuICAgIE1hc2tNYW5hZ2VyLnByb3RvdHlwZS5oaWRlTW9kYWxNYXNrID0gZnVuY3Rpb24gKHBvcHVwKSB7XHJcbiAgICAgICAgdmFyIHR5cGUgPSBwb3B1cC5icmlkZ2UudHlwZTtcclxuICAgICAgICB2YXIgZW50aXR5ID0gdGhpcy5fZW50aXR5RGljdFt0eXBlXTtcclxuICAgICAgICBpZiAoZW50aXR5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgLy8g6LCD55So5Zue6LCDXHJcbiAgICAgICAgICAgIGVudGl0eS5tYXNrRGF0YS5vbkhpZGVNb2RhbE1hc2sgJiYgZW50aXR5Lm1hc2tEYXRhLm9uSGlkZU1vZGFsTWFzayhwb3B1cCk7XHJcbiAgICAgICAgICAgIC8vIOmakOiXj+mBrue9qVxyXG4gICAgICAgICAgICBlbnRpdHkuaGlkZU1vZGFsTWFzayhwb3B1cCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiDlvZPliY3mmK/lkKblnKjmmL7npLrmqKHmgIHnqpflj6Ppga7nvakgKi9cclxuICAgIE1hc2tNYW5hZ2VyLnByb3RvdHlwZS5pc1Nob3dpbmdNb2RhbE1hc2sgPSBmdW5jdGlvbiAocG9wdXApIHtcclxuICAgICAgICB2YXIgdHlwZSA9IHBvcHVwLmJyaWRnZS50eXBlO1xyXG4gICAgICAgIHZhciBlbnRpdHkgPSB0aGlzLl9lbnRpdHlEaWN0W3R5cGVdO1xyXG4gICAgICAgIGlmIChlbnRpdHkgIT0gbnVsbClcclxuICAgICAgICAgICAgcmV0dXJuIGVudGl0eS5pc1Nob3dpbmdNb2RhbE1hc2socG9wdXApO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgICBNYXNrTWFuYWdlciA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIEluamVjdGFibGVcclxuICAgIF0sIE1hc2tNYW5hZ2VyKTtcclxuICAgIHJldHVybiBNYXNrTWFuYWdlcjtcclxufSgpKTtcclxuZXhwb3J0IGRlZmF1bHQgTWFza01hbmFnZXI7XHJcbi8qKiDlho3pop3lpJblr7zlh7rkuIDkuKrljZXkvosgKi9cclxuZXhwb3J0IHZhciBtYXNrTWFuYWdlciA9IGNvcmUuZ2V0SW5qZWN0KE1hc2tNYW5hZ2VyKTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL21hc2svTWFza01hbmFnZXIuanNcbi8vIG1vZHVsZSBpZCA9IDExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0wOS0xOFxyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0wOS0xOFxyXG4gKlxyXG4gKiDmqKHlnZfmtojmga9cclxuKi9cclxudmFyIE1vZHVsZU1lc3NhZ2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBNb2R1bGVNZXNzYWdlKCkge1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDliIfmjaLmqKHlnZfmtojmga9cclxuICAgICAqXHJcbiAgICAgKiBAc3RhdGljXHJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAgICogQG1lbWJlcm9mIE1vZHVsZU1lc3NhZ2VcclxuICAgICAqL1xyXG4gICAgTW9kdWxlTWVzc2FnZS5NT0RVTEVfQ0hBTkdFID0gXCJtb2R1bGVDaGFuZ2VcIjtcclxuICAgIC8qKlxyXG4gICAgICog5Yqg6L295qih5Z2X5aSx6LSl5raI5oGvXHJcbiAgICAgKlxyXG4gICAgICogQHN0YXRpY1xyXG4gICAgICogQHR5cGUge3N0cmluZ31cclxuICAgICAqIEBtZW1iZXJvZiBNb2R1bGVNZXNzYWdlXHJcbiAgICAgKi9cclxuICAgIE1vZHVsZU1lc3NhZ2UuTU9EVUxFX0xPQURfQVNTRVRTX0VSUk9SID0gXCJtb2R1bGVMb2FkQXNzZXRzRXJyb3JcIjtcclxuICAgIHJldHVybiBNb2R1bGVNZXNzYWdlO1xyXG59KCkpO1xyXG5leHBvcnQgZGVmYXVsdCBNb2R1bGVNZXNzYWdlO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9lbmdpbmUvbW9kdWxlL01vZHVsZU1lc3NhZ2UuanNcbi8vIG1vZHVsZSBpZCA9IDEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn07XHJcbmltcG9ydCB7IGNvcmUgfSBmcm9tIFwiLi4vLi4vY29yZS9Db3JlXCI7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiLi4vLi4vY29yZS9pbmplY3Rvci9JbmplY3RvclwiO1xyXG5pbXBvcnQgeyB0cmltVVJMIH0gZnJvbSBcIi4uLy4uL3V0aWxzL1VSTFV0aWxcIjtcclxuLyoqXHJcbiAqIEBhdXRob3IgUmF5a2lkXHJcbiAqIEBlbWFpbCBpbml0aWFsX3JAcXEuY29tXHJcbiAqIEBjcmVhdGUgZGF0ZSAyMDE3LTA5LTIxXHJcbiAqIEBtb2RpZnkgZGF0ZSAyMDE3LTA5LTIxXHJcbiAqXHJcbiAqIOeuoeeQhuaWh+S7tuWTiOW4jOeJiOacrOWPt1xyXG4qL1xyXG52YXIgVmVyc2lvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFZlcnNpb24oKSB7XHJcbiAgICAgICAgdGhpcy5faGFzaERpY3QgPSB7fTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5Yid5aeL5YyW5ZOI5biM54mI5pys5bel5YW3XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHsoKT0+dm9pZH0gaGFuZGxlciDlm57osINcclxuICAgICAqIEBtZW1iZXJvZiBWZXJzaW9uXHJcbiAgICAgKi9cclxuICAgIFZlcnNpb24ucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHdpbmRvd1tcIl9fT2x5bXB1c19WZXJzaW9uX2hhc2hEaWN0X19cIl0pIHtcclxuICAgICAgICAgICAgLy8g5LmL5YmN5Zyo5ZOq5Yqg6L296L+H77yM5peg6ZyA5YaN5qyh5Yqg6L2977yM55u05o6l5L2/55SoXHJcbiAgICAgICAgICAgIHRoaXMuX2hhc2hEaWN0ID0gd2luZG93W1wiX19PbHltcHVzX1ZlcnNpb25faGFzaERpY3RfX1wiXTtcclxuICAgICAgICAgICAgaGFuZGxlcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8g5Y675Yqg6L29dmVyc2lvbi5jZmdcclxuICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAod2luZG93W1wiWE1MSHR0cFJlcXVlc3RcIl0pIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvZGUgZm9yIElFNyssIEZpcmVmb3gsIENocm9tZSwgT3BlcmEsIFNhZmFyaVxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHdpbmRvd1tcIkFjdGl2ZVhPYmplY3RcIl0pIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvZGUgZm9yIElFNiwgSUU1XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0ID0gbmV3IEFjdGl2ZVhPYmplY3QoXCJNaWNyb3NvZnQuWE1MSFRUUFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyDms6jlhozlm57osIPlh73mlbBcclxuICAgICAgICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVxdWVzdCA9IGV2dC50YXJnZXQ7XHJcbiAgICAgICAgICAgICAgICAvL+WIpOaWreWvueixoeeKtuaAgeaYr+S6pOS6kuWujOaIkO+8jOaOpeaUtuacjeWKoeWZqOi/lOWbnueahOaVsOaNrlxyXG4gICAgICAgICAgICAgICAgaWYgKHJlcXVlc3QucmVhZHlTdGF0ZSA9PSA0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZU5hbWUgPSByZXF1ZXN0W1wiZmlsZU5hbWVcIl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXNwb25zZVRleHQgPSByZXF1ZXN0LnJlc3BvbnNlVGV4dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxpbmVzID0gcmVzcG9uc2VUZXh0LnNwbGl0KFwiXFxuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpIGluIGxpbmVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGluZSA9IGxpbmVzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFyciA9IGxpbmUuc3BsaXQoXCIgIFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcnIubGVuZ3RoID09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gYXJyWzFdLnN1YnN0cigyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBhcnJbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2hhc2hEaWN0W2tleV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDlnKh3aW5kb3fkuIrmjILkuIDku71cclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93W1wiX19PbHltcHVzX1ZlcnNpb25faGFzaERpY3RfX1wiXSA9IF90aGlzLl9oYXNoRGljdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyDorr7nva7ov57mjqXkv6Hmga9cclxuICAgICAgICAgICAgcmVxdWVzdC5vcGVuKFwiR0VUXCIsIFwidmVyc2lvbi5jZmc/dj1cIiArIG5ldyBEYXRlKCkuZ2V0VGltZSgpLCB0cnVlKTtcclxuICAgICAgICAgICAgLy8g5Y+R6YCB5pWw5o2u77yM5byA5aeL5ZKM5pyN5Yqh5Zmo6L+b6KGM5Lqk5LqSXHJcbiAgICAgICAgICAgIHJlcXVlc3Quc2VuZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluaWh+S7tuWTiOW4jOWAvO+8jOWmguaenOayoeacieaWh+S7tuWTiOW4jOWAvOWImei/lOWbnm51bGxcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIOaWh+S7tueahFVSTFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30g5paH5Lu255qE5ZOI5biM5YC877yM5oiW6ICFbnVsbFxyXG4gICAgICogQG1lbWJlcm9mIFZlcnNpb25cclxuICAgICAqL1xyXG4gICAgVmVyc2lvbi5wcm90b3R5cGUuZ2V0SGFzaCA9IGZ1bmN0aW9uICh1cmwpIHtcclxuICAgICAgICB1cmwgPSB0cmltVVJMKHVybCk7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgZm9yICh2YXIgcGF0aCBpbiB0aGlzLl9oYXNoRGljdCkge1xyXG4gICAgICAgICAgICBpZiAodXJsLmluZGV4T2YocGF0aCkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5faGFzaERpY3RbcGF0aF07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5bCGdXJs6L2s5o2i5Li65ZOI5biM54mI5pysdXJsXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCDljp/lp4t1cmxcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IOWTiOW4jOeJiOacrHVybFxyXG4gICAgICogQG1lbWJlcm9mIFZlcnNpb25cclxuICAgICAqL1xyXG4gICAgVmVyc2lvbi5wcm90b3R5cGUud3JhcEhhc2hVcmwgPSBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgdmFyIGhhc2ggPSB0aGlzLmdldEhhc2godXJsKTtcclxuICAgICAgICBpZiAoaGFzaCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHVybCA9IHRoaXMuam9pblZlcnNpb24odXJsLCBoYXNoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVybDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOa3u+WKoC1yX1hYWOW9ouW8j+eJiOacrOWPt1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2ZXJzaW9uIOeJiOacrOWPt++8jOS7peaVsOWtl+WSjOWwj+WGmeWtl+avjee7hOaIkFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30g5Yqg54mI5pys5Y+35ZCO55qEdXJs77yM5aaC5p6c5rKh5pyJ5p+l5Yiw54mI5pys5Y+35YiZ6L+U5Zue5Y6f5aeLdXJsXHJcbiAgICAgKiBAbWVtYmVyb2YgVmVyc2lvblxyXG4gICAgICovXHJcbiAgICBWZXJzaW9uLnByb3RvdHlwZS5qb2luVmVyc2lvbiA9IGZ1bmN0aW9uICh1cmwsIHZlcnNpb24pIHtcclxuICAgICAgICBpZiAodmVyc2lvbiA9PSBudWxsKVxyXG4gICAgICAgICAgICByZXR1cm4gdXJsO1xyXG4gICAgICAgIC8vIOWOu+aOiXZlcnNpb27kuK3nmoTpnZ7ms5XlrZfnrKZcclxuICAgICAgICB2ZXJzaW9uID0gdmVyc2lvbi5yZXBsYWNlKC9bXjAtOWEtel0rL2lnLCBcIlwiKTtcclxuICAgICAgICAvLyDmj5LlhaXniYjmnKzlj7dcclxuICAgICAgICB2YXIgcmVnID0gLygoW2EtekEtWl0rOlxcLytbXlxcL1xcPyNdK1xcLyk/W15cXD8jXSspXFwuKFteXFw/XSspKFxcPy4rKT8vO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSByZWcuZXhlYyh1cmwpO1xyXG4gICAgICAgIGlmIChyZXN1bHQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB1cmwgPSByZXN1bHRbMV0gKyBcIi1yX1wiICsgdmVyc2lvbiArIFwiLlwiICsgcmVzdWx0WzNdICsgKHJlc3VsdFs0XSB8fCBcIlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVybDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOenu+mZpC1yX1hYWOW9ouW8j+eJiOacrOWPt1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgdXJsXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSDnp7vpmaTniYjmnKzlj7flkI7nmoR1cmxcclxuICAgICAqIEBtZW1iZXJvZiBWZXJzaW9uXHJcbiAgICAgKi9cclxuICAgIFZlcnNpb24ucHJvdG90eXBlLnJlbW92ZVZlcnNpb24gPSBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgLy8g5Y675o6JLXJfWFhY54mI5pys5Y+377yM5aaC5p6c5pyJXHJcbiAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoL1xcLXJfW2EtejAtOV0rXFwuL2lnLCBcIi5cIik7XHJcbiAgICAgICAgcmV0dXJuIHVybDtcclxuICAgIH07XHJcbiAgICBWZXJzaW9uID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgSW5qZWN0YWJsZVxyXG4gICAgXSwgVmVyc2lvbik7XHJcbiAgICByZXR1cm4gVmVyc2lvbjtcclxufSgpKTtcclxuZXhwb3J0IGRlZmF1bHQgVmVyc2lvbjtcclxuLyoqIOWGjemineWkluWvvOWHuuS4gOS4quWNleS+iyAqL1xyXG5leHBvcnQgdmFyIHZlcnNpb24gPSBjb3JlLmdldEluamVjdChWZXJzaW9uKTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL3ZlcnNpb24vVmVyc2lvbi5qc1xuLy8gbW9kdWxlIGlkID0gMTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoQykgTWljcm9zb2Z0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxudmFyIFJlZmxlY3Q7XHJcbihmdW5jdGlvbiAoUmVmbGVjdCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICB2YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcclxuICAgIC8vIGZlYXR1cmUgdGVzdCBmb3IgU3ltYm9sIHN1cHBvcnRcclxuICAgIHZhciBzdXBwb3J0c1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIjtcclxuICAgIHZhciB0b1ByaW1pdGl2ZVN5bWJvbCA9IHN1cHBvcnRzU3ltYm9sICYmIHR5cGVvZiBTeW1ib2wudG9QcmltaXRpdmUgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wudG9QcmltaXRpdmUgOiBcIkBAdG9QcmltaXRpdmVcIjtcclxuICAgIHZhciBpdGVyYXRvclN5bWJvbCA9IHN1cHBvcnRzU3ltYm9sICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wuaXRlcmF0b3IgOiBcIkBAaXRlcmF0b3JcIjtcclxuICAgIHZhciBIYXNoTWFwO1xyXG4gICAgKGZ1bmN0aW9uIChIYXNoTWFwKSB7XHJcbiAgICAgICAgdmFyIHN1cHBvcnRzQ3JlYXRlID0gdHlwZW9mIE9iamVjdC5jcmVhdGUgPT09IFwiZnVuY3Rpb25cIjsgLy8gZmVhdHVyZSB0ZXN0IGZvciBPYmplY3QuY3JlYXRlIHN1cHBvcnRcclxuICAgICAgICB2YXIgc3VwcG9ydHNQcm90byA9IHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXk7IC8vIGZlYXR1cmUgdGVzdCBmb3IgX19wcm90b19fIHN1cHBvcnRcclxuICAgICAgICB2YXIgZG93bkxldmVsID0gIXN1cHBvcnRzQ3JlYXRlICYmICFzdXBwb3J0c1Byb3RvO1xyXG4gICAgICAgIC8vIGNyZWF0ZSBhbiBvYmplY3QgaW4gZGljdGlvbmFyeSBtb2RlIChhLmsuYS4gXCJzbG93XCIgbW9kZSBpbiB2OClcclxuICAgICAgICBIYXNoTWFwLmNyZWF0ZSA9IHN1cHBvcnRzQ3JlYXRlXHJcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gTWFrZURpY3Rpb25hcnkoT2JqZWN0LmNyZWF0ZShudWxsKSk7IH1cclxuICAgICAgICAgICAgOiBzdXBwb3J0c1Byb3RvXHJcbiAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE1ha2VEaWN0aW9uYXJ5KHsgX19wcm90b19fOiBudWxsIH0pOyB9XHJcbiAgICAgICAgICAgICAgICA6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE1ha2VEaWN0aW9uYXJ5KHt9KTsgfTtcclxuICAgICAgICBIYXNoTWFwLmhhcyA9IGRvd25MZXZlbFxyXG4gICAgICAgICAgICA/IGZ1bmN0aW9uIChtYXAsIGtleSkgeyByZXR1cm4gaGFzT3duLmNhbGwobWFwLCBrZXkpOyB9XHJcbiAgICAgICAgICAgIDogZnVuY3Rpb24gKG1hcCwga2V5KSB7IHJldHVybiBrZXkgaW4gbWFwOyB9O1xyXG4gICAgICAgIEhhc2hNYXAuZ2V0ID0gZG93bkxldmVsXHJcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKG1hcCwga2V5KSB7IHJldHVybiBoYXNPd24uY2FsbChtYXAsIGtleSkgPyBtYXBba2V5XSA6IHVuZGVmaW5lZDsgfVxyXG4gICAgICAgICAgICA6IGZ1bmN0aW9uIChtYXAsIGtleSkgeyByZXR1cm4gbWFwW2tleV07IH07XHJcbiAgICB9KShIYXNoTWFwIHx8IChIYXNoTWFwID0ge30pKTtcclxuICAgIC8vIExvYWQgZ2xvYmFsIG9yIHNoaW0gdmVyc2lvbnMgb2YgTWFwLCBTZXQsIGFuZCBXZWFrTWFwXHJcbiAgICB2YXIgZnVuY3Rpb25Qcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRnVuY3Rpb24pO1xyXG4gICAgdmFyIHVzZVBvbHlmaWxsID0gdHlwZW9mIHByb2Nlc3MgPT09IFwib2JqZWN0XCIgJiYgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnZbXCJSRUZMRUNUX01FVEFEQVRBX1VTRV9NQVBfUE9MWUZJTExcIl0gPT09IFwidHJ1ZVwiO1xyXG4gICAgdmFyIF9NYXAgPSAhdXNlUG9seWZpbGwgJiYgdHlwZW9mIE1hcCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBNYXAucHJvdG90eXBlLmVudHJpZXMgPT09IFwiZnVuY3Rpb25cIiA/IE1hcCA6IENyZWF0ZU1hcFBvbHlmaWxsKCk7XHJcbiAgICB2YXIgX1NldCA9ICF1c2VQb2x5ZmlsbCAmJiB0eXBlb2YgU2V0ID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFNldC5wcm90b3R5cGUuZW50cmllcyA9PT0gXCJmdW5jdGlvblwiID8gU2V0IDogQ3JlYXRlU2V0UG9seWZpbGwoKTtcclxuICAgIHZhciBfV2Vha01hcCA9ICF1c2VQb2x5ZmlsbCAmJiB0eXBlb2YgV2Vha01hcCA9PT0gXCJmdW5jdGlvblwiID8gV2Vha01hcCA6IENyZWF0ZVdlYWtNYXBQb2x5ZmlsbCgpO1xyXG4gICAgLy8gW1tNZXRhZGF0YV1dIGludGVybmFsIHNsb3RcclxuICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5LW9iamVjdC1pbnRlcm5hbC1tZXRob2RzLWFuZC1pbnRlcm5hbC1zbG90c1xyXG4gICAgdmFyIE1ldGFkYXRhID0gbmV3IF9XZWFrTWFwKCk7XHJcbiAgICAvKipcclxuICAgICAgKiBBcHBsaWVzIGEgc2V0IG9mIGRlY29yYXRvcnMgdG8gYSBwcm9wZXJ0eSBvZiBhIHRhcmdldCBvYmplY3QuXHJcbiAgICAgICogQHBhcmFtIGRlY29yYXRvcnMgQW4gYXJyYXkgb2YgZGVjb3JhdG9ycy5cclxuICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgb2JqZWN0LlxyXG4gICAgICAqIEBwYXJhbSBwcm9wZXJ0eUtleSAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBrZXkgdG8gZGVjb3JhdGUuXHJcbiAgICAgICogQHBhcmFtIGF0dHJpYnV0ZXMgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkgZGVzY3JpcHRvciBmb3IgdGhlIHRhcmdldCBrZXkuXHJcbiAgICAgICogQHJlbWFya3MgRGVjb3JhdG9ycyBhcmUgYXBwbGllZCBpbiByZXZlcnNlIG9yZGVyLlxyXG4gICAgICAqIEBleGFtcGxlXHJcbiAgICAgICpcclxuICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XHJcbiAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XHJcbiAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XHJcbiAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XHJcbiAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxyXG4gICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxyXG4gICAgICAqICAgICB9XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcclxuICAgICAgKiAgICAgRXhhbXBsZSA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9yc0FycmF5LCBFeGFtcGxlKTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IpXHJcbiAgICAgICogICAgIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9yc0FycmF5LCBFeGFtcGxlLCBcInN0YXRpY1Byb3BlcnR5XCIpO1xyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXHJcbiAgICAgICogICAgIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9yc0FycmF5LCBFeGFtcGxlLnByb3RvdHlwZSwgXCJwcm9wZXJ0eVwiKTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxyXG4gICAgICAqICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIixcclxuICAgICAgKiAgICAgICAgIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9yc0FycmF5LCBFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiLFxyXG4gICAgICAqICAgICAgICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIikpKTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcclxuICAgICAgKiAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiLFxyXG4gICAgICAqICAgICAgICAgUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzQXJyYXksIEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiLFxyXG4gICAgICAqICAgICAgICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpKSk7XHJcbiAgICAgICpcclxuICAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpIHtcclxuICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSkge1xyXG4gICAgICAgICAgICBpZiAoIUlzQXJyYXkoZGVjb3JhdG9ycykpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcclxuICAgICAgICAgICAgaWYgKCFJc09iamVjdChhdHRyaWJ1dGVzKSAmJiAhSXNVbmRlZmluZWQoYXR0cmlidXRlcykgJiYgIUlzTnVsbChhdHRyaWJ1dGVzKSlcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcclxuICAgICAgICAgICAgaWYgKElzTnVsbChhdHRyaWJ1dGVzKSlcclxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XHJcbiAgICAgICAgICAgIHJldHVybiBEZWNvcmF0ZVByb3BlcnR5KGRlY29yYXRvcnMsIHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKCFJc0FycmF5KGRlY29yYXRvcnMpKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xyXG4gICAgICAgICAgICBpZiAoIUlzQ29uc3RydWN0b3IodGFyZ2V0KSlcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcclxuICAgICAgICAgICAgcmV0dXJuIERlY29yYXRlQ29uc3RydWN0b3IoZGVjb3JhdG9ycywgdGFyZ2V0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBSZWZsZWN0LmRlY29yYXRlID0gZGVjb3JhdGU7XHJcbiAgICAvLyA0LjEuMiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKVxyXG4gICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jcmVmbGVjdC5tZXRhZGF0YVxyXG4gICAgLyoqXHJcbiAgICAgICogQSBkZWZhdWx0IG1ldGFkYXRhIGRlY29yYXRvciBmYWN0b3J5IHRoYXQgY2FuIGJlIHVzZWQgb24gYSBjbGFzcywgY2xhc3MgbWVtYmVyLCBvciBwYXJhbWV0ZXIuXHJcbiAgICAgICogQHBhcmFtIG1ldGFkYXRhS2V5IFRoZSBrZXkgZm9yIHRoZSBtZXRhZGF0YSBlbnRyeS5cclxuICAgICAgKiBAcGFyYW0gbWV0YWRhdGFWYWx1ZSBUaGUgdmFsdWUgZm9yIHRoZSBtZXRhZGF0YSBlbnRyeS5cclxuICAgICAgKiBAcmV0dXJucyBBIGRlY29yYXRvciBmdW5jdGlvbi5cclxuICAgICAgKiBAcmVtYXJrc1xyXG4gICAgICAqIElmIGBtZXRhZGF0YUtleWAgaXMgYWxyZWFkeSBkZWZpbmVkIGZvciB0aGUgdGFyZ2V0IGFuZCB0YXJnZXQga2V5LCB0aGVcclxuICAgICAgKiBtZXRhZGF0YVZhbHVlIGZvciB0aGF0IGtleSB3aWxsIGJlIG92ZXJ3cml0dGVuLlxyXG4gICAgICAqIEBleGFtcGxlXHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcclxuICAgICAgKiAgICAgQFJlZmxlY3QubWV0YWRhdGEoa2V5LCB2YWx1ZSlcclxuICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XHJcbiAgICAgICogICAgIH1cclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IsIFR5cGVTY3JpcHQgb25seSlcclxuICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XHJcbiAgICAgICogICAgICAgICBAUmVmbGVjdC5tZXRhZGF0YShrZXksIHZhbHVlKVxyXG4gICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xyXG4gICAgICAqICAgICB9XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSwgVHlwZVNjcmlwdCBvbmx5KVxyXG4gICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcclxuICAgICAgKiAgICAgICAgIEBSZWZsZWN0Lm1ldGFkYXRhKGtleSwgdmFsdWUpXHJcbiAgICAgICogICAgICAgICBwcm9wZXJ0eTtcclxuICAgICAgKiAgICAgfVxyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXHJcbiAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xyXG4gICAgICAqICAgICAgICAgQFJlZmxlY3QubWV0YWRhdGEoa2V5LCB2YWx1ZSlcclxuICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QoKSB7IH1cclxuICAgICAgKiAgICAgfVxyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxyXG4gICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcclxuICAgICAgKiAgICAgICAgIEBSZWZsZWN0Lm1ldGFkYXRhKGtleSwgdmFsdWUpXHJcbiAgICAgICogICAgICAgICBtZXRob2QoKSB7IH1cclxuICAgICAgKiAgICAgfVxyXG4gICAgICAqXHJcbiAgICAgICovXHJcbiAgICBmdW5jdGlvbiBtZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGRlY29yYXRvcih0YXJnZXQsIHByb3BlcnR5S2V5KSB7XHJcbiAgICAgICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcclxuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkgJiYgIUlzUHJvcGVydHlLZXkocHJvcGVydHlLZXkpKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xyXG4gICAgICAgICAgICBPcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHByb3BlcnR5S2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRlY29yYXRvcjtcclxuICAgIH1cclxuICAgIFJlZmxlY3QubWV0YWRhdGEgPSBtZXRhZGF0YTtcclxuICAgIC8qKlxyXG4gICAgICAqIERlZmluZSBhIHVuaXF1ZSBtZXRhZGF0YSBlbnRyeSBvbiB0aGUgdGFyZ2V0LlxyXG4gICAgICAqIEBwYXJhbSBtZXRhZGF0YUtleSBBIGtleSB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZSBtZXRhZGF0YS5cclxuICAgICAgKiBAcGFyYW0gbWV0YWRhdGFWYWx1ZSBBIHZhbHVlIHRoYXQgY29udGFpbnMgYXR0YWNoZWQgbWV0YWRhdGEuXHJcbiAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCBvbiB3aGljaCB0byBkZWZpbmUgbWV0YWRhdGEuXHJcbiAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSBmb3IgdGhlIHRhcmdldC5cclxuICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAqXHJcbiAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xyXG4gICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxyXG4gICAgICAqICAgICAgICAgLy8gc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xyXG4gICAgICAqICAgICAgICAgLy8gcHJvcGVydHk7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgICAgIGNvbnN0cnVjdG9yKHApIHsgfVxyXG4gICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZChwKSB7IH1cclxuICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cclxuICAgICAgKiAgICAgfVxyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXHJcbiAgICAgICogICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBvcHRpb25zLCBFeGFtcGxlKTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IpXHJcbiAgICAgICogICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBvcHRpb25zLCBFeGFtcGxlLCBcInN0YXRpY1Byb3BlcnR5XCIpO1xyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXHJcbiAgICAgICogICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBvcHRpb25zLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJwcm9wZXJ0eVwiKTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxyXG4gICAgICAqICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgb3B0aW9ucywgRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIik7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXHJcbiAgICAgICogICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBvcHRpb25zLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIik7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gZGVjb3JhdG9yIGZhY3RvcnkgYXMgbWV0YWRhdGEtcHJvZHVjaW5nIGFubm90YXRpb24uXHJcbiAgICAgICogICAgIGZ1bmN0aW9uIE15QW5ub3RhdGlvbihvcHRpb25zKTogRGVjb3JhdG9yIHtcclxuICAgICAgKiAgICAgICAgIHJldHVybiAodGFyZ2V0LCBrZXk/KSA9PiBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgb3B0aW9ucywgdGFyZ2V0LCBrZXkpO1xyXG4gICAgICAqICAgICB9XHJcbiAgICAgICpcclxuICAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGRlZmluZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHByb3BlcnR5S2V5KSB7XHJcbiAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpXHJcbiAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XHJcbiAgICAgICAgcmV0dXJuIE9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIHRhcmdldCwgcHJvcGVydHlLZXkpO1xyXG4gICAgfVxyXG4gICAgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YSA9IGRlZmluZU1ldGFkYXRhO1xyXG4gICAgLyoqXHJcbiAgICAgICogR2V0cyBhIHZhbHVlIGluZGljYXRpbmcgd2hldGhlciB0aGUgdGFyZ2V0IG9iamVjdCBvciBpdHMgcHJvdG90eXBlIGNoYWluIGhhcyB0aGUgcHJvdmlkZWQgbWV0YWRhdGEga2V5IGRlZmluZWQuXHJcbiAgICAgICogQHBhcmFtIG1ldGFkYXRhS2V5IEEga2V5IHVzZWQgdG8gc3RvcmUgYW5kIHJldHJpZXZlIG1ldGFkYXRhLlxyXG4gICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBvYmplY3Qgb24gd2hpY2ggdGhlIG1ldGFkYXRhIGlzIGRlZmluZWQuXHJcbiAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSBmb3IgdGhlIHRhcmdldC5cclxuICAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG1ldGFkYXRhIGtleSB3YXMgZGVmaW5lZCBvbiB0aGUgdGFyZ2V0IG9iamVjdCBvciBpdHMgcHJvdG90eXBlIGNoYWluOyBvdGhlcndpc2UsIGBmYWxzZWAuXHJcbiAgICAgICogQGV4YW1wbGVcclxuICAgICAgKlxyXG4gICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcclxuICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgbm90IHBhcnQgb2YgRVM2LCB0aG91Z2ggdGhleSBhcmUgdmFsaWQgaW4gVHlwZVNjcmlwdDpcclxuICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcclxuICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5O1xyXG4gICAgICAqXHJcbiAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cclxuICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QocCkgeyB9XHJcbiAgICAgICogICAgICAgICBtZXRob2QocCkgeyB9XHJcbiAgICAgICogICAgIH1cclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxyXG4gICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc01ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSk7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxyXG4gICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc01ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxyXG4gICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc01ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpO1xyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxyXG4gICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc01ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpO1xyXG4gICAgICAqXHJcbiAgICAgICovXHJcbiAgICBmdW5jdGlvbiBoYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xyXG4gICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpKVxyXG4gICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xyXG4gICAgICAgIHJldHVybiBPcmRpbmFyeUhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KTtcclxuICAgIH1cclxuICAgIFJlZmxlY3QuaGFzTWV0YWRhdGEgPSBoYXNNZXRhZGF0YTtcclxuICAgIC8qKlxyXG4gICAgICAqIEdldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIHRhcmdldCBvYmplY3QgaGFzIHRoZSBwcm92aWRlZCBtZXRhZGF0YSBrZXkgZGVmaW5lZC5cclxuICAgICAgKiBAcGFyYW0gbWV0YWRhdGFLZXkgQSBrZXkgdXNlZCB0byBzdG9yZSBhbmQgcmV0cmlldmUgbWV0YWRhdGEuXHJcbiAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCBvbiB3aGljaCB0aGUgbWV0YWRhdGEgaXMgZGVmaW5lZC5cclxuICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IGZvciB0aGUgdGFyZ2V0LlxyXG4gICAgICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgbWV0YWRhdGEga2V5IHdhcyBkZWZpbmVkIG9uIHRoZSB0YXJnZXQgb2JqZWN0OyBvdGhlcndpc2UsIGBmYWxzZWAuXHJcbiAgICAgICogQGV4YW1wbGVcclxuICAgICAgKlxyXG4gICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcclxuICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgbm90IHBhcnQgb2YgRVM2LCB0aG91Z2ggdGhleSBhcmUgdmFsaWQgaW4gVHlwZVNjcmlwdDpcclxuICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcclxuICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5O1xyXG4gICAgICAqXHJcbiAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cclxuICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QocCkgeyB9XHJcbiAgICAgICogICAgICAgICBtZXRob2QocCkgeyB9XHJcbiAgICAgICogICAgIH1cclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxyXG4gICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc093bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSk7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxyXG4gICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc093bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxyXG4gICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc093bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpO1xyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxyXG4gICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc093bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpO1xyXG4gICAgICAqXHJcbiAgICAgICovXHJcbiAgICBmdW5jdGlvbiBoYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xyXG4gICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpKVxyXG4gICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xyXG4gICAgICAgIHJldHVybiBPcmRpbmFyeUhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KTtcclxuICAgIH1cclxuICAgIFJlZmxlY3QuaGFzT3duTWV0YWRhdGEgPSBoYXNPd25NZXRhZGF0YTtcclxuICAgIC8qKlxyXG4gICAgICAqIEdldHMgdGhlIG1ldGFkYXRhIHZhbHVlIGZvciB0aGUgcHJvdmlkZWQgbWV0YWRhdGEga2V5IG9uIHRoZSB0YXJnZXQgb2JqZWN0IG9yIGl0cyBwcm90b3R5cGUgY2hhaW4uXHJcbiAgICAgICogQHBhcmFtIG1ldGFkYXRhS2V5IEEga2V5IHVzZWQgdG8gc3RvcmUgYW5kIHJldHJpZXZlIG1ldGFkYXRhLlxyXG4gICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBvYmplY3Qgb24gd2hpY2ggdGhlIG1ldGFkYXRhIGlzIGRlZmluZWQuXHJcbiAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSBmb3IgdGhlIHRhcmdldC5cclxuICAgICAgKiBAcmV0dXJucyBUaGUgbWV0YWRhdGEgdmFsdWUgZm9yIHRoZSBtZXRhZGF0YSBrZXkgaWYgZm91bmQ7IG90aGVyd2lzZSwgYHVuZGVmaW5lZGAuXHJcbiAgICAgICogQGV4YW1wbGVcclxuICAgICAgKlxyXG4gICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcclxuICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgbm90IHBhcnQgb2YgRVM2LCB0aG91Z2ggdGhleSBhcmUgdmFsaWQgaW4gVHlwZVNjcmlwdDpcclxuICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcclxuICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5O1xyXG4gICAgICAqXHJcbiAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cclxuICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QocCkgeyB9XHJcbiAgICAgICogICAgICAgICBtZXRob2QocCkgeyB9XHJcbiAgICAgICogICAgIH1cclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxyXG4gICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSk7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxyXG4gICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxyXG4gICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpO1xyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxyXG4gICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpO1xyXG4gICAgICAqXHJcbiAgICAgICovXHJcbiAgICBmdW5jdGlvbiBnZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xyXG4gICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpKVxyXG4gICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xyXG4gICAgICAgIHJldHVybiBPcmRpbmFyeUdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KTtcclxuICAgIH1cclxuICAgIFJlZmxlY3QuZ2V0TWV0YWRhdGEgPSBnZXRNZXRhZGF0YTtcclxuICAgIC8qKlxyXG4gICAgICAqIEdldHMgdGhlIG1ldGFkYXRhIHZhbHVlIGZvciB0aGUgcHJvdmlkZWQgbWV0YWRhdGEga2V5IG9uIHRoZSB0YXJnZXQgb2JqZWN0LlxyXG4gICAgICAqIEBwYXJhbSBtZXRhZGF0YUtleSBBIGtleSB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZSBtZXRhZGF0YS5cclxuICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgb2JqZWN0IG9uIHdoaWNoIHRoZSBtZXRhZGF0YSBpcyBkZWZpbmVkLlxyXG4gICAgICAqIEBwYXJhbSBwcm9wZXJ0eUtleSAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBrZXkgZm9yIHRoZSB0YXJnZXQuXHJcbiAgICAgICogQHJldHVybnMgVGhlIG1ldGFkYXRhIHZhbHVlIGZvciB0aGUgbWV0YWRhdGEga2V5IGlmIGZvdW5kOyBvdGhlcndpc2UsIGB1bmRlZmluZWRgLlxyXG4gICAgICAqIEBleGFtcGxlXHJcbiAgICAgICpcclxuICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XHJcbiAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XHJcbiAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XHJcbiAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XHJcbiAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxyXG4gICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxyXG4gICAgICAqICAgICB9XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUpO1xyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSlcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXHJcbiAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKTtcclxuICAgICAgKlxyXG4gICAgICAqL1xyXG4gICAgZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpIHtcclxuICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcclxuICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSlcclxuICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcclxuICAgICAgICByZXR1cm4gT3JkaW5hcnlHZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSk7XHJcbiAgICB9XHJcbiAgICBSZWZsZWN0LmdldE93bk1ldGFkYXRhID0gZ2V0T3duTWV0YWRhdGE7XHJcbiAgICAvKipcclxuICAgICAgKiBHZXRzIHRoZSBtZXRhZGF0YSBrZXlzIGRlZmluZWQgb24gdGhlIHRhcmdldCBvYmplY3Qgb3IgaXRzIHByb3RvdHlwZSBjaGFpbi5cclxuICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgb2JqZWN0IG9uIHdoaWNoIHRoZSBtZXRhZGF0YSBpcyBkZWZpbmVkLlxyXG4gICAgICAqIEBwYXJhbSBwcm9wZXJ0eUtleSAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBrZXkgZm9yIHRoZSB0YXJnZXQuXHJcbiAgICAgICogQHJldHVybnMgQW4gYXJyYXkgb2YgdW5pcXVlIG1ldGFkYXRhIGtleXMuXHJcbiAgICAgICogQGV4YW1wbGVcclxuICAgICAgKlxyXG4gICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcclxuICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgbm90IHBhcnQgb2YgRVM2LCB0aG91Z2ggdGhleSBhcmUgdmFsaWQgaW4gVHlwZVNjcmlwdDpcclxuICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcclxuICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5O1xyXG4gICAgICAqXHJcbiAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cclxuICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QocCkgeyB9XHJcbiAgICAgICogICAgICAgICBtZXRob2QocCkgeyB9XHJcbiAgICAgICogICAgIH1cclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxyXG4gICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhS2V5cyhFeGFtcGxlKTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IpXHJcbiAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGFLZXlzKEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSlcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YUtleXMoRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YUtleXMoRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIik7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXHJcbiAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGFLZXlzKEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKTtcclxuICAgICAgKlxyXG4gICAgICAqL1xyXG4gICAgZnVuY3Rpb24gZ2V0TWV0YWRhdGFLZXlzKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcclxuICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcclxuICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSlcclxuICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcclxuICAgICAgICByZXR1cm4gT3JkaW5hcnlNZXRhZGF0YUtleXModGFyZ2V0LCBwcm9wZXJ0eUtleSk7XHJcbiAgICB9XHJcbiAgICBSZWZsZWN0LmdldE1ldGFkYXRhS2V5cyA9IGdldE1ldGFkYXRhS2V5cztcclxuICAgIC8qKlxyXG4gICAgICAqIEdldHMgdGhlIHVuaXF1ZSBtZXRhZGF0YSBrZXlzIGRlZmluZWQgb24gdGhlIHRhcmdldCBvYmplY3QuXHJcbiAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCBvbiB3aGljaCB0aGUgbWV0YWRhdGEgaXMgZGVmaW5lZC5cclxuICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IGZvciB0aGUgdGFyZ2V0LlxyXG4gICAgICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHVuaXF1ZSBtZXRhZGF0YSBrZXlzLlxyXG4gICAgICAqIEBleGFtcGxlXHJcbiAgICAgICpcclxuICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XHJcbiAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XHJcbiAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XHJcbiAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XHJcbiAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxyXG4gICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxyXG4gICAgICAqICAgICB9XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YUtleXMoRXhhbXBsZSk7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxyXG4gICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhS2V5cyhFeGFtcGxlLCBcInN0YXRpY1Byb3BlcnR5XCIpO1xyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXHJcbiAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGFLZXlzKEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXHJcbiAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGFLZXlzKEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpO1xyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxyXG4gICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhS2V5cyhFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIik7XHJcbiAgICAgICpcclxuICAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhS2V5cyh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XHJcbiAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpXHJcbiAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XHJcbiAgICAgICAgcmV0dXJuIE9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKHRhcmdldCwgcHJvcGVydHlLZXkpO1xyXG4gICAgfVxyXG4gICAgUmVmbGVjdC5nZXRPd25NZXRhZGF0YUtleXMgPSBnZXRPd25NZXRhZGF0YUtleXM7XHJcbiAgICAvKipcclxuICAgICAgKiBEZWxldGVzIHRoZSBtZXRhZGF0YSBlbnRyeSBmcm9tIHRoZSB0YXJnZXQgb2JqZWN0IHdpdGggdGhlIHByb3ZpZGVkIGtleS5cclxuICAgICAgKiBAcGFyYW0gbWV0YWRhdGFLZXkgQSBrZXkgdXNlZCB0byBzdG9yZSBhbmQgcmV0cmlldmUgbWV0YWRhdGEuXHJcbiAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCBvbiB3aGljaCB0aGUgbWV0YWRhdGEgaXMgZGVmaW5lZC5cclxuICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IGZvciB0aGUgdGFyZ2V0LlxyXG4gICAgICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgbWV0YWRhdGEgZW50cnkgd2FzIGZvdW5kIGFuZCBkZWxldGVkOyBvdGhlcndpc2UsIGZhbHNlLlxyXG4gICAgICAqIEBleGFtcGxlXHJcbiAgICAgICpcclxuICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XHJcbiAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XHJcbiAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XHJcbiAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XHJcbiAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxyXG4gICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxyXG4gICAgICAqICAgICB9XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5kZWxldGVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUpO1xyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5kZWxldGVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XHJcbiAgICAgICpcclxuICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSlcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5kZWxldGVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xyXG4gICAgICAqXHJcbiAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXHJcbiAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZGVsZXRlTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKTtcclxuICAgICAgKlxyXG4gICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcclxuICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5kZWxldGVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKTtcclxuICAgICAgKlxyXG4gICAgICAqL1xyXG4gICAgZnVuY3Rpb24gZGVsZXRlTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpIHtcclxuICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcclxuICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSlcclxuICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcclxuICAgICAgICB2YXIgbWV0YWRhdGFNYXAgPSBHZXRPckNyZWF0ZU1ldGFkYXRhTWFwKHRhcmdldCwgcHJvcGVydHlLZXksIC8qQ3JlYXRlKi8gZmFsc2UpO1xyXG4gICAgICAgIGlmIChJc1VuZGVmaW5lZChtZXRhZGF0YU1hcCkpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAoIW1ldGFkYXRhTWFwLmRlbGV0ZShtZXRhZGF0YUtleSkpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAobWV0YWRhdGFNYXAuc2l6ZSA+IDApXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIHZhciB0YXJnZXRNZXRhZGF0YSA9IE1ldGFkYXRhLmdldCh0YXJnZXQpO1xyXG4gICAgICAgIHRhcmdldE1ldGFkYXRhLmRlbGV0ZShwcm9wZXJ0eUtleSk7XHJcbiAgICAgICAgaWYgKHRhcmdldE1ldGFkYXRhLnNpemUgPiAwKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBNZXRhZGF0YS5kZWxldGUodGFyZ2V0KTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIFJlZmxlY3QuZGVsZXRlTWV0YWRhdGEgPSBkZWxldGVNZXRhZGF0YTtcclxuICAgIGZ1bmN0aW9uIERlY29yYXRlQ29uc3RydWN0b3IoZGVjb3JhdG9ycywgdGFyZ2V0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcclxuICAgICAgICAgICAgdmFyIGRlY29yYXRvciA9IGRlY29yYXRvcnNbaV07XHJcbiAgICAgICAgICAgIHZhciBkZWNvcmF0ZWQgPSBkZWNvcmF0b3IodGFyZ2V0KTtcclxuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChkZWNvcmF0ZWQpICYmICFJc051bGwoZGVjb3JhdGVkKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFJc0NvbnN0cnVjdG9yKGRlY29yYXRlZCkpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gZGVjb3JhdGVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBEZWNvcmF0ZVByb3BlcnR5KGRlY29yYXRvcnMsIHRhcmdldCwgcHJvcGVydHlLZXksIGRlc2NyaXB0b3IpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xyXG4gICAgICAgICAgICB2YXIgZGVjb3JhdG9yID0gZGVjb3JhdG9yc1tpXTtcclxuICAgICAgICAgICAgdmFyIGRlY29yYXRlZCA9IGRlY29yYXRvcih0YXJnZXQsIHByb3BlcnR5S2V5LCBkZXNjcmlwdG9yKTtcclxuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChkZWNvcmF0ZWQpICYmICFJc051bGwoZGVjb3JhdGVkKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFJc09iamVjdChkZWNvcmF0ZWQpKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IgPSBkZWNvcmF0ZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3I7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBHZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIENyZWF0ZSkge1xyXG4gICAgICAgIHZhciB0YXJnZXRNZXRhZGF0YSA9IE1ldGFkYXRhLmdldChPKTtcclxuICAgICAgICBpZiAoSXNVbmRlZmluZWQodGFyZ2V0TWV0YWRhdGEpKSB7XHJcbiAgICAgICAgICAgIGlmICghQ3JlYXRlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgX01hcCgpO1xyXG4gICAgICAgICAgICBNZXRhZGF0YS5zZXQoTywgdGFyZ2V0TWV0YWRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbWV0YWRhdGFNYXAgPSB0YXJnZXRNZXRhZGF0YS5nZXQoUCk7XHJcbiAgICAgICAgaWYgKElzVW5kZWZpbmVkKG1ldGFkYXRhTWFwKSkge1xyXG4gICAgICAgICAgICBpZiAoIUNyZWF0ZSlcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIG1ldGFkYXRhTWFwID0gbmV3IF9NYXAoKTtcclxuICAgICAgICAgICAgdGFyZ2V0TWV0YWRhdGEuc2V0KFAsIG1ldGFkYXRhTWFwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1ldGFkYXRhTWFwO1xyXG4gICAgfVxyXG4gICAgLy8gMy4xLjEuMSBPcmRpbmFyeUhhc01ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKVxyXG4gICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnloYXNtZXRhZGF0YVxyXG4gICAgZnVuY3Rpb24gT3JkaW5hcnlIYXNNZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCkge1xyXG4gICAgICAgIHZhciBoYXNPd24gPSBPcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcclxuICAgICAgICBpZiAoaGFzT3duKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB2YXIgcGFyZW50ID0gT3JkaW5hcnlHZXRQcm90b3R5cGVPZihPKTtcclxuICAgICAgICBpZiAoIUlzTnVsbChwYXJlbnQpKVxyXG4gICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlIYXNNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvLyAzLjEuMi4xIE9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApXHJcbiAgICAvLyBodHRwczovL3JidWNrdG9uLmdpdGh1Yi5pby9yZWZsZWN0LW1ldGFkYXRhLyNvcmRpbmFyeWhhc293bm1ldGFkYXRhXHJcbiAgICBmdW5jdGlvbiBPcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKSB7XHJcbiAgICAgICAgdmFyIG1ldGFkYXRhTWFwID0gR2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCAvKkNyZWF0ZSovIGZhbHNlKTtcclxuICAgICAgICBpZiAoSXNVbmRlZmluZWQobWV0YWRhdGFNYXApKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIFRvQm9vbGVhbihtZXRhZGF0YU1hcC5oYXMoTWV0YWRhdGFLZXkpKTtcclxuICAgIH1cclxuICAgIC8vIDMuMS4zLjEgT3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUClcclxuICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5Z2V0bWV0YWRhdGFcclxuICAgIGZ1bmN0aW9uIE9yZGluYXJ5R2V0TWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApIHtcclxuICAgICAgICB2YXIgaGFzT3duID0gT3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XHJcbiAgICAgICAgaWYgKGhhc093bilcclxuICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5R2V0T3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xyXG4gICAgICAgIHZhciBwYXJlbnQgPSBPcmRpbmFyeUdldFByb3RvdHlwZU9mKE8pO1xyXG4gICAgICAgIGlmICghSXNOdWxsKHBhcmVudCkpXHJcbiAgICAgICAgICAgIHJldHVybiBPcmRpbmFyeUdldE1ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApO1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICAvLyAzLjEuNC4xIE9yZGluYXJ5R2V0T3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApXHJcbiAgICAvLyBodHRwczovL3JidWNrdG9uLmdpdGh1Yi5pby9yZWZsZWN0LW1ldGFkYXRhLyNvcmRpbmFyeWdldG93bm1ldGFkYXRhXHJcbiAgICBmdW5jdGlvbiBPcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKSB7XHJcbiAgICAgICAgdmFyIG1ldGFkYXRhTWFwID0gR2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCAvKkNyZWF0ZSovIGZhbHNlKTtcclxuICAgICAgICBpZiAoSXNVbmRlZmluZWQobWV0YWRhdGFNYXApKVxyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIHJldHVybiBtZXRhZGF0YU1hcC5nZXQoTWV0YWRhdGFLZXkpO1xyXG4gICAgfVxyXG4gICAgLy8gMy4xLjUuMSBPcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlLCBPLCBQKVxyXG4gICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnlkZWZpbmVvd25tZXRhZGF0YVxyXG4gICAgZnVuY3Rpb24gT3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSwgTywgUCkge1xyXG4gICAgICAgIHZhciBtZXRhZGF0YU1hcCA9IEdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgLypDcmVhdGUqLyB0cnVlKTtcclxuICAgICAgICBtZXRhZGF0YU1hcC5zZXQoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUpO1xyXG4gICAgfVxyXG4gICAgLy8gMy4xLjYuMSBPcmRpbmFyeU1ldGFkYXRhS2V5cyhPLCBQKVxyXG4gICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnltZXRhZGF0YWtleXNcclxuICAgIGZ1bmN0aW9uIE9yZGluYXJ5TWV0YWRhdGFLZXlzKE8sIFApIHtcclxuICAgICAgICB2YXIgb3duS2V5cyA9IE9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKE8sIFApO1xyXG4gICAgICAgIHZhciBwYXJlbnQgPSBPcmRpbmFyeUdldFByb3RvdHlwZU9mKE8pO1xyXG4gICAgICAgIGlmIChwYXJlbnQgPT09IG51bGwpXHJcbiAgICAgICAgICAgIHJldHVybiBvd25LZXlzO1xyXG4gICAgICAgIHZhciBwYXJlbnRLZXlzID0gT3JkaW5hcnlNZXRhZGF0YUtleXMocGFyZW50LCBQKTtcclxuICAgICAgICBpZiAocGFyZW50S2V5cy5sZW5ndGggPD0gMClcclxuICAgICAgICAgICAgcmV0dXJuIG93bktleXM7XHJcbiAgICAgICAgaWYgKG93bktleXMubGVuZ3RoIDw9IDApXHJcbiAgICAgICAgICAgIHJldHVybiBwYXJlbnRLZXlzO1xyXG4gICAgICAgIHZhciBzZXQgPSBuZXcgX1NldCgpO1xyXG4gICAgICAgIHZhciBrZXlzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBvd25LZXlzXzEgPSBvd25LZXlzOyBfaSA8IG93bktleXNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGtleSA9IG93bktleXNfMVtfaV07XHJcbiAgICAgICAgICAgIHZhciBoYXNLZXkgPSBzZXQuaGFzKGtleSk7XHJcbiAgICAgICAgICAgIGlmICghaGFzS2V5KSB7XHJcbiAgICAgICAgICAgICAgICBzZXQuYWRkKGtleSk7XHJcbiAgICAgICAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBfYSA9IDAsIHBhcmVudEtleXNfMSA9IHBhcmVudEtleXM7IF9hIDwgcGFyZW50S2V5c18xLmxlbmd0aDsgX2ErKykge1xyXG4gICAgICAgICAgICB2YXIga2V5ID0gcGFyZW50S2V5c18xW19hXTtcclxuICAgICAgICAgICAgdmFyIGhhc0tleSA9IHNldC5oYXMoa2V5KTtcclxuICAgICAgICAgICAgaWYgKCFoYXNLZXkpIHtcclxuICAgICAgICAgICAgICAgIHNldC5hZGQoa2V5KTtcclxuICAgICAgICAgICAgICAgIGtleXMucHVzaChrZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBrZXlzO1xyXG4gICAgfVxyXG4gICAgLy8gMy4xLjcuMSBPcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhPLCBQKVxyXG4gICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnlvd25tZXRhZGF0YWtleXNcclxuICAgIGZ1bmN0aW9uIE9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKE8sIFApIHtcclxuICAgICAgICB2YXIga2V5cyA9IFtdO1xyXG4gICAgICAgIHZhciBtZXRhZGF0YU1hcCA9IEdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgLypDcmVhdGUqLyBmYWxzZSk7XHJcbiAgICAgICAgaWYgKElzVW5kZWZpbmVkKG1ldGFkYXRhTWFwKSlcclxuICAgICAgICAgICAgcmV0dXJuIGtleXM7XHJcbiAgICAgICAgdmFyIGtleXNPYmogPSBtZXRhZGF0YU1hcC5rZXlzKCk7XHJcbiAgICAgICAgdmFyIGl0ZXJhdG9yID0gR2V0SXRlcmF0b3Ioa2V5c09iaik7XHJcbiAgICAgICAgdmFyIGsgPSAwO1xyXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgIHZhciBuZXh0ID0gSXRlcmF0b3JTdGVwKGl0ZXJhdG9yKTtcclxuICAgICAgICAgICAgaWYgKCFuZXh0KSB7XHJcbiAgICAgICAgICAgICAgICBrZXlzLmxlbmd0aCA9IGs7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5cztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgbmV4dFZhbHVlID0gSXRlcmF0b3JWYWx1ZShuZXh0KTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGtleXNba10gPSBuZXh0VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgSXRlcmF0b3JDbG9zZShpdGVyYXRvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGsrKztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyA2IEVDTUFTY3JpcHQgRGF0YSBUeXAwZXMgYW5kIFZhbHVlc1xyXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZWNtYXNjcmlwdC1kYXRhLXR5cGVzLWFuZC12YWx1ZXNcclxuICAgIGZ1bmN0aW9uIFR5cGUoeCkge1xyXG4gICAgICAgIGlmICh4ID09PSBudWxsKVxyXG4gICAgICAgICAgICByZXR1cm4gMSAvKiBOdWxsICovO1xyXG4gICAgICAgIHN3aXRjaCAodHlwZW9mIHgpIHtcclxuICAgICAgICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOiByZXR1cm4gMCAvKiBVbmRlZmluZWQgKi87XHJcbiAgICAgICAgICAgIGNhc2UgXCJib29sZWFuXCI6IHJldHVybiAyIC8qIEJvb2xlYW4gKi87XHJcbiAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjogcmV0dXJuIDMgLyogU3RyaW5nICovO1xyXG4gICAgICAgICAgICBjYXNlIFwic3ltYm9sXCI6IHJldHVybiA0IC8qIFN5bWJvbCAqLztcclxuICAgICAgICAgICAgY2FzZSBcIm51bWJlclwiOiByZXR1cm4gNSAvKiBOdW1iZXIgKi87XHJcbiAgICAgICAgICAgIGNhc2UgXCJvYmplY3RcIjogcmV0dXJuIHggPT09IG51bGwgPyAxIC8qIE51bGwgKi8gOiA2IC8qIE9iamVjdCAqLztcclxuICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIDYgLyogT2JqZWN0ICovO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIDYuMS4xIFRoZSBVbmRlZmluZWQgVHlwZVxyXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcy11bmRlZmluZWQtdHlwZVxyXG4gICAgZnVuY3Rpb24gSXNVbmRlZmluZWQoeCkge1xyXG4gICAgICAgIHJldHVybiB4ID09PSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICAvLyA2LjEuMiBUaGUgTnVsbCBUeXBlXHJcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzLW51bGwtdHlwZVxyXG4gICAgZnVuY3Rpb24gSXNOdWxsKHgpIHtcclxuICAgICAgICByZXR1cm4geCA9PT0gbnVsbDtcclxuICAgIH1cclxuICAgIC8vIDYuMS41IFRoZSBTeW1ib2wgVHlwZVxyXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcy1zeW1ib2wtdHlwZVxyXG4gICAgZnVuY3Rpb24gSXNTeW1ib2woeCkge1xyXG4gICAgICAgIHJldHVybiB0eXBlb2YgeCA9PT0gXCJzeW1ib2xcIjtcclxuICAgIH1cclxuICAgIC8vIDYuMS43IFRoZSBPYmplY3QgVHlwZVxyXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LXR5cGVcclxuICAgIGZ1bmN0aW9uIElzT2JqZWN0KHgpIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIHggPT09IFwib2JqZWN0XCIgPyB4ICE9PSBudWxsIDogdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIjtcclxuICAgIH1cclxuICAgIC8vIDcuMSBUeXBlIENvbnZlcnNpb25cclxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXR5cGUtY29udmVyc2lvblxyXG4gICAgLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXHJcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxyXG4gICAgZnVuY3Rpb24gVG9QcmltaXRpdmUoaW5wdXQsIFByZWZlcnJlZFR5cGUpIHtcclxuICAgICAgICBzd2l0Y2ggKFR5cGUoaW5wdXQpKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMCAvKiBVbmRlZmluZWQgKi86IHJldHVybiBpbnB1dDtcclxuICAgICAgICAgICAgY2FzZSAxIC8qIE51bGwgKi86IHJldHVybiBpbnB1dDtcclxuICAgICAgICAgICAgY2FzZSAyIC8qIEJvb2xlYW4gKi86IHJldHVybiBpbnB1dDtcclxuICAgICAgICAgICAgY2FzZSAzIC8qIFN0cmluZyAqLzogcmV0dXJuIGlucHV0O1xyXG4gICAgICAgICAgICBjYXNlIDQgLyogU3ltYm9sICovOiByZXR1cm4gaW5wdXQ7XHJcbiAgICAgICAgICAgIGNhc2UgNSAvKiBOdW1iZXIgKi86IHJldHVybiBpbnB1dDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGhpbnQgPSBQcmVmZXJyZWRUeXBlID09PSAzIC8qIFN0cmluZyAqLyA/IFwic3RyaW5nXCIgOiBQcmVmZXJyZWRUeXBlID09PSA1IC8qIE51bWJlciAqLyA/IFwibnVtYmVyXCIgOiBcImRlZmF1bHRcIjtcclxuICAgICAgICB2YXIgZXhvdGljVG9QcmltID0gR2V0TWV0aG9kKGlucHV0LCB0b1ByaW1pdGl2ZVN5bWJvbCk7XHJcbiAgICAgICAgaWYgKGV4b3RpY1RvUHJpbSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBleG90aWNUb1ByaW0uY2FsbChpbnB1dCwgaGludCk7XHJcbiAgICAgICAgICAgIGlmIChJc09iamVjdChyZXN1bHQpKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gT3JkaW5hcnlUb1ByaW1pdGl2ZShpbnB1dCwgaGludCA9PT0gXCJkZWZhdWx0XCIgPyBcIm51bWJlclwiIDogaGludCk7XHJcbiAgICB9XHJcbiAgICAvLyA3LjEuMS4xIE9yZGluYXJ5VG9QcmltaXRpdmUoTywgaGludClcclxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9yZGluYXJ5dG9wcmltaXRpdmVcclxuICAgIGZ1bmN0aW9uIE9yZGluYXJ5VG9QcmltaXRpdmUoTywgaGludCkge1xyXG4gICAgICAgIGlmIChoaW50ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHZhciB0b1N0cmluZ18xID0gTy50b1N0cmluZztcclxuICAgICAgICAgICAgaWYgKElzQ2FsbGFibGUodG9TdHJpbmdfMSkpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0b1N0cmluZ18xLmNhbGwoTyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHJlc3VsdCkpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdmFsdWVPZiA9IE8udmFsdWVPZjtcclxuICAgICAgICAgICAgaWYgKElzQ2FsbGFibGUodmFsdWVPZikpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB2YWx1ZU9mLmNhbGwoTyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHJlc3VsdCkpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlT2YgPSBPLnZhbHVlT2Y7XHJcbiAgICAgICAgICAgIGlmIChJc0NhbGxhYmxlKHZhbHVlT2YpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdmFsdWVPZi5jYWxsKE8pO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFJc09iamVjdChyZXN1bHQpKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHRvU3RyaW5nXzIgPSBPLnRvU3RyaW5nO1xyXG4gICAgICAgICAgICBpZiAoSXNDYWxsYWJsZSh0b1N0cmluZ18yKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRvU3RyaW5nXzIuY2FsbChPKTtcclxuICAgICAgICAgICAgICAgIGlmICghSXNPYmplY3QocmVzdWx0KSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcclxuICAgIH1cclxuICAgIC8vIDcuMS4yIFRvQm9vbGVhbihhcmd1bWVudClcclxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8yMDE2LyNzZWMtdG9ib29sZWFuXHJcbiAgICBmdW5jdGlvbiBUb0Jvb2xlYW4oYXJndW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gISFhcmd1bWVudDtcclxuICAgIH1cclxuICAgIC8vIDcuMS4xMiBUb1N0cmluZyhhcmd1bWVudClcclxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvc3RyaW5nXHJcbiAgICBmdW5jdGlvbiBUb1N0cmluZyhhcmd1bWVudCkge1xyXG4gICAgICAgIHJldHVybiBcIlwiICsgYXJndW1lbnQ7XHJcbiAgICB9XHJcbiAgICAvLyA3LjEuMTQgVG9Qcm9wZXJ0eUtleShhcmd1bWVudClcclxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvcHJvcGVydHlrZXlcclxuICAgIGZ1bmN0aW9uIFRvUHJvcGVydHlLZXkoYXJndW1lbnQpIHtcclxuICAgICAgICB2YXIga2V5ID0gVG9QcmltaXRpdmUoYXJndW1lbnQsIDMgLyogU3RyaW5nICovKTtcclxuICAgICAgICBpZiAoSXNTeW1ib2woa2V5KSlcclxuICAgICAgICAgICAgcmV0dXJuIGtleTtcclxuICAgICAgICByZXR1cm4gVG9TdHJpbmcoa2V5KTtcclxuICAgIH1cclxuICAgIC8vIDcuMiBUZXN0aW5nIGFuZCBDb21wYXJpc29uIE9wZXJhdGlvbnNcclxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRlc3RpbmctYW5kLWNvbXBhcmlzb24tb3BlcmF0aW9uc1xyXG4gICAgLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcclxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWlzYXJyYXlcclxuICAgIGZ1bmN0aW9uIElzQXJyYXkoYXJndW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheVxyXG4gICAgICAgICAgICA/IEFycmF5LmlzQXJyYXkoYXJndW1lbnQpXHJcbiAgICAgICAgICAgIDogYXJndW1lbnQgaW5zdGFuY2VvZiBPYmplY3RcclxuICAgICAgICAgICAgICAgID8gYXJndW1lbnQgaW5zdGFuY2VvZiBBcnJheVxyXG4gICAgICAgICAgICAgICAgOiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnQpID09PSBcIltvYmplY3QgQXJyYXldXCI7XHJcbiAgICB9XHJcbiAgICAvLyA3LjIuMyBJc0NhbGxhYmxlKGFyZ3VtZW50KVxyXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXNjYWxsYWJsZVxyXG4gICAgZnVuY3Rpb24gSXNDYWxsYWJsZShhcmd1bWVudCkge1xyXG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgYW4gYXBwcm94aW1hdGlvbiBhcyB3ZSBjYW5ub3QgY2hlY2sgZm9yIFtbQ2FsbF1dIGludGVybmFsIG1ldGhvZC5cclxuICAgICAgICByZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09PSBcImZ1bmN0aW9uXCI7XHJcbiAgICB9XHJcbiAgICAvLyA3LjIuNCBJc0NvbnN0cnVjdG9yKGFyZ3VtZW50KVxyXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXNjb25zdHJ1Y3RvclxyXG4gICAgZnVuY3Rpb24gSXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkge1xyXG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgYW4gYXBwcm94aW1hdGlvbiBhcyB3ZSBjYW5ub3QgY2hlY2sgZm9yIFtbQ29uc3RydWN0XV0gaW50ZXJuYWwgbWV0aG9kLlxyXG4gICAgICAgIHJldHVybiB0eXBlb2YgYXJndW1lbnQgPT09IFwiZnVuY3Rpb25cIjtcclxuICAgIH1cclxuICAgIC8vIDcuMi43IElzUHJvcGVydHlLZXkoYXJndW1lbnQpXHJcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pc3Byb3BlcnR5a2V5XHJcbiAgICBmdW5jdGlvbiBJc1Byb3BlcnR5S2V5KGFyZ3VtZW50KSB7XHJcbiAgICAgICAgc3dpdGNoIChUeXBlKGFyZ3VtZW50KSkge1xyXG4gICAgICAgICAgICBjYXNlIDMgLyogU3RyaW5nICovOiByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgY2FzZSA0IC8qIFN5bWJvbCAqLzogcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyA3LjMgT3BlcmF0aW9ucyBvbiBPYmplY3RzXHJcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vcGVyYXRpb25zLW9uLW9iamVjdHNcclxuICAgIC8vIDcuMy45IEdldE1ldGhvZChWLCBQKVxyXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0bWV0aG9kXHJcbiAgICBmdW5jdGlvbiBHZXRNZXRob2QoViwgUCkge1xyXG4gICAgICAgIHZhciBmdW5jID0gVltQXTtcclxuICAgICAgICBpZiAoZnVuYyA9PT0gdW5kZWZpbmVkIHx8IGZ1bmMgPT09IG51bGwpXHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgaWYgKCFJc0NhbGxhYmxlKGZ1bmMpKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmM7XHJcbiAgICB9XHJcbiAgICAvLyA3LjQgT3BlcmF0aW9ucyBvbiBJdGVyYXRvciBPYmplY3RzXHJcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vcGVyYXRpb25zLW9uLWl0ZXJhdG9yLW9iamVjdHNcclxuICAgIGZ1bmN0aW9uIEdldEl0ZXJhdG9yKG9iaikge1xyXG4gICAgICAgIHZhciBtZXRob2QgPSBHZXRNZXRob2Qob2JqLCBpdGVyYXRvclN5bWJvbCk7XHJcbiAgICAgICAgaWYgKCFJc0NhbGxhYmxlKG1ldGhvZCkpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTsgLy8gZnJvbSBDYWxsXHJcbiAgICAgICAgdmFyIGl0ZXJhdG9yID0gbWV0aG9kLmNhbGwob2JqKTtcclxuICAgICAgICBpZiAoIUlzT2JqZWN0KGl0ZXJhdG9yKSlcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIHJldHVybiBpdGVyYXRvcjtcclxuICAgIH1cclxuICAgIC8vIDcuNC40IEl0ZXJhdG9yVmFsdWUoaXRlclJlc3VsdClcclxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8yMDE2LyNzZWMtaXRlcmF0b3J2YWx1ZVxyXG4gICAgZnVuY3Rpb24gSXRlcmF0b3JWYWx1ZShpdGVyUmVzdWx0KSB7XHJcbiAgICAgICAgcmV0dXJuIGl0ZXJSZXN1bHQudmFsdWU7XHJcbiAgICB9XHJcbiAgICAvLyA3LjQuNSBJdGVyYXRvclN0ZXAoaXRlcmF0b3IpXHJcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pdGVyYXRvcnN0ZXBcclxuICAgIGZ1bmN0aW9uIEl0ZXJhdG9yU3RlcChpdGVyYXRvcikge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gZmFsc2UgOiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxyXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXRlcmF0b3JjbG9zZVxyXG4gICAgZnVuY3Rpb24gSXRlcmF0b3JDbG9zZShpdGVyYXRvcikge1xyXG4gICAgICAgIHZhciBmID0gaXRlcmF0b3JbXCJyZXR1cm5cIl07XHJcbiAgICAgICAgaWYgKGYpXHJcbiAgICAgICAgICAgIGYuY2FsbChpdGVyYXRvcik7XHJcbiAgICB9XHJcbiAgICAvLyA5LjEgT3JkaW5hcnkgT2JqZWN0IEludGVybmFsIE1ldGhvZHMgYW5kIEludGVybmFsIFNsb3RzXHJcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vcmRpbmFyeS1vYmplY3QtaW50ZXJuYWwtbWV0aG9kcy1hbmQtaW50ZXJuYWwtc2xvdHNcclxuICAgIC8vIDkuMS4xLjEgT3JkaW5hcnlHZXRQcm90b3R5cGVPZihPKVxyXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb3JkaW5hcnlnZXRwcm90b3R5cGVvZlxyXG4gICAgZnVuY3Rpb24gT3JkaW5hcnlHZXRQcm90b3R5cGVPZihPKSB7XHJcbiAgICAgICAgdmFyIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pO1xyXG4gICAgICAgIGlmICh0eXBlb2YgTyAhPT0gXCJmdW5jdGlvblwiIHx8IE8gPT09IGZ1bmN0aW9uUHJvdG90eXBlKVxyXG4gICAgICAgICAgICByZXR1cm4gcHJvdG87XHJcbiAgICAgICAgLy8gVHlwZVNjcmlwdCBkb2Vzbid0IHNldCBfX3Byb3RvX18gaW4gRVM1LCBhcyBpdCdzIG5vbi1zdGFuZGFyZC5cclxuICAgICAgICAvLyBUcnkgdG8gZGV0ZXJtaW5lIHRoZSBzdXBlcmNsYXNzIGNvbnN0cnVjdG9yLiBDb21wYXRpYmxlIGltcGxlbWVudGF0aW9uc1xyXG4gICAgICAgIC8vIG11c3QgZWl0aGVyIHNldCBfX3Byb3RvX18gb24gYSBzdWJjbGFzcyBjb25zdHJ1Y3RvciB0byB0aGUgc3VwZXJjbGFzcyBjb25zdHJ1Y3RvcixcclxuICAgICAgICAvLyBvciBlbnN1cmUgZWFjaCBjbGFzcyBoYXMgYSB2YWxpZCBgY29uc3RydWN0b3JgIHByb3BlcnR5IG9uIGl0cyBwcm90b3R5cGUgdGhhdFxyXG4gICAgICAgIC8vIHBvaW50cyBiYWNrIHRvIHRoZSBjb25zdHJ1Y3Rvci5cclxuICAgICAgICAvLyBJZiB0aGlzIGlzIG5vdCB0aGUgc2FtZSBhcyBGdW5jdGlvbi5bW1Byb3RvdHlwZV1dLCB0aGVuIHRoaXMgaXMgZGVmaW5hdGVseSBpbmhlcml0ZWQuXHJcbiAgICAgICAgLy8gVGhpcyBpcyB0aGUgY2FzZSB3aGVuIGluIEVTNiBvciB3aGVuIHVzaW5nIF9fcHJvdG9fXyBpbiBhIGNvbXBhdGlibGUgYnJvd3Nlci5cclxuICAgICAgICBpZiAocHJvdG8gIT09IGZ1bmN0aW9uUHJvdG90eXBlKVxyXG4gICAgICAgICAgICByZXR1cm4gcHJvdG87XHJcbiAgICAgICAgLy8gSWYgdGhlIHN1cGVyIHByb3RvdHlwZSBpcyBPYmplY3QucHJvdG90eXBlLCBudWxsLCBvciB1bmRlZmluZWQsIHRoZW4gd2UgY2Fubm90IGRldGVybWluZSB0aGUgaGVyaXRhZ2UuXHJcbiAgICAgICAgdmFyIHByb3RvdHlwZSA9IE8ucHJvdG90eXBlO1xyXG4gICAgICAgIHZhciBwcm90b3R5cGVQcm90byA9IHByb3RvdHlwZSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG90eXBlKTtcclxuICAgICAgICBpZiAocHJvdG90eXBlUHJvdG8gPT0gbnVsbCB8fCBwcm90b3R5cGVQcm90byA9PT0gT2JqZWN0LnByb3RvdHlwZSlcclxuICAgICAgICAgICAgcmV0dXJuIHByb3RvO1xyXG4gICAgICAgIC8vIElmIHRoZSBjb25zdHJ1Y3RvciB3YXMgbm90IGEgZnVuY3Rpb24sIHRoZW4gd2UgY2Fubm90IGRldGVybWluZSB0aGUgaGVyaXRhZ2UuXHJcbiAgICAgICAgdmFyIGNvbnN0cnVjdG9yID0gcHJvdG90eXBlUHJvdG8uY29uc3RydWN0b3I7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb25zdHJ1Y3RvciAhPT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgICAgICByZXR1cm4gcHJvdG87XHJcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBzb21lIGtpbmQgb2Ygc2VsZi1yZWZlcmVuY2UsIHRoZW4gd2UgY2Fubm90IGRldGVybWluZSB0aGUgaGVyaXRhZ2UuXHJcbiAgICAgICAgaWYgKGNvbnN0cnVjdG9yID09PSBPKVxyXG4gICAgICAgICAgICByZXR1cm4gcHJvdG87XHJcbiAgICAgICAgLy8gd2UgaGF2ZSBhIHByZXR0eSBnb29kIGd1ZXNzIGF0IHRoZSBoZXJpdGFnZS5cclxuICAgICAgICByZXR1cm4gY29uc3RydWN0b3I7XHJcbiAgICB9XHJcbiAgICAvLyBuYWl2ZSBNYXAgc2hpbVxyXG4gICAgZnVuY3Rpb24gQ3JlYXRlTWFwUG9seWZpbGwoKSB7XHJcbiAgICAgICAgdmFyIGNhY2hlU2VudGluZWwgPSB7fTtcclxuICAgICAgICB2YXIgYXJyYXlTZW50aW5lbCA9IFtdO1xyXG4gICAgICAgIHZhciBNYXBJdGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIE1hcEl0ZXJhdG9yKGtleXMsIHZhbHVlcywgc2VsZWN0b3IpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2tleXMgPSBrZXlzO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzID0gdmFsdWVzO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2VsZWN0b3IgPSBzZWxlY3RvcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBNYXBJdGVyYXRvci5wcm90b3R5cGVbXCJAQGl0ZXJhdG9yXCJdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcclxuICAgICAgICAgICAgTWFwSXRlcmF0b3IucHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XHJcbiAgICAgICAgICAgIE1hcEl0ZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5faW5kZXg7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRoaXMuX2tleXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX3NlbGVjdG9yKHRoaXMuX2tleXNbaW5kZXhdLCB0aGlzLl92YWx1ZXNbaW5kZXhdKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggKyAxID49IHRoaXMuX2tleXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4ID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXMgPSBhcnJheVNlbnRpbmVsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMgPSBhcnJheVNlbnRpbmVsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHJlc3VsdCwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgTWFwSXRlcmF0b3IucHJvdG90eXBlLnRocm93ID0gZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4ID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5cyA9IGFycmF5U2VudGluZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzID0gYXJyYXlTZW50aW5lbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBNYXBJdGVyYXRvci5wcm90b3R5cGUucmV0dXJuID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4ID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5cyA9IGFycmF5U2VudGluZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzID0gYXJyYXlTZW50aW5lbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXR1cm4gTWFwSXRlcmF0b3I7XHJcbiAgICAgICAgfSgpKTtcclxuICAgICAgICByZXR1cm4gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZnVuY3Rpb24gTWFwKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fa2V5cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzID0gW107XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZUtleSA9IGNhY2hlU2VudGluZWw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZUluZGV4ID0gLTI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1hcC5wcm90b3R5cGUsIFwic2l6ZVwiLCB7XHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2tleXMubGVuZ3RoOyB9LFxyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgTWFwLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiB0aGlzLl9maW5kKGtleSwgLyppbnNlcnQqLyBmYWxzZSkgPj0gMDsgfTtcclxuICAgICAgICAgICAgTWFwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kKGtleSwgLyppbnNlcnQqLyBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXggPj0gMCA/IHRoaXMuX3ZhbHVlc1tpbmRleF0gOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIE1hcC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuX2ZpbmQoa2V5LCAvKmluc2VydCovIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIE1hcC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5fZmluZChrZXksIC8qaW5zZXJ0Ki8gZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2l6ZSA9IHRoaXMuX2tleXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSBpbmRleCArIDE7IGkgPCBzaXplOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5c1tpIC0gMV0gPSB0aGlzLl9rZXlzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXNbaSAtIDFdID0gdGhpcy5fdmFsdWVzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlzLmxlbmd0aC0tO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcy5sZW5ndGgtLTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSB0aGlzLl9jYWNoZUtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZUtleSA9IGNhY2hlU2VudGluZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlSW5kZXggPSAtMjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIE1hcC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9rZXlzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlS2V5ID0gY2FjaGVTZW50aW5lbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlSW5kZXggPSAtMjtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgTWFwLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IE1hcEl0ZXJhdG9yKHRoaXMuX2tleXMsIHRoaXMuX3ZhbHVlcywgZ2V0S2V5KTsgfTtcclxuICAgICAgICAgICAgTWFwLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgTWFwSXRlcmF0b3IodGhpcy5fa2V5cywgdGhpcy5fdmFsdWVzLCBnZXRWYWx1ZSk7IH07XHJcbiAgICAgICAgICAgIE1hcC5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBNYXBJdGVyYXRvcih0aGlzLl9rZXlzLCB0aGlzLl92YWx1ZXMsIGdldEVudHJ5KTsgfTtcclxuICAgICAgICAgICAgTWFwLnByb3RvdHlwZVtcIkBAaXRlcmF0b3JcIl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmVudHJpZXMoKTsgfTtcclxuICAgICAgICAgICAgTWFwLnByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmVudHJpZXMoKTsgfTtcclxuICAgICAgICAgICAgTWFwLnByb3RvdHlwZS5fZmluZCA9IGZ1bmN0aW9uIChrZXksIGluc2VydCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NhY2hlS2V5ICE9PSBrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZUluZGV4ID0gdGhpcy5fa2V5cy5pbmRleE9mKHRoaXMuX2NhY2hlS2V5ID0ga2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jYWNoZUluZGV4IDwgMCAmJiBpbnNlcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZUluZGV4ID0gdGhpcy5fa2V5cy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5cy5wdXNoKGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZUluZGV4O1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXR1cm4gTWFwO1xyXG4gICAgICAgIH0oKSk7XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0S2V5KGtleSwgXykge1xyXG4gICAgICAgICAgICByZXR1cm4ga2V5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBnZXRWYWx1ZShfLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGdldEVudHJ5KGtleSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtrZXksIHZhbHVlXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBuYWl2ZSBTZXQgc2hpbVxyXG4gICAgZnVuY3Rpb24gQ3JlYXRlU2V0UG9seWZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIFNldCgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hcCA9IG5ldyBfTWFwKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNldC5wcm90b3R5cGUsIFwic2l6ZVwiLCB7XHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX21hcC5zaXplOyB9LFxyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHRoaXMuX21hcC5oYXModmFsdWUpOyB9O1xyXG4gICAgICAgICAgICBTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdGhpcy5fbWFwLnNldCh2YWx1ZSwgdmFsdWUpLCB0aGlzOyB9O1xyXG4gICAgICAgICAgICBTZXQucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdGhpcy5fbWFwLmRlbGV0ZSh2YWx1ZSk7IH07XHJcbiAgICAgICAgICAgIFNldC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7IHRoaXMuX21hcC5jbGVhcigpOyB9O1xyXG4gICAgICAgICAgICBTZXQucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9tYXAua2V5cygpOyB9O1xyXG4gICAgICAgICAgICBTZXQucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX21hcC52YWx1ZXMoKTsgfTtcclxuICAgICAgICAgICAgU2V0LnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fbWFwLmVudHJpZXMoKTsgfTtcclxuICAgICAgICAgICAgU2V0LnByb3RvdHlwZVtcIkBAaXRlcmF0b3JcIl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmtleXMoKTsgfTtcclxuICAgICAgICAgICAgU2V0LnByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmtleXMoKTsgfTtcclxuICAgICAgICAgICAgcmV0dXJuIFNldDtcclxuICAgICAgICB9KCkpO1xyXG4gICAgfVxyXG4gICAgLy8gbmFpdmUgV2Vha01hcCBzaGltXHJcbiAgICBmdW5jdGlvbiBDcmVhdGVXZWFrTWFwUG9seWZpbGwoKSB7XHJcbiAgICAgICAgdmFyIFVVSURfU0laRSA9IDE2O1xyXG4gICAgICAgIHZhciBrZXlzID0gSGFzaE1hcC5jcmVhdGUoKTtcclxuICAgICAgICB2YXIgcm9vdEtleSA9IENyZWF0ZVVuaXF1ZUtleSgpO1xyXG4gICAgICAgIHJldHVybiAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBXZWFrTWFwKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fa2V5ID0gQ3JlYXRlVW5pcXVlS2V5KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgV2Vha01hcC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKHRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRhYmxlID0gR2V0T3JDcmVhdGVXZWFrTWFwVGFibGUodGFyZ2V0LCAvKmNyZWF0ZSovIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZSAhPT0gdW5kZWZpbmVkID8gSGFzaE1hcC5oYXModGFibGUsIHRoaXMuX2tleSkgOiBmYWxzZTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgV2Vha01hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRhYmxlID0gR2V0T3JDcmVhdGVXZWFrTWFwVGFibGUodGFyZ2V0LCAvKmNyZWF0ZSovIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZSAhPT0gdW5kZWZpbmVkID8gSGFzaE1hcC5nZXQodGFibGUsIHRoaXMuX2tleSkgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIFdlYWtNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uICh0YXJnZXQsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGFibGUgPSBHZXRPckNyZWF0ZVdlYWtNYXBUYWJsZSh0YXJnZXQsIC8qY3JlYXRlKi8gdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB0YWJsZVt0aGlzLl9rZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRhYmxlID0gR2V0T3JDcmVhdGVXZWFrTWFwVGFibGUodGFyZ2V0LCAvKmNyZWF0ZSovIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZSAhPT0gdW5kZWZpbmVkID8gZGVsZXRlIHRhYmxlW3RoaXMuX2tleV0gOiBmYWxzZTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgV2Vha01hcC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBOT1RFOiBub3QgYSByZWFsIGNsZWFyLCBqdXN0IG1ha2VzIHRoZSBwcmV2aW91cyBkYXRhIHVucmVhY2hhYmxlXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9rZXkgPSBDcmVhdGVVbmlxdWVLZXkoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmV0dXJuIFdlYWtNYXA7XHJcbiAgICAgICAgfSgpKTtcclxuICAgICAgICBmdW5jdGlvbiBDcmVhdGVVbmlxdWVLZXkoKSB7XHJcbiAgICAgICAgICAgIHZhciBrZXk7XHJcbiAgICAgICAgICAgIGRvXHJcbiAgICAgICAgICAgICAgICBrZXkgPSBcIkBAV2Vha01hcEBAXCIgKyBDcmVhdGVVVUlEKCk7XHJcbiAgICAgICAgICAgIHdoaWxlIChIYXNoTWFwLmhhcyhrZXlzLCBrZXkpKTtcclxuICAgICAgICAgICAga2V5c1trZXldID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIGtleTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gR2V0T3JDcmVhdGVXZWFrTWFwVGFibGUodGFyZ2V0LCBjcmVhdGUpIHtcclxuICAgICAgICAgICAgaWYgKCFoYXNPd24uY2FsbCh0YXJnZXQsIHJvb3RLZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNyZWF0ZSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcm9vdEtleSwgeyB2YWx1ZTogSGFzaE1hcC5jcmVhdGUoKSB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0W3Jvb3RLZXldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBGaWxsUmFuZG9tQnl0ZXMoYnVmZmVyLCBzaXplKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKVxyXG4gICAgICAgICAgICAgICAgYnVmZmVyW2ldID0gTWF0aC5yYW5kb20oKSAqIDB4ZmYgfCAwO1xyXG4gICAgICAgICAgICByZXR1cm4gYnVmZmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBHZW5SYW5kb21CeXRlcyhzaXplKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgVWludDhBcnJheSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNyeXB0byAhPT0gXCJ1bmRlZmluZWRcIilcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheShzaXplKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1zQ3J5cHRvICE9PSBcInVuZGVmaW5lZFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoc2l6ZSkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEZpbGxSYW5kb21CeXRlcyhuZXcgVWludDhBcnJheShzaXplKSwgc2l6ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIEZpbGxSYW5kb21CeXRlcyhuZXcgQXJyYXkoc2l6ZSksIHNpemUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBDcmVhdGVVVUlEKCkge1xyXG4gICAgICAgICAgICB2YXIgZGF0YSA9IEdlblJhbmRvbUJ5dGVzKFVVSURfU0laRSk7XHJcbiAgICAgICAgICAgIC8vIG1hcmsgYXMgcmFuZG9tIC0gUkZDIDQxMjIgwqcgNC40XHJcbiAgICAgICAgICAgIGRhdGFbNl0gPSBkYXRhWzZdICYgMHg0ZiB8IDB4NDA7XHJcbiAgICAgICAgICAgIGRhdGFbOF0gPSBkYXRhWzhdICYgMHhiZiB8IDB4ODA7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBcIlwiO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBvZmZzZXQgPSAwOyBvZmZzZXQgPCBVVUlEX1NJWkU7ICsrb2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYnl0ZSA9IGRhdGFbb2Zmc2V0XTtcclxuICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPT09IDQgfHwgb2Zmc2V0ID09PSA2IHx8IG9mZnNldCA9PT0gOClcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCItXCI7XHJcbiAgICAgICAgICAgICAgICBpZiAoYnl0ZSA8IDE2KVxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBcIjBcIjtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBieXRlLnRvU3RyaW5nKDE2KS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gdXNlcyBhIGhldXJpc3RpYyB1c2VkIGJ5IHY4IGFuZCBjaGFrcmEgdG8gZm9yY2UgYW4gb2JqZWN0IGludG8gZGljdGlvbmFyeSBtb2RlLlxyXG4gICAgZnVuY3Rpb24gTWFrZURpY3Rpb25hcnkob2JqKSB7XHJcbiAgICAgICAgb2JqLl9fID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGRlbGV0ZSBvYmouX187XHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuICAgIC8vIHBhdGNoIGdsb2JhbCBSZWZsZWN0XHJcbiAgICAoZnVuY3Rpb24gKF9fZ2xvYmFsKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBfX2dsb2JhbC5SZWZsZWN0ICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgIGlmIChfX2dsb2JhbC5SZWZsZWN0ICE9PSBSZWZsZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBwIGluIFJlZmxlY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoUmVmbGVjdCwgcCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX19nbG9iYWwuUmVmbGVjdFtwXSA9IFJlZmxlY3RbcF07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBfX2dsb2JhbC5SZWZsZWN0ID0gUmVmbGVjdDtcclxuICAgICAgICB9XHJcbiAgICB9KSh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDpcclxuICAgICAgICB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOlxyXG4gICAgICAgICAgICBGdW5jdGlvbihcInJldHVybiB0aGlzO1wiKSgpKTtcclxufSkoUmVmbGVjdCB8fCAoUmVmbGVjdCA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlZmxlY3QuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25vZGVfbW9kdWxlcy9yZWZsZWN0LW1ldGFkYXRhL1JlZmxlY3QuanNcbi8vIG1vZHVsZSBpZCA9IDE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0wOS0wNlxyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0wOS0wNlxyXG4gKlxyXG4gKiDov5nkuKrmlofku7bnmoTlrZjlnKjmmK/kuLrkuoblr7nnjrDmnIlqc+WKn+iDveaJk+ihpeS4geS/rmJ1Z+etiVxyXG4qL1xyXG4vKiog5L+u5aSNQXJyYXkuZmluZEluZGV45Lya6KKr6YGN5Y6G5Yiw55qE6Zeu6aKYICovXHJcbmlmIChBcnJheS5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkoXCJmaW5kSW5kZXhcIikpIHtcclxuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihBcnJheS5wcm90b3R5cGUsIFwiZmluZEluZGV4XCIpO1xyXG4gICAgaWYgKGRlc2MuZW51bWVyYWJsZSkge1xyXG4gICAgICAgIGRlc2MuZW51bWVyYWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsIFwiZmluZEluZGV4XCIsIGRlc2MpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCB2YXIgZGVjb3JhdGVUaGlzID0ge307XHJcbi8qKiDnr6HmlLlSZWZsZWN0LmRlY29yYXRl5pa55rOV77yM55So5LqO5Li66KOF6aWw5Zmo5pa55rOV5omT5LiqZmxhZ++8jOagh+iusOijhemlsOWZqOaYr+WQpuS4uuWPguaVsOWMluijhemlsCAqL1xyXG5pZiAoUmVmbGVjdCAmJiBSZWZsZWN0LmRlY29yYXRlKSB7XHJcbiAgICB2YXIgb3JpRGVjb3JhdGUgPSBSZWZsZWN0LmRlY29yYXRlO1xyXG4gICAgUmVmbGVjdC5kZWNvcmF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g56+h5pS5YXJnc1swXVswXe+8iOijhemlsOWZqOaWueazleW8leeUqO+8ie+8jOWcqOiwg+eUqOaXtuS4uuWFtuaPkOS+m+S4gOS4qnRoaXPmjIflkJHvvIzmjIflkJF3aW5kb3dcclxuICAgICAgICB2YXIgb3JpUmVmID0gYXJnc1swXVswXTtcclxuICAgICAgICBhcmdzWzBdWzBdID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBvcmlSZWYuYXBwbHkoZGVjb3JhdGVUaGlzLCBhcmdzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIOiwg+eUqOWOn+Wni+aWueazlVxyXG4gICAgICAgIHZhciByZXN1bHQgPSBvcmlEZWNvcmF0ZS5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgICAgICAvLyDov5jljp/nr6HmlLnpoblcclxuICAgICAgICBhcmdzWzBdWzBdID0gb3JpUmVmO1xyXG4gICAgICAgIC8vIOi/lOWbnue7k+aenFxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG59XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2NvcmUvZ2xvYmFsL1BhdGNoLmpzXG4vLyBtb2R1bGUgaWQgPSAxNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxuaW1wb3J0IE1lZGlhdG9yIGZyb20gXCIuLi9tZWRpYXRvci9NZWRpYXRvclwiO1xyXG5pbXBvcnQgeyBzY2VuZU1hbmFnZXIgfSBmcm9tIFwiLi9TY2VuZU1hbmFnZXJcIjtcclxuLyoqXHJcbiAqIEBhdXRob3IgUmF5a2lkXHJcbiAqIEBlbWFpbCBpbml0aWFsX3JAcXEuY29tXHJcbiAqIEBjcmVhdGUgZGF0ZSAyMDE3LTA5LTA4XHJcbiAqIEBtb2RpZnkgZGF0ZSAyMDE3LTA5LTA4XHJcbiAqXHJcbiAqIOWunueOsOS6hklTY2VuZeaOpeWPo+eahOWcuuaZr+S4reS7i+iAheWfuuexu1xyXG4qL1xyXG52YXIgU2NlbmVNZWRpYXRvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhTY2VuZU1lZGlhdG9yLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gU2NlbmVNZWRpYXRvcihza2luLCBwb2xpY3kpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBza2luKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLnBvbGljeSA9IHBvbGljeTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOaJk+W8gOW9k+WJjeWcuuaZr++8iOebuOW9k+S6juiwg+eUqFNjZW5lTWFuYWdlci5wdXNo5pa55rOV77yJXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHsqfSBbZGF0YV0g5pWw5o2uXHJcbiAgICAgKiBAcmV0dXJucyB7SVNjZW5lfSDlnLrmma/mnKzkvZNcclxuICAgICAqIEBtZW1iZXJvZiBTY2VuZU1lZGlhdG9yXHJcbiAgICAgKi9cclxuICAgIFNjZW5lTWVkaWF0b3IucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBzY2VuZU1hbmFnZXIucHVzaCh0aGlzLCBkYXRhKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOaJk+W8gOW9k+WJjeWcuuaZr++8iOWPquiDveeUsVNjZW5lTWFuYWdlcuiwg+eUqO+8iVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7Kn0gW2RhdGFdIOaVsOaNrlxyXG4gICAgICogQG1lbWJlcm9mIFNjZW5lTWVkaWF0b3JcclxuICAgICAqL1xyXG4gICAgU2NlbmVNZWRpYXRvci5wcm90b3R5cGUuX19vcGVuID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm9wZW4uY2FsbCh0aGlzLCBkYXRhKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOWFs+mXreW9k+WJjeWcuuaZr++8iOebuOW9k+S6juiwg+eUqFNjZW5lTWFuYWdlci5wb3Dmlrnms5XvvIlcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyp9IFtkYXRhXSDmlbDmja5cclxuICAgICAqIEByZXR1cm5zIHtJU2NlbmV9IOWcuuaZr+acrOS9k1xyXG4gICAgICogQG1lbWJlcm9mIFNjZW5lTWVkaWF0b3JcclxuICAgICAqL1xyXG4gICAgU2NlbmVNZWRpYXRvci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBzY2VuZU1hbmFnZXIucG9wKHRoaXMsIGRhdGEpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5YWz6Zet5b2T5YmN5Zy65pmv77yI5Y+q6IO955SxU2NlbmVNYW5hZ2Vy6LCD55So77yJXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHsqfSBbZGF0YV0g5pWw5o2uXHJcbiAgICAgKiBAbWVtYmVyb2YgU2NlbmVNZWRpYXRvclxyXG4gICAgICovXHJcbiAgICBTY2VuZU1lZGlhdG9yLnByb3RvdHlwZS5fX2Nsb3NlID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmNsb3NlLmNhbGwodGhpcywgZGF0YSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDliIflhaXlnLrmma/lvIDlp4vliY3osIPnlKhcclxuICAgICAqIEBwYXJhbSBmcm9tU2NlbmUg5LuO5ZOq5Liq5Zy65pmv5YiH5YWlXHJcbiAgICAgKiBAcGFyYW0gZGF0YSDliIflnLrmma/ml7blj6/og73nmoTlj4LmlbBcclxuICAgICAqL1xyXG4gICAgU2NlbmVNZWRpYXRvci5wcm90b3R5cGUub25CZWZvcmVJbiA9IGZ1bmN0aW9uIChmcm9tU2NlbmUsIGRhdGEpIHtcclxuICAgICAgICAvLyDlj6/ph43lhplcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOWIh+WFpeWcuuaZr+W8gOWni+WQjuiwg+eUqFxyXG4gICAgICogQHBhcmFtIGZyb21TY2VuZSDku47lk6rkuKrlnLrmma/liIflhaVcclxuICAgICAqIEBwYXJhbSBkYXRhIOWIh+WcuuaZr+aXtuWPr+iDveeahOWPguaVsFxyXG4gICAgICovXHJcbiAgICBTY2VuZU1lZGlhdG9yLnByb3RvdHlwZS5vbkFmdGVySW4gPSBmdW5jdGlvbiAoZnJvbVNjZW5lLCBkYXRhKSB7XHJcbiAgICAgICAgLy8g5Y+v6YeN5YaZXHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDliIflh7rlnLrmma/lvIDlp4vliY3osIPnlKhcclxuICAgICAqIEBwYXJhbSB0b1NjZW5lIOimgeWIh+WFpeWIsOWTquS4quWcuuaZr1xyXG4gICAgICogQHBhcmFtIGRhdGEg5YiH5Zy65pmv5pe25Y+v6IO955qE5Y+C5pWwXHJcbiAgICAgKi9cclxuICAgIFNjZW5lTWVkaWF0b3IucHJvdG90eXBlLm9uQmVmb3JlT3V0ID0gZnVuY3Rpb24gKHRvU2NlbmUsIGRhdGEpIHtcclxuICAgICAgICAvLyDlj6/ph43lhplcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOWIh+WHuuWcuuaZr+W8gOWni+WQjuiwg+eUqFxyXG4gICAgICogQHBhcmFtIHRvU2NlbmUg6KaB5YiH5YWl5Yiw5ZOq5Liq5Zy65pmvXHJcbiAgICAgKiBAcGFyYW0gZGF0YSDliIflnLrmma/ml7blj6/og73nmoTlj4LmlbBcclxuICAgICAqL1xyXG4gICAgU2NlbmVNZWRpYXRvci5wcm90b3R5cGUub25BZnRlck91dCA9IGZ1bmN0aW9uICh0b1NjZW5lLCBkYXRhKSB7XHJcbiAgICAgICAgLy8g5Y+v6YeN5YaZXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFNjZW5lTWVkaWF0b3I7XHJcbn0oTWVkaWF0b3IpKTtcclxuZXhwb3J0IGRlZmF1bHQgU2NlbmVNZWRpYXRvcjtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL3NjZW5lL1NjZW5lTWVkaWF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCB7IGV4dGVuZE9iamVjdCB9IGZyb20gXCIuL09iamVjdFV0aWxcIjtcclxuLyoqXHJcbiAqIOinhOaVtHVybFxyXG4gKiBAcGFyYW0gdXJsXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdHJpbVVSTCh1cmwpIHtcclxuICAgIC8vIOWOu+mZpOWkmuS9meeahFwiL1wiXHJcbiAgICB1cmwgPSB1cmwucmVwbGFjZSgvKFteOi9dKShcXC8pKy9nLCBcIiQxL1wiKTtcclxuICAgIGlmICh1cmwuY2hhckF0KDApID09IFwiL1wiKVxyXG4gICAgICAgIHVybCA9IHVybC5zdWJzdHIoMSk7XHJcbiAgICAvLyDlpITnkIZcIi8uL1wiXHJcbiAgICB2YXIgaW5kZXg7XHJcbiAgICB3aGlsZSAoKGluZGV4ID0gdXJsLmluZGV4T2YoXCIvLi9cIikpID49IDApIHtcclxuICAgICAgICB1cmwgPSB1cmwucmVwbGFjZShcIi8uL1wiLCBcIi9cIik7XHJcbiAgICB9XHJcbiAgICAvLyDlpITnkIZcIi94eC8uLi9cIlxyXG4gICAgdmFyIHJlZyA9IC9cXC9bXlxcL1xcLl0rP1xcL1xcLlxcLlxcLy87XHJcbiAgICB3aGlsZSAocmVnLnRlc3QodXJsKSkge1xyXG4gICAgICAgIHVybCA9IHVybC5yZXBsYWNlKHJlZywgXCIvXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVybDtcclxufVxyXG4vKipcclxuICog5qOA5p+lVVJM5piv5ZCm5piv57ud5a+56Lev5b6E77yI5YW35pyJ5Y2P6K6u5aS077yJXHJcbiAqIEBwYXJhbSB1cmwg6KaB5Yik5pat55qEVVJMXHJcbiAqIEByZXR1cm5zIHthbnl9IOaYr+WQpuaYr+e7neWvuei3r+W+hFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzQWJzb2x1dGVQYXRoKHVybCkge1xyXG4gICAgaWYgKHVybCA9PSBudWxsKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHJldHVybiAodXJsLmluZGV4T2YoXCI6Ly9cIikgPj0gMCk7XHJcbn1cclxuLyoqXHJcbiAqIOWmguaenHVybOaciXByb3RvY29s77yM5L2/5YW25LiO5b2T5YmN5Z+f5ZCN55qEcHJvdG9jb2znu5/kuIDvvIzlkKbliJnkvJrot6jln59cclxuICogQHBhcmFtIHVybCDopoHnu5/kuIBwcm90b2NvbOeahHVybFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlUHJvdG9jb2wodXJsKSB7XHJcbiAgICBpZiAodXJsID09IG51bGwpXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB2YXIgaW5kZXggPSB1cmwuaW5kZXhPZihcIjovL1wiKTtcclxuICAgIGlmIChpbmRleCA8IDApXHJcbiAgICAgICAgcmV0dXJuIHVybDtcclxuICAgIHZhciBwcm90b2NvbCA9IHVybC5zdWJzdHJpbmcoMCwgaW5kZXgpO1xyXG4gICAgLy8g6LCD5pW0aHR0cOWSjGh0dHBzXHJcbiAgICBpZiAocHJvdG9jb2wgPT0gXCJodHRwXCIgfHwgcHJvdG9jb2wgPT0gXCJodHRwc1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCArIHVybC5zdWJzdHIoaW5kZXggKyAxKTtcclxuICAgIH1cclxuICAgIC8vIOiwg+aVtHdz5ZKMd3NzXHJcbiAgICBpZiAocHJvdG9jb2wgPT0gXCJ3c1wiIHx8IHByb3RvY29sID09IFwid3NzXCIpIHtcclxuICAgICAgICBpZiAod2luZG93LmxvY2F0aW9uLnByb3RvY29sID09IFwiaHR0cHM6XCIpXHJcbiAgICAgICAgICAgIHByb3RvY29sID0gXCJ3c3NcIjtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHByb3RvY29sID0gXCJ3c1wiO1xyXG4gICAgICAgIHJldHVybiBwcm90b2NvbCArIHVybC5zdWJzdHIoaW5kZXgpO1xyXG4gICAgfVxyXG4gICAgLy8g5LiN6ZyA6KaB6LCD5pW0XHJcbiAgICByZXR1cm4gdXJsO1xyXG59XHJcbi8qKlxyXG4gKiDmm7/mjaJ1cmzkuK3nmoRob3N0XHJcbiAqIEBwYXJhbSB1cmwgICAgICAgdXJsXHJcbiAqIEBwYXJhbSBob3N0ICAgICAg6KaB5pu/5o2i55qEaG9zdFxyXG4gKiBAcGFyYW0gZm9yY2VkICAgIOaYr+WQpuW8uuWItuabv+aNou+8iOm7mOiupGZhbHNl77yJXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gd3JhcEhvc3QodXJsLCBob3N0LCBmb3JjZWQpIHtcclxuICAgIGlmIChmb3JjZWQgPT09IHZvaWQgMCkgeyBmb3JjZWQgPSBmYWxzZTsgfVxyXG4gICAgaG9zdCA9IGhvc3QgfHwgd2luZG93LmxvY2F0aW9uLm9yaWdpbjtcclxuICAgIHZhciByZSA9IC9eKD86W15cXC9dKyk6XFwvezIsfSg/OlteXFwvXSspXFwvLztcclxuICAgIHZhciBhcnIgPSB1cmwubWF0Y2gocmUpO1xyXG4gICAgaWYgKGFyciAmJiBhcnIubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGlmIChmb3JjZWQpIHtcclxuICAgICAgICAgICAgdXJsID0gdXJsLnN1YnN0cihhcnJbMF0ubGVuZ3RoKTtcclxuICAgICAgICAgICAgdXJsID0gaG9zdCArIFwiL1wiICsgdXJsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHVybCA9IGhvc3QgKyBcIi9cIiArIHVybDtcclxuICAgIH1cclxuICAgIC8vIOWQiOazleWMluS4gOS4i3Byb3RvY29sXHJcbiAgICB1cmwgPSB2YWxpZGF0ZVByb3RvY29sKHVybCk7XHJcbiAgICAvLyDmnIDlkI7op4TmlbTkuIDkuIt1cmxcclxuICAgIHVybCA9IHRyaW1VUkwodXJsKTtcclxuICAgIHJldHVybiB1cmw7XHJcbn1cclxuLyoqXHJcbiAqIOWwhuebuOWvueS6juW9k+WJjemhtemdoueahOebuOWvuei3r+W+hOWMheijheaIkOe7neWvuei3r+W+hFxyXG4gKiBAcGFyYW0gcmVsYXRpdmVQYXRoIOebuOWvueS6juW9k+WJjemhtemdoueahOebuOWvuei3r+W+hFxyXG4gKiBAcGFyYW0gaG9zdCDkvKDpgJLor6Xlj4LmlbDkvJrnlKjor6Vob3N05pu/5o2i5b2T5YmNaG9zdFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBBYnNvbHV0ZVBhdGgocmVsYXRpdmVQYXRoLCBob3N0KSB7XHJcbiAgICAvLyDojrflj5blvZPliY3pobXpnaLnmoR1cmxcclxuICAgIHZhciBjdXJQYXRoID0gZ2V0UGF0aCh3aW5kb3cubG9jYXRpb24uaHJlZik7XHJcbiAgICB2YXIgdXJsID0gdHJpbVVSTChjdXJQYXRoICsgXCIvXCIgKyByZWxhdGl2ZVBhdGgpO1xyXG4gICAgaWYgKGhvc3QgIT0gbnVsbCkge1xyXG4gICAgICAgIHVybCA9IHdyYXBIb3N0KHVybCwgaG9zdCwgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdXJsO1xyXG59XHJcbi8qKlxyXG4gKiDojrflj5ZVUkznmoRob3N0K3BhdGhuYW1l6YOo5YiG77yM5Y2z6Zeu5Y+3KD8p5Lul5YmN55qE6YOo5YiGXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0SG9zdEFuZFBhdGhuYW1lKHVybCkge1xyXG4gICAgaWYgKHVybCA9PSBudWxsKVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInVybOS4jeiDveS4uuepulwiKTtcclxuICAgIC8vIOWOu+aOiWdldOWPguaVsOWSjGhhc2hcclxuICAgIHVybCA9IHVybC5zcGxpdChcIiNcIilbMF0uc3BsaXQoXCI/XCIpWzBdO1xyXG4gICAgLy8g5Y675o6J5aSa5L2Z55qEL1xyXG4gICAgdXJsID0gdHJpbVVSTCh1cmwpO1xyXG4gICAgcmV0dXJuIHVybDtcclxufVxyXG4vKipcclxuICog6I635Y+WVVJM6Lev5b6E77yI5paH5Lu25ZCN5YmN55qE6YOo5YiG77yJXHJcbiAqIEBwYXJhbSB1cmwg6KaB5YiG5p6Q55qEVVJMXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGF0aCh1cmwpIHtcclxuICAgIC8vIOmmluWFiOWOu+aOieWkmuS9meeahC9cclxuICAgIHVybCA9IGdldEhvc3RBbmRQYXRobmFtZSh1cmwpO1xyXG4gICAgLy8g54S25ZCO6I635Y+W5Yiw6Lev5b6EXHJcbiAgICB2YXIgdXJsQXJyID0gdXJsLnNwbGl0KFwiL1wiKTtcclxuICAgIHVybEFyci5wb3AoKTtcclxuICAgIHJldHVybiB1cmxBcnIuam9pbihcIi9cIikgKyBcIi9cIjtcclxufVxyXG4vKipcclxuICog6I635Y+WVVJM55qE5paH5Lu25ZCNXHJcbiAqIEBwYXJhbSB1cmwg6KaB5YiG5p6Q55qEVVJMXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmFtZSh1cmwpIHtcclxuICAgIC8vIOWFiOWOu+aOiWdldOWPguaVsOWSjGhhc2hcclxuICAgIHVybCA9IHVybC5zcGxpdChcIiNcIilbMF0uc3BsaXQoXCI/XCIpWzBdO1xyXG4gICAgLy8g54S25ZCO6I635Y+W5Yiw5paH5Lu25ZCNXHJcbiAgICB2YXIgdXJsQXJyID0gdXJsLnNwbGl0KFwiL1wiKTtcclxuICAgIHZhciBmaWxlTmFtZSA9IHVybEFyclt1cmxBcnIubGVuZ3RoIC0gMV07XHJcbiAgICByZXR1cm4gZmlsZU5hbWU7XHJcbn1cclxuLyoqXHJcbiAqIOino+aekFVSTFxyXG4gKiBAcGFyYW0gdXJsIOimgeiiq+ino+aekOeahFVSTOWtl+espuS4slxyXG4gKiBAcmV0dXJucyB7YW55fSDop6PmnpDlkI7nmoRVUkxMb2NhdGlvbue7k+aehOS9k1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVXJsKHVybCkge1xyXG4gICAgdmFyIHJlZ0V4cCA9IC8oKFteOl0rOilcXC9cXC8oKFteOlxcL1xcPyNdKykoOihcXGQrKSk/KSkoXFwvW14/I10qKT8oXFw/W14jXSopPygjLiopPy87XHJcbiAgICB2YXIgbWF0Y2ggPSByZWdFeHAuZXhlYyh1cmwpO1xyXG4gICAgaWYgKG1hdGNoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaHJlZjogbWF0Y2hbMF0gfHwgXCJcIixcclxuICAgICAgICAgICAgb3JpZ2luOiBtYXRjaFsxXSB8fCBcIlwiLFxyXG4gICAgICAgICAgICBwcm90b2NvbDogbWF0Y2hbMl0gfHwgXCJcIixcclxuICAgICAgICAgICAgaG9zdDogbWF0Y2hbM10gfHwgXCJcIixcclxuICAgICAgICAgICAgaG9zdG5hbWU6IG1hdGNoWzRdIHx8IFwiXCIsXHJcbiAgICAgICAgICAgIHBvcnQ6IG1hdGNoWzZdIHx8IFwiXCIsXHJcbiAgICAgICAgICAgIHBhdGhuYW1lOiBtYXRjaFs3XSB8fCBcIlwiLFxyXG4gICAgICAgICAgICBzZWFyY2g6IG1hdGNoWzhdIHx8IFwiXCIsXHJcbiAgICAgICAgICAgIGhhc2g6IChtYXRjaFs5XSA9PSBcIiNcIiA/IFwiXCIgOiBtYXRjaFs5XSkgfHwgXCJcIlxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLkvKDlhaVwYXJzZVVybOaWueazleeahOWPguaVsOS4jeaYr+S4gOS4quWujOaVtOeahFVSTO+8mlwiICsgdXJsKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICog6Kej5p6QdXJs5p+l6K+i5Y+C5pWwXHJcbiAqIEBUT0RPIOa3u+WKoOWvuWpxdWVyeee8lueggeaWueW8j+eahOaUr+aMgVxyXG4gKiBAcGFyYW0gdXJsIHVybFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFF1ZXJ5UGFyYW1zKHVybCkge1xyXG4gICAgdmFyIGluZGV4ID0gdXJsLmluZGV4T2YoXCIjXCIpO1xyXG4gICAgaWYgKGluZGV4ID49IDApIHtcclxuICAgICAgICB1cmwgPSB1cmwuc3Vic3RyaW5nKDAsIGluZGV4KTtcclxuICAgIH1cclxuICAgIGluZGV4ID0gdXJsLmluZGV4T2YoXCI/XCIpO1xyXG4gICAgaWYgKGluZGV4IDwgMClcclxuICAgICAgICByZXR1cm4ge307XHJcbiAgICB2YXIgcXVlcnlTdHJpbmcgPSB1cmwuc3Vic3RyaW5nKGluZGV4ICsgMSk7XHJcbiAgICB2YXIgcGFyYW1zID0ge307XHJcbiAgICB2YXIga3ZzID0gcXVlcnlTdHJpbmcuc3BsaXQoXCImXCIpO1xyXG4gICAga3ZzLmZvckVhY2goZnVuY3Rpb24gKGt2KSB7XHJcbiAgICAgICAgdmFyIHBhaXIgPSBrdi5zcGxpdChcIj1cIiwgMik7XHJcbiAgICAgICAgaWYgKHBhaXIubGVuZ3RoICE9PSAyIHx8ICFwYWlyWzBdKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW1VSTFV0aWxdIGludmFsaWQgcXVlcnkgcGFyYW1zOiBcIiArIGt2KTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbmFtZSA9IGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzBdKTtcclxuICAgICAgICB2YXIgdmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQocGFpclsxXSk7XHJcbiAgICAgICAgcGFyYW1zW25hbWVdID0gdmFsdWU7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBwYXJhbXM7XHJcbn1cclxuLyoqXHJcbiAqIOWwhuWPguaVsOi/nuaOpeWIsOaMh+WumlVSTOWQjumdolxyXG4gKiBAcGFyYW0gdXJsIHVybFxyXG4gKiBAcGFyYW0gcGFyYW1zIOS4gOS4qm1hcO+8jOWMheWQq+imgei/nuaOpeeahOWPguaVsFxyXG4gKiBAcmV0dXJuIHN0cmluZyDov57mjqXlkI7nmoRVUkzlnLDlnYBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBqb2luUXVlcnlQYXJhbXModXJsLCBwYXJhbXMpIHtcclxuICAgIGlmICh1cmwgPT0gbnVsbClcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1cmzkuI3og73kuLrnqbpcIik7XHJcbiAgICB2YXIgb3JpUGFyYW1zID0gZ2V0UXVlcnlQYXJhbXModXJsKTtcclxuICAgIHZhciB0YXJnZXRQYXJhbXMgPSBleHRlbmRPYmplY3Qob3JpUGFyYW1zLCBwYXJhbXMpO1xyXG4gICAgdmFyIGhhc2ggPSBwYXJzZVVybCh1cmwpLmhhc2g7XHJcbiAgICB1cmwgPSBnZXRIb3N0QW5kUGF0aG5hbWUodXJsKTtcclxuICAgIHZhciBpc0ZpcnN0ID0gdHJ1ZTtcclxuICAgIGZvciAodmFyIGtleSBpbiB0YXJnZXRQYXJhbXMpIHtcclxuICAgICAgICBpZiAoaXNGaXJzdCkge1xyXG4gICAgICAgICAgICB1cmwgKz0gXCI/XCIgKyBlbmNvZGVVUklDb21wb25lbnQoa2V5KSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHRhcmdldFBhcmFtc1trZXldKTtcclxuICAgICAgICAgICAgaXNGaXJzdCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdXJsICs9IFwiJlwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudCh0YXJnZXRQYXJhbXNba2V5XSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8g5Yqg5LiKaGFzaFxyXG4gICAgdXJsICs9IGhhc2g7XHJcbiAgICByZXR1cm4gdXJsO1xyXG59XHJcbi8qKlxyXG4gKiDlsIblj4LmlbDpk77mjqXliLBVUkznmoRoYXNo5ZCO6Z2iXHJcbiAqIEBwYXJhbSB1cmwg5aaC5p6c5Lyg5YWl55qEdXJs5rKh5pyJ5rOo5piOaGFzaOaooeWdl++8jOWImeS4jeS8mui/m+ihjOaTjeS9nFxyXG4gKiBAcGFyYW0gcGFyYW1zIOS4gOS4qm1hcO+8jOWMheWQq+imgei/nuaOpeeahOWPguaVsFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGpvaW5IYXNoUGFyYW1zKHVybCwgcGFyYW1zKSB7XHJcbiAgICBpZiAodXJsID09IG51bGwpXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidXJs5LiN6IO95Li656m6XCIpO1xyXG4gICAgdmFyIGhhc2ggPSBwYXJzZVVybCh1cmwpLmhhc2g7XHJcbiAgICBpZiAoaGFzaCA9PSBudWxsIHx8IGhhc2ggPT0gXCJcIilcclxuICAgICAgICByZXR1cm4gdXJsO1xyXG4gICAgZm9yICh2YXIga2V5IGluIHBhcmFtcykge1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IHBhcmFtc1trZXldO1xyXG4gICAgICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgIT0gXCJzdHJpbmdcIilcclxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xyXG4gICAgICAgIGhhc2ggKz0gKChoYXNoLmluZGV4T2YoXCI/XCIpIDwgMCA/IFwiP1wiIDogXCImXCIpICsgZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICh1cmwuc3BsaXQoXCIjXCIpWzBdICsgaGFzaCk7XHJcbn1cclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvdXRpbHMvVVJMVXRpbC5qc1xuLy8gbW9kdWxlIGlkID0gMTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8vIDxhbWQtbW9kdWxlIG5hbWU9XCJFZ3JldEJyaWRnZVwiLz5cclxuaW1wb3J0IHsgY29yZSB9IGZyb20gXCJvbHltcHVzLXIvY29yZS9Db3JlXCI7XHJcbmltcG9ydCBNb2R1bGVNZXNzYWdlIGZyb20gXCJvbHltcHVzLXIvZW5naW5lL21vZHVsZS9Nb2R1bGVNZXNzYWdlXCI7XHJcbmltcG9ydCBSZW5kZXJNb2RlIGZyb20gXCIuL2VncmV0L1JlbmRlck1vZGVcIjtcclxuaW1wb3J0IEFzc2V0c0xvYWRlciBmcm9tIFwiLi9lZ3JldC9Bc3NldHNMb2FkZXJcIjtcclxuaW1wb3J0IEJhY2tQYW5lbFBvbGljeSBmcm9tIFwiLi9lZ3JldC9wYW5lbC9CYWNrUGFuZWxQb2xpY3lcIjtcclxuaW1wb3J0IEZhZGVTY2VuZVBvbGljeSBmcm9tIFwiLi9lZ3JldC9zY2VuZS9GYWRlU2NlbmVQb2xpY3lcIjtcclxuaW1wb3J0IE1hc2tFbnRpdHkgZnJvbSBcIi4vZWdyZXQvbWFzay9NYXNrRW50aXR5XCI7XHJcbmltcG9ydCB7IHdyYXBFVUlMaXN0IH0gZnJvbSBcIi4vZWdyZXQvdXRpbHMvVUlVdGlsXCI7XHJcbi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0wOS0xOFxyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0wOS0xOFxyXG4gKlxyXG4gKiBFZ3JldOeahOihqOeOsOWxguahpeWunueOsO+8jOW9k+WJjUVncmV054mI5pys77yaNS4wLjdcclxuKi9cclxudmFyIEVncmV0QnJpZGdlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRWdyZXRCcmlkZ2UocGFyYW1zKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6buY6K6k5by556qX562W55WlXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAdHlwZSB7SVBhbmVsUG9saWN5fVxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBFZ3JldEJyaWRnZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuZGVmYXVsdFBhbmVsUG9saWN5ID0gbmV3IEJhY2tQYW5lbFBvbGljeSgpO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOm7mOiupOWcuuaZr+WIh+aNouetlueVpVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHR5cGUge0lTY2VuZVBvbGljeX1cclxuICAgICAgICAgKiBAbWVtYmVyb2YgRWdyZXRCcmlkZ2VcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmRlZmF1bHRTY2VuZVBvbGljeSA9IG5ldyBGYWRlU2NlbmVQb2xpY3koKTtcclxuICAgICAgICB0aGlzLl9pbml0UGFyYW1zID0gcGFyYW1zO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEVncmV0QnJpZGdlLnByb3RvdHlwZSwgXCJ0eXBlXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDojrflj5booajnjrDlsYLnsbvlnovlkI3np7BcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEByZWFkb25seVxyXG4gICAgICAgICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICAgICAgICogQG1lbWJlcm9mIEVncmV0QnJpZGdlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBFZ3JldEJyaWRnZS5UWVBFO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEVncmV0QnJpZGdlLnByb3RvdHlwZSwgXCJodG1sV3JhcHBlclwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6I635Y+W6KGo546w5bGCSFRNTOWMheijheWZqO+8jOWPr+S7peWvueWFtuagt+W8j+i/m+ihjOiHquWumuS5ieiwg+aVtFxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJlYWRvbmx5XHJcbiAgICAgICAgICogQHR5cGUge0hUTUxFbGVtZW50fVxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBFZ3JldEJyaWRnZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5pdFBhcmFtcy5jb250YWluZXI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRWdyZXRCcmlkZ2UucHJvdG90eXBlLCBcInJvb3RcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPluagueaYvuekuuiKgueCuVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJlYWRvbmx5XHJcbiAgICAgICAgICogQHR5cGUge2VncmV0LkRpc3BsYXlPYmplY3RDb250YWluZXJ9XHJcbiAgICAgICAgICogQG1lbWJlcm9mIEVncmV0QnJpZGdlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yb290O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEVncmV0QnJpZGdlLnByb3RvdHlwZSwgXCJzdGFnZVwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6I635Y+W6Iie5Y+w5byV55SoXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcmVhZG9ubHlcclxuICAgICAgICAgKiBAdHlwZSB7ZWdyZXQuU3RhZ2V9XHJcbiAgICAgICAgICogQG1lbWJlcm9mIEVncmV0QnJpZGdlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdGFnZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFZ3JldEJyaWRnZS5wcm90b3R5cGUsIFwiYmdMYXllclwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6I635Y+W6IOM5pmv5a655ZmoXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcmVhZG9ubHlcclxuICAgICAgICAgKiBAdHlwZSB7ZWdyZXQuRGlzcGxheU9iamVjdENvbnRhaW5lcn1cclxuICAgICAgICAgKiBAbWVtYmVyb2YgRWdyZXRCcmlkZ2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2JnTGF5ZXI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRWdyZXRCcmlkZ2UucHJvdG90eXBlLCBcInNjZW5lTGF5ZXJcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPluWcuuaZr+WuueWZqFxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJlYWRvbmx5XHJcbiAgICAgICAgICogQHR5cGUge2VncmV0LkRpc3BsYXlPYmplY3RDb250YWluZXJ9XHJcbiAgICAgICAgICogQG1lbWJlcm9mIEVncmV0QnJpZGdlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zY2VuZUxheWVyO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEVncmV0QnJpZGdlLnByb3RvdHlwZSwgXCJmcmFtZUxheWVyXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDojrflj5bmoYbmnrblrrnlmahcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEByZWFkb25seVxyXG4gICAgICAgICAqIEB0eXBlIHtlZ3JldC5EaXNwbGF5T2JqZWN0Q29udGFpbmVyfVxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBFZ3JldEJyaWRnZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZnJhbWVMYXllcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFZ3JldEJyaWRnZS5wcm90b3R5cGUsIFwicGFuZWxMYXllclwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6I635Y+W5by556qX5a655ZmoXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcmVhZG9ubHlcclxuICAgICAgICAgKiBAdHlwZSB7ZWdyZXQuRGlzcGxheU9iamVjdENvbnRhaW5lcn1cclxuICAgICAgICAgKiBAbWVtYmVyb2YgRWdyZXRCcmlkZ2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhbmVsTGF5ZXI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRWdyZXRCcmlkZ2UucHJvdG90eXBlLCBcIm1hc2tMYXllclwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6I635Y+W6YGu572p5a655ZmoXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcmVhZG9ubHlcclxuICAgICAgICAgKiBAdHlwZSB7ZWdyZXQuRGlzcGxheU9iamVjdENvbnRhaW5lcn1cclxuICAgICAgICAgKiBAbWVtYmVyb2YgRWdyZXRCcmlkZ2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21hc2tMYXllcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFZ3JldEJyaWRnZS5wcm90b3R5cGUsIFwidG9wTGF5ZXJcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPlumhtue6p+WuueWZqFxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJlYWRvbmx5XHJcbiAgICAgICAgICogQHR5cGUge2VncmV0LkRpc3BsYXlPYmplY3RDb250YWluZXJ9XHJcbiAgICAgICAgICogQG1lbWJlcm9mIEVncmV0QnJpZGdlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90b3BMYXllcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFZ3JldEJyaWRnZS5wcm90b3R5cGUsIFwicHJvbXB0Q2xhc3NcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPlumAmueUqOaPkOekuuahhlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJlYWRvbmx5XHJcbiAgICAgICAgICogQHR5cGUge0lQcm9tcHRQYW5lbENvbnN0cnVjdG9yfVxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBFZ3JldEJyaWRnZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5pdFBhcmFtcy5wcm9tcHRDbGFzcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFZ3JldEJyaWRnZS5wcm90b3R5cGUsIFwibWFza0VudGl0eVwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6I635Y+W6YGu572p5a6e5L2TXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcmVhZG9ubHlcclxuICAgICAgICAgKiBAdHlwZSB7SU1hc2tFbnRpdHl9XHJcbiAgICAgICAgICogQG1lbWJlcm9mIEVncmV0QnJpZGdlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTWFza0VudGl0eSh0aGlzLl9pbml0UGFyYW1zLm1hc2tEYXRhKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIC8qKlxyXG4gICAgICog5Yid5aeL5YyW6KGo546w5bGC5qGlXHJcbiAgICAgKiBAcGFyYW0geygpPT52b2lkfSBjb21wbGV0ZSDliJ3lp4vljJblrozmr5XlkI7nmoTlm57osINcclxuICAgICAqIEBtZW1iZXJvZiBFZ3JldEJyaWRnZVxyXG4gICAgICovXHJcbiAgICBFZ3JldEJyaWRnZS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChjb21wbGV0ZSkge1xyXG4gICAgICAgIC8vIOeUn+aIkGh0bWzlkoxib2R555qE5qC35byP6IqC54K5XHJcbiAgICAgICAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xyXG4gICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gXCJcXG4gICAgICAgICAgICBodG1sLCBib2R5IHtcXG4gICAgICAgICAgICAgICAgLW1zLXRvdWNoLWFjdGlvbjogbm9uZTtcXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogXCIgKyBlZ3JldC50b0NvbG9yU3RyaW5nKHRoaXMuX2luaXRQYXJhbXMuYmFja2dyb3VuZENvbG9yIHx8IDApICsgXCI7XFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDA7XFxuICAgICAgICAgICAgICAgIGJvcmRlcjogMDtcXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwO1xcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgXCI7XHJcbiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XHJcbiAgICAgICAgLy8g57uf5LiA5a655ZmoXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9pbml0UGFyYW1zLmNvbnRhaW5lciA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2luaXRQYXJhbXMuY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl9pbml0UGFyYW1zLmNvbnRhaW5lcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5faW5pdFBhcmFtcy5jb250YWluZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5faW5pdFBhcmFtcy5jb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2luaXRQYXJhbXMuY29udGFpbmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IHRoaXMuX2luaXRQYXJhbXMuY29udGFpbmVyO1xyXG4gICAgICAgIC8vIOaehOW7uuWuueWZqOWPguaVsFxyXG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS5tYXJnaW4gPSBcImF1dG9cIjtcclxuICAgICAgICBjb250YWluZXIuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcclxuICAgICAgICBjb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XHJcbiAgICAgICAgY29udGFpbmVyLmNsYXNzTmFtZSA9IFwiZWdyZXQtcGxheWVyXCI7XHJcbiAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZShcImRhdGEtZW50cnktY2xhc3NcIiwgXCJfX0VncmV0Um9vdF9fXCIpO1xyXG4gICAgICAgIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoXCJkYXRhLW9yaWVudGF0aW9uXCIsIFwiYXV0b1wiKTtcclxuICAgICAgICBjb250YWluZXIuc2V0QXR0cmlidXRlKFwiZGF0YS1zY2FsZS1tb2RlXCIsIHRoaXMuX2luaXRQYXJhbXMuc2NhbGVNb2RlIHx8IGVncmV0LlN0YWdlU2NhbGVNb2RlLkZJWEVEX05BUlJPVyk7XHJcbiAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZShcImRhdGEtZnJhbWUtcmF0ZVwiLCAodGhpcy5faW5pdFBhcmFtcy5mcmFtZVJhdGUgfHwgNjApICsgXCJcIik7XHJcbiAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZShcImRhdGEtY29udGVudC13aWR0aFwiLCB0aGlzLl9pbml0UGFyYW1zLndpZHRoICsgXCJcIik7XHJcbiAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZShcImRhdGEtY29udGVudC1oZWlnaHRcIiwgdGhpcy5faW5pdFBhcmFtcy5oZWlnaHQgKyBcIlwiKTtcclxuICAgICAgICBjb250YWluZXIuc2V0QXR0cmlidXRlKFwiZGF0YS1zaG93LXBhaW50LXJlY3RcIiwgKHRoaXMuX2luaXRQYXJhbXMuc2hvd1BhaW50UmVjdCB8fCBmYWxzZSkgKyBcIlwiKTtcclxuICAgICAgICBjb250YWluZXIuc2V0QXR0cmlidXRlKFwiZGF0YS1tdWx0aS1maW5nZXJlZFwiLCAodGhpcy5faW5pdFBhcmFtcy5tdWx0aUZpbmdlcmVkIHx8IDIpICsgXCJcIik7XHJcbiAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZShcImRhdGEtc2hvdy1mcHNcIiwgKHRoaXMuX2luaXRQYXJhbXMuc2hvd0ZQUyB8fCBmYWxzZSkgKyBcIlwiKTtcclxuICAgICAgICBjb250YWluZXIuc2V0QXR0cmlidXRlKFwiZGF0YS1zaG93LWZwcy1zdHlsZVwiLCB0aGlzLl9pbml0UGFyYW1zLnNob3dGUFNTdHlsZSB8fCBcIng6MCx5OjAsc2l6ZToxMix0ZXh0Q29sb3I6MHhmZmZmZmYsYmdBbHBoYTowLjlcIik7XHJcbiAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZShcImRhdGEtc2hvdy1sb2dcIiwgKHRoaXMuX2luaXRQYXJhbXMuc2hvd0xvZyB8fCBmYWxzZSkgKyBcIlwiKTtcclxuICAgICAgICAvLyDmnoTlu7pfX0VncmV0Um9vdF9f57G777yM5L2/5b6XRWdyZXTlvJXmk47lj6/ku6XpgJrov4d3aW5kb3flr7vlnYDnmoTmlrnlvI/mib7liLDor6XnsbvvvIzlkIzml7blj4jlj6/ku6XorqnlhbblsIbmjqfliLbmnYPovazkuqTnu5lBcHBsaWNhdGlvblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICB3aW5kb3dbXCJfX0VncmV0Um9vdF9fXCJdID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBldWkuVUlMYXllci5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLnRvdWNoRW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgd2luZG93W1wiX19FZ3JldFJvb3RfX1wiXS5wcm90b3R5cGUgPSBuZXcgZXVpLlVJTGF5ZXIoKTtcclxuICAgICAgICB3aW5kb3dbXCJfX0VncmV0Um9vdF9fXCJdLnByb3RvdHlwZS4kb25BZGRUb1N0YWdlID0gZnVuY3Rpb24gKHN0YWdlLCBuZXN0TGV2ZWwpIHtcclxuICAgICAgICAgICAgLy8g6LCD55So54i257G75pa55rOVXHJcbiAgICAgICAgICAgIGV1aS5VSUxheWVyLnByb3RvdHlwZS4kb25BZGRUb1N0YWdlLmNhbGwodGhpcywgc3RhZ2UsIG5lc3RMZXZlbCk7XHJcbiAgICAgICAgICAgIC8vIOenu+mZpOW8leeUqFxyXG4gICAgICAgICAgICBkZWxldGUgd2luZG93W1wiX19FZ3JldFJvb3RfX1wiXTtcclxuICAgICAgICAgICAgLy8g5bCG5o6n5Yi25p2D56e75Lqk57uZQXBwbGljYXRpb27lr7nosaFcclxuICAgICAgICAgICAgb25Sb290SW5pdGlhbGl6ZWQodGhpcyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyDmoLnmja7muLLmn5PmqKHlvI/liJ3lp4vljJZFZ3JldOW8leaTjlxyXG4gICAgICAgIHN3aXRjaCAodGhpcy5faW5pdFBhcmFtcy5yZW5kZXJNb2RlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgUmVuZGVyTW9kZS5XRUJHTDpcclxuICAgICAgICAgICAgICAgIGluaXRFZ3JldChcIndlYmdsXCIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgUmVuZGVyTW9kZS5DQU5WQVM6XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBpbml0RWdyZXQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gaW5pdEVncmV0KHJlbmRlck1vZGUpIHtcclxuICAgICAgICAgICAgLy8g5ZCv5YqoRWdyZXTlvJXmk45cclxuICAgICAgICAgICAgZWdyZXQucnVuRWdyZXQoe1xyXG4gICAgICAgICAgICAgICAgcmVuZGVyTW9kZTogcmVuZGVyTW9kZSxcclxuICAgICAgICAgICAgICAgIGF1ZGlvVHlwZTogMFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gb25Sb290SW5pdGlhbGl6ZWQocm9vdCkge1xyXG4gICAgICAgICAgICBzZWxmLl9yb290ID0gcm9vdDtcclxuICAgICAgICAgICAgc2VsZi5fc3RhZ2UgPSByb290LnN0YWdlO1xyXG4gICAgICAgICAgICAvLyDliJvlu7rog4zmma/mmL7npLrlsYJcclxuICAgICAgICAgICAgc2VsZi5fYmdMYXllciA9IG5ldyBldWkuVUlMYXllcigpO1xyXG4gICAgICAgICAgICBzZWxmLl9iZ0xheWVyLnRvdWNoRW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICByb290LmFkZENoaWxkKHNlbGYuX2JnTGF5ZXIpO1xyXG4gICAgICAgICAgICAvLyDliJvlu7rlnLrmma/mmL7npLrlsYJcclxuICAgICAgICAgICAgc2VsZi5fc2NlbmVMYXllciA9IG5ldyBldWkuVUlMYXllcigpO1xyXG4gICAgICAgICAgICBzZWxmLl9zY2VuZUxheWVyLnRvdWNoRW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICByb290LmFkZENoaWxkKHNlbGYuX3NjZW5lTGF5ZXIpO1xyXG4gICAgICAgICAgICAvLyDliJvlu7rmoYbmnrbmmL7npLrlsYJcclxuICAgICAgICAgICAgc2VsZi5fZnJhbWVMYXllciA9IG5ldyBldWkuVUlMYXllcigpO1xyXG4gICAgICAgICAgICBzZWxmLl9mcmFtZUxheWVyLnRvdWNoRW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICByb290LmFkZENoaWxkKHNlbGYuX2ZyYW1lTGF5ZXIpO1xyXG4gICAgICAgICAgICAvLyDliJvlu7rlvLnlh7rlsYJcclxuICAgICAgICAgICAgc2VsZi5fcGFuZWxMYXllciA9IG5ldyBldWkuVUlMYXllcigpO1xyXG4gICAgICAgICAgICBzZWxmLl9wYW5lbExheWVyLnRvdWNoRW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICByb290LmFkZENoaWxkKHNlbGYuX3BhbmVsTGF5ZXIpO1xyXG4gICAgICAgICAgICAvLyDliJvlu7rpga7nvanlsYJcclxuICAgICAgICAgICAgc2VsZi5fbWFza0xheWVyID0gbmV3IGV1aS5VSUxheWVyKCk7XHJcbiAgICAgICAgICAgIHNlbGYuX21hc2tMYXllci50b3VjaEVuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgcm9vdC5hZGRDaGlsZChzZWxmLl9tYXNrTGF5ZXIpO1xyXG4gICAgICAgICAgICAvLyDliJvlu7rpobbnuqfmmL7npLrlsYJcclxuICAgICAgICAgICAgc2VsZi5fdG9wTGF5ZXIgPSBuZXcgZXVpLlVJTGF5ZXIoKTtcclxuICAgICAgICAgICAgc2VsZi5fdG9wTGF5ZXIudG91Y2hFbmFibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJvb3QuYWRkQ2hpbGQoc2VsZi5fdG9wTGF5ZXIpO1xyXG4gICAgICAgICAgICAvLyDorr7nva7otYTmupDlkozkuLvpopjpgILphY3lmahcclxuICAgICAgICAgICAgZWdyZXQucmVnaXN0ZXJJbXBsZW1lbnRhdGlvbihcImV1aS5JQXNzZXRBZGFwdGVyXCIsIG5ldyBBc3NldEFkYXB0ZXIoKSk7XHJcbiAgICAgICAgICAgIGVncmV0LnJlZ2lzdGVySW1wbGVtZW50YXRpb24oXCJldWkuSVRoZW1lQWRhcHRlclwiLCBuZXcgVGhlbWVBZGFwdGVyKHNlbGYuX2luaXRQYXJhbXMpKTtcclxuICAgICAgICAgICAgLy8g5Yqg6L296LWE5rqQ6YWN572uXHJcbiAgICAgICAgICAgIFJFUy5hZGRFdmVudExpc3RlbmVyKFJFUy5SZXNvdXJjZUV2ZW50LkNPTkZJR19DT01QTEVURSwgb25Db25maWdDb21wbGV0ZSwgc2VsZik7XHJcbiAgICAgICAgICAgIFJFUy5sb2FkQ29uZmlnKHNlbGYuX2luaXRQYXJhbXMucGF0aFByZWZpeCArIFwicmVzb3VyY2UvZGVmYXVsdC5yZXMuanNvblwiLCBzZWxmLl9pbml0UGFyYW1zLnBhdGhQcmVmaXggKyBcInJlc291cmNlL1wiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gb25Db25maWdDb21wbGV0ZShldnQpIHtcclxuICAgICAgICAgICAgUkVTLnJlbW92ZUV2ZW50TGlzdGVuZXIoUkVTLlJlc291cmNlRXZlbnQuQ09ORklHX0NPTVBMRVRFLCBvbkNvbmZpZ0NvbXBsZXRlLCBzZWxmKTtcclxuICAgICAgICAgICAgLy8g5Yqg6L295Li76aKY6YWN572uXHJcbiAgICAgICAgICAgIHZhciB0aGVtZSA9IG5ldyBldWkuVGhlbWUodGhpcy5faW5pdFBhcmFtcy5wYXRoUHJlZml4ICsgXCJyZXNvdXJjZS9kZWZhdWx0LnRobS5qc29uXCIsIHNlbGYuX3Jvb3Quc3RhZ2UpO1xyXG4gICAgICAgICAgICB0aGVtZS5hZGRFdmVudExpc3RlbmVyKGV1aS5VSUV2ZW50LkNPTVBMRVRFLCBvblRoZW1lTG9hZENvbXBsZXRlLCBzZWxmKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gb25UaGVtZUxvYWRDb21wbGV0ZShldnQpIHtcclxuICAgICAgICAgICAgZXZ0LnRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV1aS5VSUV2ZW50LkNPTVBMRVRFLCBvblRoZW1lTG9hZENvbXBsZXRlLCBzZWxmKTtcclxuICAgICAgICAgICAgLy8g5Yqg6L296aKE5Yqg6L296LWE5rqQ57uEXHJcbiAgICAgICAgICAgIHZhciBwcmVsb2FkR3JvdXBzID0gdGhpcy5faW5pdFBhcmFtcy5wcmVsb2FkR3JvdXBzO1xyXG4gICAgICAgICAgICBzZWxmLmxvYWRBc3NldHMocHJlbG9hZEdyb3VwcywgbnVsbCwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gY29tcGxldGUoc2VsZik7IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOWIpOaWreearuiCpOaYr+WQpuaYr0VncmV05pi+56S65a+56LGhXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHsqfSBza2luIOearuiCpOWvueixoVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IOaYr+WQpuaYr0VncmV05pi+56S65a+56LGhXHJcbiAgICAgKiBAbWVtYmVyb2YgRWdyZXRCcmlkZ2VcclxuICAgICAqL1xyXG4gICAgRWdyZXRCcmlkZ2UucHJvdG90eXBlLmlzTXlTa2luID0gZnVuY3Rpb24gKHNraW4pIHtcclxuICAgICAgICByZXR1cm4gKHNraW4gaW5zdGFuY2VvZiBlZ3JldC5EaXNwbGF5T2JqZWN0KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOWIm+W7uuS4gOS4quepuueahOaYvuekuuWvueixoVxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHtlZ3JldC5TcHJpdGV9XHJcbiAgICAgKiBAbWVtYmVyb2YgRWdyZXRCcmlkZ2VcclxuICAgICAqL1xyXG4gICAgRWdyZXRCcmlkZ2UucHJvdG90eXBlLmNyZWF0ZUVtcHR5RGlzcGxheSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IGVncmV0LlNwcml0ZSgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5re75Yqg5pi+56S6XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtlZ3JldC5EaXNwbGF5T2JqZWN0Q29udGFpbmVyfSBwYXJlbnQg6KaB5re75Yqg5Yiw55qE54i25a655ZmoXHJcbiAgICAgKiBAcGFyYW0ge2VncmV0LkRpc3BsYXlPYmplY3R9IHRhcmdldCDooqvmt7vliqDnmoTmmL7npLrlr7nosaFcclxuICAgICAqIEByZXR1cm4ge2VncmV0LkRpc3BsYXlPYmplY3R9IOi/lOWbnuiiq+a3u+WKoOeahOaYvuekuuWvueixoVxyXG4gICAgICogQG1lbWJlcm9mIEVncmV0QnJpZGdlXHJcbiAgICAgKi9cclxuICAgIEVncmV0QnJpZGdlLnByb3RvdHlwZS5hZGRDaGlsZCA9IGZ1bmN0aW9uIChwYXJlbnQsIHRhcmdldCkge1xyXG4gICAgICAgIGlmIChwYXJlbnQgJiYgdGFyZ2V0KVxyXG4gICAgICAgICAgICByZXR1cm4gcGFyZW50LmFkZENoaWxkKHRhcmdldCk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5oyJ57Si5byV5re75Yqg5pi+56S6XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtlZ3JldC5EaXNwbGF5T2JqZWN0Q29udGFpbmVyfSBwYXJlbnQg6KaB5re75Yqg5Yiw55qE54i25a655ZmoXHJcbiAgICAgKiBAcGFyYW0ge2VncmV0LkRpc3BsYXlPYmplY3R9IHRhcmdldCDooqvmt7vliqDnmoTmmL7npLrlr7nosaFcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCDopoHmt7vliqDliLDnmoTniLbnuqfntKLlvJVcclxuICAgICAqIEByZXR1cm4ge2VncmV0LkRpc3BsYXlPYmplY3R9IOi/lOWbnuiiq+a3u+WKoOeahOaYvuekuuWvueixoVxyXG4gICAgICogQG1lbWJlcm9mIEVncmV0QnJpZGdlXHJcbiAgICAgKi9cclxuICAgIEVncmV0QnJpZGdlLnByb3RvdHlwZS5hZGRDaGlsZEF0ID0gZnVuY3Rpb24gKHBhcmVudCwgdGFyZ2V0LCBpbmRleCkge1xyXG4gICAgICAgIGlmIChwYXJlbnQgJiYgdGFyZ2V0KVxyXG4gICAgICAgICAgICByZXR1cm4gcGFyZW50LmFkZENoaWxkQXQodGFyZ2V0LCBpbmRleCk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog56e76Zmk5pi+56S65a+56LGhXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtlZ3JldC5EaXNwbGF5T2JqZWN0Q29udGFpbmVyfSBwYXJlbnQg54i25a655ZmoXHJcbiAgICAgKiBAcGFyYW0ge2VncmV0LkRpc3BsYXlPYmplY3R9IHRhcmdldCDooqvnp7vpmaTnmoTmmL7npLrlr7nosaFcclxuICAgICAqIEByZXR1cm4ge2VncmV0LkRpc3BsYXlPYmplY3R9IOi/lOWbnuiiq+enu+mZpOeahOaYvuekuuWvueixoVxyXG4gICAgICogQG1lbWJlcm9mIEVncmV0QnJpZGdlXHJcbiAgICAgKi9cclxuICAgIEVncmV0QnJpZGdlLnByb3RvdHlwZS5yZW1vdmVDaGlsZCA9IGZ1bmN0aW9uIChwYXJlbnQsIHRhcmdldCkge1xyXG4gICAgICAgIGlmIChwYXJlbnQgJiYgdGFyZ2V0ICYmIHRhcmdldC5wYXJlbnQgPT0gcGFyZW50KVxyXG4gICAgICAgICAgICByZXR1cm4gcGFyZW50LnJlbW92ZUNoaWxkKHRhcmdldCk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5oyJ57Si5byV56e76Zmk5pi+56S6XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtlZ3JldC5EaXNwbGF5T2JqZWN0Q29udGFpbmVyfSBwYXJlbnQg54i25a655ZmoXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXgg57Si5byVXHJcbiAgICAgKiBAcmV0dXJuIHtlZ3JldC5EaXNwbGF5T2JqZWN0fSDov5Tlm57ooqvnp7vpmaTnmoTmmL7npLrlr7nosaFcclxuICAgICAqIEBtZW1iZXJvZiBFZ3JldEJyaWRnZVxyXG4gICAgICovXHJcbiAgICBFZ3JldEJyaWRnZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGRBdCA9IGZ1bmN0aW9uIChwYXJlbnQsIGluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcmVudC5yZW1vdmVDaGlsZEF0KGluZGV4KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOenu+mZpOaJgOacieaYvuekuuWvueixoVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7ZWdyZXQuRGlzcGxheU9iamVjdENvbnRhaW5lcn0gcGFyZW50IOeItuWuueWZqFxyXG4gICAgICogQG1lbWJlcm9mIEVncmV0QnJpZGdlXHJcbiAgICAgKi9cclxuICAgIEVncmV0QnJpZGdlLnByb3RvdHlwZS5yZW1vdmVDaGlsZHJlbiA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcclxuICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGRyZW4oKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPlueItuWuueWZqFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7ZWdyZXQuRGlzcGxheU9iamVjdH0gdGFyZ2V0IOebruagh+WvueixoVxyXG4gICAgICogQHJldHVybnMge2VncmV0LkRpc3BsYXlPYmplY3RDb250YWluZXJ9IOeItuWuueWZqFxyXG4gICAgICogQG1lbWJlcm9mIEVncmV0QnJpZGdlXHJcbiAgICAgKi9cclxuICAgIEVncmV0QnJpZGdlLnByb3RvdHlwZS5nZXRQYXJlbnQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldC5wYXJlbnQ7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bmjIflrprntKLlvJXlpITnmoTmmL7npLrlr7nosaFcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge2VncmV0LkRpc3BsYXlPYmplY3RDb250YWluZXJ9IHBhcmVudCDniLblrrnlmahcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCDmjIflrprniLbnuqfntKLlvJVcclxuICAgICAqIEByZXR1cm4ge2VncmV0LkRpc3BsYXlPYmplY3R9IOe0ouW8leWkhOeahOaYvuekuuWvueixoVxyXG4gICAgICogQG1lbWJlcm9mIEVncmV0QnJpZGdlXHJcbiAgICAgKi9cclxuICAgIEVncmV0QnJpZGdlLnByb3RvdHlwZS5nZXRDaGlsZEF0ID0gZnVuY3Rpb24gKHBhcmVudCwgaW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gcGFyZW50LmdldENoaWxkQXQoaW5kZXgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5pi+56S657Si5byVXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtlZ3JldC5EaXNwbGF5T2JqZWN0Q29udGFpbmVyfSBwYXJlbnQg54i25a655ZmoXHJcbiAgICAgKiBAcGFyYW0ge2VncmV0LkRpc3BsYXlPYmplY3R9IHRhcmdldCDlrZDmmL7npLrlr7nosaFcclxuICAgICAqIEByZXR1cm4ge251bWJlcn0gdGFyZ2V05ZyocGFyZW505Lit55qE57Si5byVXHJcbiAgICAgKiBAbWVtYmVyb2YgRWdyZXRCcmlkZ2VcclxuICAgICAqL1xyXG4gICAgRWdyZXRCcmlkZ2UucHJvdG90eXBlLmdldENoaWxkSW5kZXggPSBmdW5jdGlvbiAocGFyZW50LCB0YXJnZXQpIHtcclxuICAgICAgICByZXR1cm4gcGFyZW50LmdldENoaWxkSW5kZXgodGFyZ2V0KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOmAmui/h+WQjeensOiOt+WPluaYvuekuuWvueixoVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7ZWdyZXQuRGlzcGxheU9iamVjdENvbnRhaW5lcn0gcGFyZW50IOeItuWuueWZqFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUg5a+56LGh5ZCN56ewXHJcbiAgICAgKiBAcmV0dXJuIHtlZ3JldC5EaXNwbGF5T2JqZWN0fSDmmL7npLrlr7nosaFcclxuICAgICAqIEBtZW1iZXJvZiBFZ3JldEJyaWRnZVxyXG4gICAgICovXHJcbiAgICBFZ3JldEJyaWRnZS5wcm90b3R5cGUuZ2V0Q2hpbGRCeU5hbWUgPSBmdW5jdGlvbiAocGFyZW50LCBuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcmVudC5nZXRDaGlsZEJ5TmFtZShuYW1lKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluWtkOaYvuekuuWvueixoeaVsOmHj1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7ZWdyZXQuRGlzcGxheU9iamVjdENvbnRhaW5lcn0gcGFyZW50IOeItuWuueWZqFxyXG4gICAgICogQHJldHVybiB7bnVtYmVyfSDlrZDmmL7npLrlr7nosaHmlbDph49cclxuICAgICAqIEBtZW1iZXJvZiBFZ3JldEJyaWRnZVxyXG4gICAgICovXHJcbiAgICBFZ3JldEJyaWRnZS5wcm90b3R5cGUuZ2V0Q2hpbGRDb3VudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcclxuICAgICAgICByZXR1cm4gcGFyZW50Lm51bUNoaWxkcmVuO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5Yqg6L296LWE5rqQXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gYXNzZXRzIOi1hOa6kOaVsOe7hFxyXG4gICAgICogQHBhcmFtIHtJTWVkaWF0b3J9IG1lZGlhdG9yIOi1hOa6kOWIl+ihqFxyXG4gICAgICogQHBhcmFtIHsoZXJyPzpFcnJvcik9PnZvaWR9IGhhbmRsZXIg5Zue6LCD5Ye95pWwXHJcbiAgICAgKiBAbWVtYmVyb2YgRWdyZXRCcmlkZ2VcclxuICAgICAqL1xyXG4gICAgRWdyZXRCcmlkZ2UucHJvdG90eXBlLmxvYWRBc3NldHMgPSBmdW5jdGlvbiAoYXNzZXRzLCBtZWRpYXRvciwgaGFuZGxlcikge1xyXG4gICAgICAgIHZhciBsb2FkZXIgPSBuZXcgQXNzZXRzTG9hZGVyKHtcclxuICAgICAgICAgICAgb25lRXJyb3I6IGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICAgICAgICAgIC8vIOiwg+eUqOWbnuiwg1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlcihuZXcgRXJyb3IoXCLotYTmupDliqDovb3lpLHotKVcIikpO1xyXG4gICAgICAgICAgICAgICAgLy8g5rS+5Y+R5Yqg6L296ZSZ6K+v5LqL5Lu2XHJcbiAgICAgICAgICAgICAgICBjb3JlLmRpc3BhdGNoKE1vZHVsZU1lc3NhZ2UuTU9EVUxFX0xPQURfQVNTRVRTX0VSUk9SLCBldnQpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKGRpY3QpIHtcclxuICAgICAgICAgICAgICAgIC8vIOiwg+eUqOWbnuiwg1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbG9hZGVyLmxvYWRHcm91cHMoYXNzZXRzKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOebkeWQrOS6i+S7tu+8jOS7jui/meS4quaWueazleebkeWQrOeahOS6i+S7tuS8muWcqOS4reS7i+iAhemUgOavgeaXtuiiq+iHquWKqOenu+mZpOebkeWQrFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7ZWdyZXQuRXZlbnREaXNwYXRjaGVyfSB0YXJnZXQg5LqL5Lu255uu5qCH5a+56LGhXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSDkuovku7bnsbvlnotcclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIg5LqL5Lu25aSE55CG5Ye95pWwXHJcbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSB0aGlz5oyH5ZCR5a+56LGhXHJcbiAgICAgKiBAbWVtYmVyb2YgRWdyZXRCcmlkZ2VcclxuICAgICAqL1xyXG4gICAgRWdyZXRCcmlkZ2UucHJvdG90eXBlLm1hcExpc3RlbmVyID0gZnVuY3Rpb24gKHRhcmdldCwgdHlwZSwgaGFuZGxlciwgdGhpc0FyZykge1xyXG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIsIHRoaXNBcmcpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5rOo6ZSA55uR5ZCs5LqL5Lu2XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtlZ3JldC5FdmVudERpc3BhdGNoZXJ9IHRhcmdldCDkuovku7bnm67moIflr7nosaFcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIOS6i+S7tuexu+Wei1xyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciDkuovku7blpITnkIblh73mlbBcclxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIHRoaXPmjIflkJHlr7nosaFcclxuICAgICAqIEBtZW1iZXJvZiBFZ3JldEJyaWRnZVxyXG4gICAgICovXHJcbiAgICBFZ3JldEJyaWRnZS5wcm90b3R5cGUudW5tYXBMaXN0ZW5lciA9IGZ1bmN0aW9uICh0YXJnZXQsIHR5cGUsIGhhbmRsZXIsIHRoaXNBcmcpIHtcclxuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyLCB0aGlzQXJnKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOS4uue7keWumueahOWIl+ihqOaYvuekuuWvueixoeWMheijheS4gOS4qua4suafk+WZqOWIm+W7uuWbnuiwg1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7ZXVpLkRhdGFHcm91cH0gdGFyZ2V0IEJpbmRGb3LmjIfku6TmjIflkJHnmoTmmL7npLrlr7nosaFcclxuICAgICAqIEBwYXJhbSB7KGtleT86YW55LCB2YWx1ZT86YW55LCByZW5kZXJlcj86ZXVpLklJdGVtUmVuZGVyZXIpPT52b2lkfSByZW5kZXJlckhhbmRsZXIg5riy5p+T5Zmo5Yib5bu65Zue6LCDXHJcbiAgICAgKiBAcmV0dXJucyB7Kn0g6L+U5Zue5LiA5Liq5aSH5b+Y5b2V5a+56LGh77yM5Lya5Zyo6LWL5YC85pe25o+Q5L6bXHJcbiAgICAgKiBAbWVtYmVyb2YgSUJyaWRnZVxyXG4gICAgICovXHJcbiAgICBFZ3JldEJyaWRnZS5wcm90b3R5cGUud3JhcEJpbmRGb3IgPSBmdW5jdGlvbiAodGFyZ2V0LCByZW5kZXJlckhhbmRsZXIpIHtcclxuICAgICAgICB2YXIgbWVtZW50byA9IHt9O1xyXG4gICAgICAgIHdyYXBFVUlMaXN0KHRhcmdldCwgZnVuY3Rpb24gKGRhdGEsIHJlbmRlcmVyKSB7XHJcbiAgICAgICAgICAgIC8vIOWPluWHumtleVxyXG4gICAgICAgICAgICB2YXIga2V5O1xyXG4gICAgICAgICAgICB2YXIgZGF0YXMgPSBtZW1lbnRvLmRhdGFzO1xyXG4gICAgICAgICAgICAvLyDpgY3ljoZtZW1lbnRv55qEZGF0YXPlsZ7mgKfvvIjlnKh2YWx1YXRlQmluZEZvcuaXtuiiq+i1i+WAvO+8iVxyXG4gICAgICAgICAgICBmb3IgKHZhciBpIGluIGRhdGFzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YXNbaV0gPT0gZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOi/meWwseaYr+aIkeS7rOimgeaJvueahGtleVxyXG4gICAgICAgICAgICAgICAgICAgIGtleSA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8g6LCD55So5Zue6LCDXHJcbiAgICAgICAgICAgIHJlbmRlcmVySGFuZGxlcihrZXksIGRhdGEsIHJlbmRlcmVyKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbWVtZW50bztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOS4uuWIl+ihqOaYvuekuuWvueixoei1i+WAvFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7ZXVpLkRhdGFHcm91cH0gdGFyZ2V0IEJpbmRGb3LmjIfku6TmjIflkJHnmoTmmL7npLrlr7nosaFcclxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YXMg5pWw5o2u6ZuG5ZCIXHJcbiAgICAgKiBAcGFyYW0geyp9IG1lbWVudG8gd3JhcEJpbmRGb3Lov5Tlm57nmoTlpIflv5jlvZXlr7nosaFcclxuICAgICAqIEBtZW1iZXJvZiBJQnJpZGdlXHJcbiAgICAgKi9cclxuICAgIEVncmV0QnJpZGdlLnByb3RvdHlwZS52YWx1YXRlQmluZEZvciA9IGZ1bmN0aW9uICh0YXJnZXQsIGRhdGFzLCBtZW1lbnRvKSB7XHJcbiAgICAgICAgdmFyIHByb3ZpZGVyO1xyXG4gICAgICAgIGlmIChkYXRhcyBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICAgIHByb3ZpZGVyID0gbmV3IGV1aS5BcnJheUNvbGxlY3Rpb24oZGF0YXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8g5piv5a2X5YW477yM5bCG5YW25Y+Y5Li65pWw57uEXHJcbiAgICAgICAgICAgIHZhciBsaXN0ID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhcykge1xyXG4gICAgICAgICAgICAgICAgbGlzdC5wdXNoKGRhdGFzW2tleV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHByb3ZpZGVyID0gbmV3IGV1aS5BcnJheUNvbGxlY3Rpb24obGlzdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOiuvue9rm1lbWVudG9cclxuICAgICAgICBtZW1lbnRvLmRhdGFzID0gZGF0YXM7XHJcbiAgICAgICAgLy8g6LWL5YC8XHJcbiAgICAgICAgdGFyZ2V0LmRhdGFQcm92aWRlciA9IHByb3ZpZGVyO1xyXG4gICAgfTtcclxuICAgIC8qKiDmj5DkvpvpnZnmgIHnsbvlnovluLjph48gKi9cclxuICAgIEVncmV0QnJpZGdlLlRZUEUgPSBcIkVncmV0XCI7XHJcbiAgICByZXR1cm4gRWdyZXRCcmlkZ2U7XHJcbn0oKSk7XHJcbmV4cG9ydCBkZWZhdWx0IEVncmV0QnJpZGdlO1xyXG52YXIgQXNzZXRBZGFwdGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQXNzZXRBZGFwdGVyKCkge1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAqIOino+aekOe0oOadkFxyXG4gICAgICogQHBhcmFtIHNvdXJjZSDlvoXop6PmnpDnmoTmlrDntKDmnZDmoIfor4bnrKZcclxuICAgICAqIEBwYXJhbSBjb21wRnVuYyDop6PmnpDlrozmiJDlm57osIPlh73mlbDvvIznpLrkvovvvJpjYWxsQmFjayhjb250ZW50OmFueSxzb3VyY2U6c3RyaW5nKTp2b2lkO1xyXG4gICAgICogQHBhcmFtIHRoaXNPYmplY3QgY2FsbEJhY2vnmoQgdGhpcyDlvJXnlKhcclxuICAgICAqL1xyXG4gICAgQXNzZXRBZGFwdGVyLnByb3RvdHlwZS5nZXRBc3NldCA9IGZ1bmN0aW9uIChzb3VyY2UsIGNvbXBGdW5jLCB0aGlzT2JqZWN0KSB7XHJcbiAgICAgICAgaWYgKFJFUy5oYXNSZXMoc291cmNlKSkge1xyXG4gICAgICAgICAgICB2YXIgZGF0YSA9IFJFUy5nZXRSZXMoc291cmNlKTtcclxuICAgICAgICAgICAgaWYgKGRhdGEpXHJcbiAgICAgICAgICAgICAgICBvbkdldFJlcyhkYXRhKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgUkVTLmdldFJlc0FzeW5jKHNvdXJjZSwgb25HZXRSZXMsIHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgUkVTLmdldFJlc0J5VXJsKHNvdXJjZSwgb25HZXRSZXMsIHRoaXMsIFJFUy5SZXNvdXJjZUl0ZW0uVFlQRV9JTUFHRSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIG9uR2V0UmVzKGRhdGEpIHtcclxuICAgICAgICAgICAgY29tcEZ1bmMuY2FsbCh0aGlzT2JqZWN0LCBkYXRhLCBzb3VyY2UpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gQXNzZXRBZGFwdGVyO1xyXG59KCkpO1xyXG52YXIgVGhlbWVBZGFwdGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVGhlbWVBZGFwdGVyKGluaXRQYXJhbXMpIHtcclxuICAgICAgICB0aGlzLl9pbml0UGFyYW1zID0gaW5pdFBhcmFtcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog6Kej5p6Q5Li76aKYXHJcbiAgICAgKiBAcGFyYW0gdXJsIOW+heino+aekOeahOS4u+mimHVybFxyXG4gICAgICogQHBhcmFtIGNvbXBGdW5jIOino+aekOWujOaIkOWbnuiwg+WHveaVsO+8jOekuuS+i++8mmNvbXBGdW5jKGU6ZWdyZXQuRXZlbnQpOnZvaWQ7XHJcbiAgICAgKiBAcGFyYW0gZXJyb3JGdW5jIOino+aekOWksei0peWbnuiwg+WHveaVsO+8jOekuuS+i++8mmVycm9yRnVuYygpOnZvaWQ7XHJcbiAgICAgKiBAcGFyYW0gdGhpc09iamVjdCDlm57osIPnmoR0aGlz5byV55SoXHJcbiAgICAgKi9cclxuICAgIFRoZW1lQWRhcHRlci5wcm90b3R5cGUuZ2V0VGhlbWUgPSBmdW5jdGlvbiAodXJsLCBjb21wRnVuYywgZXJyb3JGdW5jLCB0aGlzT2JqZWN0KSB7XHJcbiAgICAgICAgUkVTLmFkZEV2ZW50TGlzdGVuZXIoUkVTLlJlc291cmNlRXZlbnQuSVRFTV9MT0FEX0VSUk9SLCBvbkVycm9yLCBudWxsKTtcclxuICAgICAgICBSRVMuZ2V0UmVzQnlVcmwodXJsLCBvbkdldFJlcywgdGhpcywgUkVTLlJlc291cmNlSXRlbS5UWVBFX1RFWFQpO1xyXG4gICAgICAgIGZ1bmN0aW9uIG9uR2V0UmVzKGUpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIC8vIOmcgOimgeS4uuaJgOacieS4u+mimOi1hOa6kOa3u+WKoOi3r+W+hOWJjee8gFxyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKGUpO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEuc2tpbnMpXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5za2luc1trZXldID0gdGhpcy5faW5pdFBhcmFtcy5wYXRoUHJlZml4ICsgZGF0YS5za2luc1trZXldO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEuZXhtbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDlpoLmnpzlj6rmmK9VUkzliJnnm7TmjqXmt7vliqDliY3nvIDvvIzlkKbliJnmmK/lhoXlrrnpm4bmiJDmlrnlvI/vvIzpnIDopoHljZXni6zkv67mlLlwYXRo5bGe5oCnXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV4bWwgPSBkYXRhLmV4bWxzW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBleG1sID09IFwic3RyaW5nXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZXhtbHNba2V5XSA9IHRoaXMuX2luaXRQYXJhbXMucGF0aFByZWZpeCArIGV4bWw7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleG1sLnBhdGggPSB0aGlzLl9pbml0UGFyYW1zLnBhdGhQcmVmaXggKyBleG1sLnBhdGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycikgeyB9XHJcbiAgICAgICAgICAgIGNvbXBGdW5jLmNhbGwodGhpc09iamVjdCwgZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIG9uRXJyb3IoZSkge1xyXG4gICAgICAgICAgICBpZiAoZS5yZXNJdGVtLnVybCA9PSB1cmwpIHtcclxuICAgICAgICAgICAgICAgIFJFUy5yZW1vdmVFdmVudExpc3RlbmVyKFJFUy5SZXNvdXJjZUV2ZW50LklURU1fTE9BRF9FUlJPUiwgb25FcnJvciwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICBlcnJvckZ1bmMuY2FsbCh0aGlzT2JqZWN0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gVGhlbWVBZGFwdGVyO1xyXG59KCkpO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci1lZ3JldC9FZ3JldEJyaWRnZS5qc1xuLy8gbW9kdWxlIGlkID0gMThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8vIDxhbWQtbW9kdWxlIG5hbWU9XCJET01CcmlkZ2VcIi8+XHJcbmltcG9ydCB7IGdldE9iamVjdEhhc2hzIH0gZnJvbSBcIm9seW1wdXMtci91dGlscy9PYmplY3RVdGlsXCI7XHJcbmltcG9ydCB7IGFzc2V0c01hbmFnZXIgfSBmcm9tIFwib2x5bXB1cy1yL2VuZ2luZS9hc3NldHMvQXNzZXRzTWFuYWdlclwiO1xyXG5pbXBvcnQgTWFza0VudGl0eSBmcm9tIFwiLi9kb20vbWFzay9NYXNrRW50aXR5XCI7XHJcbmltcG9ydCB7IGNvcHlSZWYgfSBmcm9tIFwiLi9kb20vdXRpbHMvU2tpblV0aWxcIjtcclxuLyoqXHJcbiAqIEBhdXRob3IgUmF5a2lkXHJcbiAqIEBlbWFpbCBpbml0aWFsX3JAcXEuY29tXHJcbiAqIEBjcmVhdGUgZGF0ZSAyMDE3LTA5LTE4XHJcbiAqIEBtb2RpZnkgZGF0ZSAyMDE3LTA5LTE4XHJcbiAqXHJcbiAqIOWfuuS6jkRPTeeahOihqOeOsOWxguahpeWunueOsFxyXG4qL1xyXG52YXIgRE9NQnJpZGdlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRE9NQnJpZGdlKHBhcmFtcykge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPlum7mOiupOW8ueeql+etlueVpVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHR5cGUge0lQYW5lbFBvbGljeX1cclxuICAgICAgICAgKiBAbWVtYmVyb2YgRWdyZXRCcmlkZ2VcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmRlZmF1bHRQYW5lbFBvbGljeSA9IG51bGw7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6I635Y+W6buY6K6k5Zy65pmv5YiH5o2i562W55WlXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAdHlwZSB7SVNjZW5lUG9saWN5fVxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBFZ3JldEJyaWRnZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuZGVmYXVsdFNjZW5lUG9saWN5ID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9saXN0ZW5lckRpY3QgPSB7fTtcclxuICAgICAgICB0aGlzLl9pbml0UGFyYW1zID0gcGFyYW1zO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERPTUJyaWRnZS5wcm90b3R5cGUsIFwidHlwZVwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6I635Y+W6KGo546w5bGC57G75Z6L5ZCN56ewXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcmVhZG9ubHlcclxuICAgICAgICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBET01CcmlkZ2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIERPTUJyaWRnZS5UWVBFO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERPTUJyaWRnZS5wcm90b3R5cGUsIFwiaHRtbFdyYXBwZXJcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPluihqOeOsOWxgkhUTUzljIXoo4XlmajvvIzlj6/ku6Xlr7nlhbbmoLflvI/ov5vooYzoh6rlrprkuYnosIPmlbRcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEByZWFkb25seVxyXG4gICAgICAgICAqIEB0eXBlIHtIVE1MRWxlbWVudH1cclxuICAgICAgICAgKiBAbWVtYmVyb2YgRE9NQnJpZGdlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbml0UGFyYW1zLmNvbnRhaW5lcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShET01CcmlkZ2UucHJvdG90eXBlLCBcInJvb3RcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPluagueaYvuekuuiKgueCuVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJlYWRvbmx5XHJcbiAgICAgICAgICogQHR5cGUge0hUTUxFbGVtZW50fVxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBET01CcmlkZ2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luaXRQYXJhbXMuY29udGFpbmVyO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERPTUJyaWRnZS5wcm90b3R5cGUsIFwic3RhZ2VcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPluiInuWPsOW8leeUqO+8jERPTeeahOiInuWPsOaMh+WQkXJvb3TmiYDlnKjnmoREb2N1bWVudOWvueixoVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJlYWRvbmx5XHJcbiAgICAgICAgICogQHR5cGUge0RvY3VtZW50fVxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBET01CcmlkZ2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucm9vdC5vd25lckRvY3VtZW50O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERPTUJyaWRnZS5wcm90b3R5cGUsIFwiYmdMYXllclwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6I635Y+W6IOM5pmv5a655ZmoXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcmVhZG9ubHlcclxuICAgICAgICAgKiBAdHlwZSB7SFRNTEVsZW1lbnR9XHJcbiAgICAgICAgICogQG1lbWJlcm9mIERPTUJyaWRnZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5pdFBhcmFtcy5jb250YWluZXI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRE9NQnJpZGdlLnByb3RvdHlwZSwgXCJzY2VuZUxheWVyXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDojrflj5blnLrmma/lrrnlmahcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEByZWFkb25seVxyXG4gICAgICAgICAqIEB0eXBlIHtIVE1MRWxlbWVudH1cclxuICAgICAgICAgKiBAbWVtYmVyb2YgRE9NQnJpZGdlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbml0UGFyYW1zLmNvbnRhaW5lcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShET01CcmlkZ2UucHJvdG90eXBlLCBcImZyYW1lTGF5ZXJcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPluahhuaetuWuueWZqFxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJlYWRvbmx5XHJcbiAgICAgICAgICogQHR5cGUge0hUTUxFbGVtZW50fVxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBET01CcmlkZ2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luaXRQYXJhbXMuY29udGFpbmVyO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERPTUJyaWRnZS5wcm90b3R5cGUsIFwicGFuZWxMYXllclwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6I635Y+W5by556qX5a655ZmoXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcmVhZG9ubHlcclxuICAgICAgICAgKiBAdHlwZSB7SFRNTEVsZW1lbnR9XHJcbiAgICAgICAgICogQG1lbWJlcm9mIERPTUJyaWRnZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5pdFBhcmFtcy5jb250YWluZXI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRE9NQnJpZGdlLnByb3RvdHlwZSwgXCJtYXNrTGF5ZXJcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPlumBrue9qeWuueWZqFxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJlYWRvbmx5XHJcbiAgICAgICAgICogQHR5cGUge0hUTUxFbGVtZW50fVxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBET01CcmlkZ2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luaXRQYXJhbXMuY29udGFpbmVyO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERPTUJyaWRnZS5wcm90b3R5cGUsIFwidG9wTGF5ZXJcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPlumhtue6p+WuueWZqFxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJlYWRvbmx5XHJcbiAgICAgICAgICogQHR5cGUge0hUTUxFbGVtZW50fVxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBET01CcmlkZ2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luaXRQYXJhbXMuY29udGFpbmVyO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERPTUJyaWRnZS5wcm90b3R5cGUsIFwicHJvbXB0Q2xhc3NcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPlumAmueUqOaPkOekuuahhlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJlYWRvbmx5XHJcbiAgICAgICAgICogQHR5cGUge0lQcm9tcHRQYW5lbENvbnN0cnVjdG9yfVxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBET01CcmlkZ2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luaXRQYXJhbXMucHJvbXB0Q2xhc3M7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRE9NQnJpZGdlLnByb3RvdHlwZSwgXCJtYXNrRW50aXR5XCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDojrflj5bpga7nvanlrp7kvZNcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEByZWFkb25seVxyXG4gICAgICAgICAqIEB0eXBlIHtJTWFza0VudGl0eX1cclxuICAgICAgICAgKiBAbWVtYmVyb2YgRE9NQnJpZGdlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTWFza0VudGl0eSh0aGlzLl9pbml0UGFyYW1zLm1hc2tEYXRhKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIC8qKlxyXG4gICAgICog5Yid5aeL5YyW6KGo546w5bGC5qGl77yM5Y+v5Lul5rKh5pyJ6K+l5pa55rOV77yM5rKh5pyJ6K+l5pa55rOV5YiZ6KGo56S66K+l6KGo546w5bGC5peg6ZyA5Yid5aeL5YyWXHJcbiAgICAgKiBAcGFyYW0geygpPT52b2lkfSBjb21wbGV0ZSDliJ3lp4vljJblrozmr5XlkI7nmoTlm57osINcclxuICAgICAqIEBtZW1iZXJvZiBET01CcmlkZ2VcclxuICAgICAqL1xyXG4gICAgRE9NQnJpZGdlLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKGNvbXBsZXRlKSB7XHJcbiAgICAgICAgLy8g5aaC5p6c5piv5ZCN56ew77yM5YiZ6L2s5Y+Y5oiQ5byV55SoXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9pbml0UGFyYW1zLmNvbnRhaW5lciA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2luaXRQYXJhbXMuY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl9pbml0UGFyYW1zLmNvbnRhaW5lcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOWmguaenOaYr+epuu+8jOWImeeUn+aIkOS4gOS4qlxyXG4gICAgICAgIGlmICghdGhpcy5faW5pdFBhcmFtcy5jb250YWluZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5faW5pdFBhcmFtcy5jb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2luaXRQYXJhbXMuY29udGFpbmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g6LCD55So5Zue6LCDXHJcbiAgICAgICAgY29tcGxldGUodGhpcyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDliKTmlq3nmq7ogqTmmK/lkKbmmK9ET03mmL7npLroioLngrlcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyp9IHNraW4g55qu6IKk5a+56LGhXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0g5piv5ZCm5pivRE9N5pi+56S66IqC54K5XHJcbiAgICAgKiBAbWVtYmVyb2YgRE9NQnJpZGdlXHJcbiAgICAgKi9cclxuICAgIERPTUJyaWRnZS5wcm90b3R5cGUuaXNNeVNraW4gPSBmdW5jdGlvbiAoc2tpbikge1xyXG4gICAgICAgIHJldHVybiAoc2tpbiBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOWIm+W7uuS4gOS4quepuueahOaYvuekuuWvueixoVxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH1cclxuICAgICAqIEBtZW1iZXJvZiBET01CcmlkZ2VcclxuICAgICAqL1xyXG4gICAgRE9NQnJpZGdlLnByb3RvdHlwZS5jcmVhdGVFbXB0eURpc3BsYXkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDmt7vliqDmmL7npLpcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHBhcmVudCDopoHmt7vliqDliLDnmoTniLblrrnlmahcclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IOiiq+a3u+WKoOeahOaYvuekuuWvueixoVxyXG4gICAgICogQHJldHVybiB7RWxlbWVudH0g6L+U5Zue6KKr5re75Yqg55qE5pi+56S65a+56LGhXHJcbiAgICAgKiBAbWVtYmVyb2YgRE9NQnJpZGdlXHJcbiAgICAgKi9cclxuICAgIERPTUJyaWRnZS5wcm90b3R5cGUuYWRkQ2hpbGQgPSBmdW5jdGlvbiAocGFyZW50LCB0YXJnZXQpIHtcclxuICAgICAgICByZXR1cm4gcGFyZW50LmFwcGVuZENoaWxkKHRhcmdldCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDmjInntKLlvJXmt7vliqDmmL7npLpcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHBhcmVudCDopoHmt7vliqDliLDnmoTniLblrrnlmahcclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IOiiq+a3u+WKoOeahOaYvuekuuWvueixoVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IOimgea3u+WKoOWIsOeahOeItue6p+e0ouW8lVxyXG4gICAgICogQHJldHVybiB7RWxlbWVudH0g6L+U5Zue6KKr5re75Yqg55qE5pi+56S65a+56LGhXHJcbiAgICAgKiBAbWVtYmVyb2YgRE9NQnJpZGdlXHJcbiAgICAgKi9cclxuICAgIERPTUJyaWRnZS5wcm90b3R5cGUuYWRkQ2hpbGRBdCA9IGZ1bmN0aW9uIChwYXJlbnQsIHRhcmdldCwgaW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gcGFyZW50Lmluc2VydEJlZm9yZSh0YXJnZXQsIHRoaXMuZ2V0Q2hpbGRBdChwYXJlbnQsIGluZGV4KSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDnp7vpmaTmmL7npLrlr7nosaFcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHBhcmVudCDniLblrrnlmahcclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IOiiq+enu+mZpOeahOaYvuekuuWvueixoVxyXG4gICAgICogQHJldHVybiB7RWxlbWVudH0g6L+U5Zue6KKr56e76Zmk55qE5pi+56S65a+56LGhXHJcbiAgICAgKiBAbWVtYmVyb2YgRE9NQnJpZGdlXHJcbiAgICAgKi9cclxuICAgIERPTUJyaWRnZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGQgPSBmdW5jdGlvbiAocGFyZW50LCB0YXJnZXQpIHtcclxuICAgICAgICByZXR1cm4gcGFyZW50LnJlbW92ZUNoaWxkKHRhcmdldCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDmjInntKLlvJXnp7vpmaTmmL7npLpcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHBhcmVudCDniLblrrnlmahcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCDntKLlvJVcclxuICAgICAqIEByZXR1cm4ge0VsZW1lbnR9IOi/lOWbnuiiq+enu+mZpOeahOaYvuekuuWvueixoVxyXG4gICAgICogQG1lbWJlcm9mIERPTUJyaWRnZVxyXG4gICAgICovXHJcbiAgICBET01CcmlkZ2UucHJvdG90eXBlLnJlbW92ZUNoaWxkQXQgPSBmdW5jdGlvbiAocGFyZW50LCBpbmRleCkge1xyXG4gICAgICAgIHJldHVybiBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcy5nZXRDaGlsZEF0KHBhcmVudCwgaW5kZXgpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOenu+mZpOaJgOacieaYvuekuuWvueixoVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gcGFyZW50IOeItuWuueWZqFxyXG4gICAgICogQG1lbWJlcm9mIERPTUJyaWRnZVxyXG4gICAgICovXHJcbiAgICBET01CcmlkZ2UucHJvdG90eXBlLnJlbW92ZUNoaWxkcmVuID0gZnVuY3Rpb24gKHBhcmVudCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBwYXJlbnQuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKHBhcmVudC5jaGlsZHJlbi5pdGVtKGkpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bniLblrrnlmahcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldCDnm67moIflr7nosaFcclxuICAgICAqIEByZXR1cm5zIHtFbGVtZW50fSDniLblrrnlmahcclxuICAgICAqIEBtZW1iZXJvZiBET01CcmlkZ2VcclxuICAgICAqL1xyXG4gICAgRE9NQnJpZGdlLnByb3RvdHlwZS5nZXRQYXJlbnQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldC5wYXJlbnRFbGVtZW50O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5oyH5a6a57Si5byV5aSE55qE5pi+56S65a+56LGhXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBwYXJlbnQg54i25a655ZmoXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXgg5oyH5a6a54i257qn57Si5byVXHJcbiAgICAgKiBAcmV0dXJuIHtFbGVtZW50fSDntKLlvJXlpITnmoTmmL7npLrlr7nosaFcclxuICAgICAqIEBtZW1iZXJvZiBET01CcmlkZ2VcclxuICAgICAqL1xyXG4gICAgRE9NQnJpZGdlLnByb3RvdHlwZS5nZXRDaGlsZEF0ID0gZnVuY3Rpb24gKHBhcmVudCwgaW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gcGFyZW50LmNoaWxkcmVuLml0ZW0oaW5kZXgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5pi+56S657Si5byVXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBwYXJlbnQg54i25a655ZmoXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldCDlrZDmmL7npLrlr7nosaFcclxuICAgICAqIEByZXR1cm4ge251bWJlcn0gdGFyZ2V05ZyocGFyZW505Lit55qE57Si5byVXHJcbiAgICAgKiBAbWVtYmVyb2YgRE9NQnJpZGdlXHJcbiAgICAgKi9cclxuICAgIERPTUJyaWRnZS5wcm90b3R5cGUuZ2V0Q2hpbGRJbmRleCA9IGZ1bmN0aW9uIChwYXJlbnQsIHRhcmdldCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBwYXJlbnQuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRhcmdldCA9PT0gcGFyZW50LmNoaWxkcmVuLml0ZW0oaSkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog6YCa6L+H5ZCN56ew6I635Y+W5pi+56S65a+56LGhXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBwYXJlbnQg54i25a655ZmoXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSDlr7nosaHlkI3np7BcclxuICAgICAqIEByZXR1cm4ge0VsZW1lbnR9IOaYvuekuuWvueixoVxyXG4gICAgICogQG1lbWJlcm9mIERPTUJyaWRnZVxyXG4gICAgICovXHJcbiAgICBET01CcmlkZ2UucHJvdG90eXBlLmdldENoaWxkQnlOYW1lID0gZnVuY3Rpb24gKHBhcmVudCwgbmFtZSkge1xyXG4gICAgICAgIHJldHVybiBwYXJlbnQuY2hpbGRyZW4ubmFtZWRJdGVtKG5hbWUpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5a2Q5pi+56S65a+56LGh5pWw6YePXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBwYXJlbnQg54i25a655ZmoXHJcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IOWtkOaYvuekuuWvueixoeaVsOmHj1xyXG4gICAgICogQG1lbWJlcm9mIERPTUJyaWRnZVxyXG4gICAgICovXHJcbiAgICBET01CcmlkZ2UucHJvdG90eXBlLmdldENoaWxkQ291bnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcmVudC5jaGlsZEVsZW1lbnRDb3VudDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOWKoOi9vei1hOa6kFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IGFzc2V0cyDotYTmupDmlbDnu4RcclxuICAgICAqIEBwYXJhbSB7SU1lZGlhdG9yfSBtZWRpYXRvciDotYTmupDliJfooahcclxuICAgICAqIEBwYXJhbSB7KGVycj86RXJyb3IpPT52b2lkfSBoYW5kbGVyIOWbnuiwg+WHveaVsFxyXG4gICAgICogQG1lbWJlcm9mIERPTUJyaWRnZVxyXG4gICAgICovXHJcbiAgICBET01CcmlkZ2UucHJvdG90eXBlLmxvYWRBc3NldHMgPSBmdW5jdGlvbiAoYXNzZXRzLCBtZWRpYXRvciwgaGFuZGxlcikge1xyXG4gICAgICAgIC8vIOW8gOWni+WKoOi9veearuiCpOWIl+ihqFxyXG4gICAgICAgIGlmIChhc3NldHMpXHJcbiAgICAgICAgICAgIGFzc2V0cyA9IGFzc2V0cy5jb25jYXQoKTtcclxuICAgICAgICBsb2FkTmV4dCgpO1xyXG4gICAgICAgIGZ1bmN0aW9uIGxvYWROZXh0KCkge1xyXG4gICAgICAgICAgICBpZiAoIWFzc2V0cyB8fCBhc3NldHMubGVuZ3RoIDw9IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIOiwg+eUqOWbnuiwg1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNraW4gPSBhc3NldHMuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgIGFzc2V0c01hbmFnZXIubG9hZEFzc2V0cyhza2luLCBmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIEVycm9yKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyKHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkTmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDnm5HlkKzkuovku7bvvIzku47ov5nkuKrmlrnms5Xnm5HlkKznmoTkuovku7bkvJrlnKjkuK3ku4vogIXplIDmr4Hml7booqvoh6rliqjnp7vpmaTnm5HlkKxcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSB0YXJnZXQg5LqL5Lu255uu5qCH5a+56LGhXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSDkuovku7bnsbvlnotcclxuICAgICAqIEBwYXJhbSB7KGV2dDpFdmVudCk9PnZvaWR9IGhhbmRsZXIg5LqL5Lu25aSE55CG5Ye95pWwXHJcbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSB0aGlz5oyH5ZCR5a+56LGhXHJcbiAgICAgKiBAbWVtYmVyb2YgRE9NQnJpZGdlXHJcbiAgICAgKi9cclxuICAgIERPTUJyaWRnZS5wcm90b3R5cGUubWFwTGlzdGVuZXIgPSBmdW5jdGlvbiAodGFyZ2V0LCB0eXBlLCBoYW5kbGVyLCB0aGlzQXJnKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IGdldE9iamVjdEhhc2hzKHRhcmdldCwgdHlwZSwgaGFuZGxlciwgdGhpc0FyZyk7XHJcbiAgICAgICAgLy8g5Yik5pat5piv5ZCm5bey57uP5a2Y5Zyo6K+l55uR5ZCs77yM5aaC5p6c5a2Y5Zyo5YiZ5LiN5YaN55uR5ZCsXHJcbiAgICAgICAgaWYgKHRoaXMuX2xpc3RlbmVyRGljdFtrZXldKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgLy8g55uR5ZCsXHJcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgICAgICAvLyDosIPnlKjlm57osINcclxuICAgICAgICAgICAgaGFuZGxlci5jYWxsKHRoaXNBcmcgfHwgdGhpcywgZXZ0KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKTtcclxuICAgICAgICAvLyDorrDlvZXnm5HlkKxcclxuICAgICAgICB0aGlzLl9saXN0ZW5lckRpY3Rba2V5XSA9IGxpc3RlbmVyO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5rOo6ZSA55uR5ZCs5LqL5Lu2XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtFdmVudFRhcmdldH0gdGFyZ2V0IOS6i+S7tuebruagh+WvueixoVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUg5LqL5Lu257G75Z6LXHJcbiAgICAgKiBAcGFyYW0geyhldnQ6RXZlbnQpPT52b2lkfSBoYW5kbGVyIOS6i+S7tuWkhOeQhuWHveaVsFxyXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gdGhpc+aMh+WQkeWvueixoVxyXG4gICAgICogQG1lbWJlcm9mIERPTUJyaWRnZVxyXG4gICAgICovXHJcbiAgICBET01CcmlkZ2UucHJvdG90eXBlLnVubWFwTGlzdGVuZXIgPSBmdW5jdGlvbiAodGFyZ2V0LCB0eXBlLCBoYW5kbGVyLCB0aGlzQXJnKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IGdldE9iamVjdEhhc2hzKHRhcmdldCwgdHlwZSwgaGFuZGxlciwgdGhpc0FyZyk7XHJcbiAgICAgICAgLy8g5Yik5pat5piv5ZCm5bey57uP5a2Y5Zyo6K+l55uR5ZCs77yM5aaC5p6c5a2Y5Zyo5YiZ56e76Zmk55uR5ZCsXHJcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gdGhpcy5fbGlzdGVuZXJEaWN0W2tleV07XHJcbiAgICAgICAgaWYgKGxpc3RlbmVyKSB7XHJcbiAgICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKTtcclxuICAgICAgICAgICAgLy8g56e76Zmk6K6w5b2VXHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9saXN0ZW5lckRpY3Rba2V5XTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDkuLrnu5HlrprnmoTliJfooajmmL7npLrlr7nosaHljIXoo4XkuIDkuKrmuLLmn5PlmajliJvlu7rlm57osINcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXQgQmluZEZvcuaMh+S7pOaMh+WQkeeahOaYvuekuuWvueixoVxyXG4gICAgICogQHBhcmFtIHsoa2V5PzphbnksIHZhbHVlPzphbnksIHJlbmRlcmVyPzpIVE1MRWxlbWVudCk9PnZvaWR9IGhhbmRsZXIg5riy5p+T5Zmo5Yib5bu65Zue6LCDXHJcbiAgICAgKiBAcmV0dXJucyB7Kn0g6L+U5Zue5LiA5Liq5aSH5b+Y5b2V5a+56LGh77yM5Lya5Zyo6LWL5YC85pe25o+Q5L6bXHJcbiAgICAgKiBAbWVtYmVyb2YgSUJyaWRnZVxyXG4gICAgICovXHJcbiAgICBET01CcmlkZ2UucHJvdG90eXBlLndyYXBCaW5kRm9yID0gZnVuY3Rpb24gKHRhcmdldCwgaGFuZGxlcikge1xyXG4gICAgICAgIHZhciBwYXJlbnQgPSB0YXJnZXQucGFyZW50RWxlbWVudDtcclxuICAgICAgICAvLyDnlJ/miJDkuIDkuKpmcm9t6IqC54K55ZKM5LiA5LiqdG/oioLngrnvvIznlKjmnaXljaDkvY1cclxuICAgICAgICB2YXIgZnJvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgdmFyIHRvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBwYXJlbnQgJiYgcGFyZW50Lmluc2VydEJlZm9yZShmcm9tLCB0YXJnZXQpO1xyXG4gICAgICAgIHBhcmVudCAmJiBwYXJlbnQuaW5zZXJ0QmVmb3JlKHRvLCB0YXJnZXQpO1xyXG4gICAgICAgIC8vIOenu+mZpOaYvuekulxyXG4gICAgICAgIHBhcmVudCAmJiBwYXJlbnQucmVtb3ZlQ2hpbGQodGFyZ2V0KTtcclxuICAgICAgICAvLyDov5Tlm57lpIflv5jlvZVcclxuICAgICAgICByZXR1cm4geyBwYXJlbnQ6IHBhcmVudCwgZnJvbTogZnJvbSwgdG86IHRvLCBoYW5kbGVyOiBoYW5kbGVyIH07XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDkuLrliJfooajmmL7npLrlr7nosaHotYvlgLxcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXQgQmluZEZvcuaMh+S7pOaMh+WQkeeahOaYvuekuuWvueixoVxyXG4gICAgICogQHBhcmFtIHsqfSBkYXRhcyDmlbDmja7pm4blkIhcclxuICAgICAqIEBwYXJhbSB7Kn0gbWVtZW50byB3cmFwQmluZEZvcui/lOWbnueahOWkh+W/mOW9leWvueixoVxyXG4gICAgICogQG1lbWJlcm9mIElCcmlkZ2VcclxuICAgICAqL1xyXG4gICAgRE9NQnJpZGdlLnByb3RvdHlwZS52YWx1YXRlQmluZEZvciA9IGZ1bmN0aW9uICh0YXJnZXQsIGRhdGFzLCBtZW1lbnRvKSB7XHJcbiAgICAgICAgLy8g56e76Zmk5bey5pyJ55qE5YiX6KGo6aG55pi+56S6XHJcbiAgICAgICAgdmFyIHBhcmVudCA9IG1lbWVudG8ucGFyZW50O1xyXG4gICAgICAgIGlmIChwYXJlbnQpIHtcclxuICAgICAgICAgICAgdmFyIGZyb21JbmRleCA9IHRoaXMuZ2V0Q2hpbGRJbmRleChwYXJlbnQsIG1lbWVudG8uZnJvbSk7XHJcbiAgICAgICAgICAgIHZhciB0b0luZGV4ID0gdGhpcy5nZXRDaGlsZEluZGV4KHBhcmVudCwgbWVtZW50by50byk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBmcm9tSW5kZXggKyAxOyBpIDwgdG9JbmRleDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUNoaWxkQXQocGFyZW50LCBmcm9tSW5kZXggKyAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDmt7vliqDmlrDnmoTmuLLmn5PlmahcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gZGF0YXMpIHtcclxuICAgICAgICAgICAgdmFyIG5ld0VsZW1lbnQgPSB0YXJnZXQuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgICAgICAgICAvLyDmi7fotJ3lrZDlrZnlr7nosaHlvJXnlKhcclxuICAgICAgICAgICAgY29weVJlZihuZXdFbGVtZW50LCBuZXdFbGVtZW50KTtcclxuICAgICAgICAgICAgLy8g5re75Yqg5pi+56S6XHJcbiAgICAgICAgICAgIHBhcmVudCAmJiBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5ld0VsZW1lbnQsIG1lbWVudG8udG8pO1xyXG4gICAgICAgICAgICAvLyDkvb/nlKhjbG9uZU5vZGXmlrnms5XlpI3liLbmuLLmn5PlmahcclxuICAgICAgICAgICAgbWVtZW50by5oYW5kbGVyKGtleSwgZGF0YXNba2V5XSwgbmV3RWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiDmj5DkvpvpnZnmgIHnsbvlnovluLjph48gKi9cclxuICAgIERPTUJyaWRnZS5UWVBFID0gXCJET01cIjtcclxuICAgIHJldHVybiBET01CcmlkZ2U7XHJcbn0oKSk7XHJcbmV4cG9ydCBkZWZhdWx0IERPTUJyaWRnZTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXItZG9tL0RPTUJyaWRnZS5qc1xuLy8gbW9kdWxlIGlkID0gMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IENvbW1vbk1lc3NhZ2UgZnJvbSBcIi4uL21lc3NhZ2UvQ29tbW9uTWVzc2FnZVwiO1xyXG5pbXBvcnQgQ29yZU1lc3NhZ2UgZnJvbSBcIi4uL21lc3NhZ2UvQ29yZU1lc3NhZ2VcIjtcclxuLyoqXHJcbiAqIEBhdXRob3IgUmF5a2lkXHJcbiAqIEBlbWFpbCBpbml0aWFsX3JAcXEuY29tXHJcbiAqIEBjcmVhdGUgZGF0ZSAyMDE3LTEwLTMxXHJcbiAqIEBtb2RpZnkgZGF0ZSAyMDE3LTEwLTMxXHJcbiAqXHJcbiAqIOWPr+inguWvn+aOpeWPo+eahOm7mOiupOWunueOsOWvueixoe+8jOS8muWwhuaUtuWIsOeahOa2iOaBr+mAmuefpee7meazqOWGjOeahOWbnuiwg1xyXG4qL1xyXG52YXIgT2JzZXJ2YWJsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE9ic2VydmFibGUocGFyZW50KSB7XHJcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJEaWN0ID0ge307XHJcbiAgICAgICAgdGhpcy5fY29tbWFuZERpY3QgPSB7fTtcclxuICAgICAgICB0aGlzLl9kaXNwb3NlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX3BhcmVudCA9IHBhcmVudCAmJiBwYXJlbnQub2JzZXJ2YWJsZTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYnNlcnZhYmxlLnByb3RvdHlwZSwgXCJvYnNlcnZhYmxlXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDojrflj5bliLBJT2JzZXJ2YWJsZeWunuS9k++8jOiLpeacrOi6q+WwseaYr0lPYnNlcnZhYmxl5a6e5L2T5YiZ6L+U5Zue5pys6LqrXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAdHlwZSB7SU9ic2VydmFibGV9XHJcbiAgICAgICAgICogQG1lbWJlcm9mIE9ic2VydmFibGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoT2JzZXJ2YWJsZS5wcm90b3R5cGUsIFwicGFyZW50XCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDojrflj5bliLDniLbnuqdJT2JzZXJ2YWJsZVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHR5cGUge0lPYnNlcnZhYmxlfVxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBPYnNlcnZhYmxlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYXJlbnQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5oYW5kbGVNZXNzYWdlcyA9IGZ1bmN0aW9uIChtc2cpIHtcclxuICAgICAgICB2YXIgbGlzdGVuZXJzMSA9IHRoaXMuX2xpc3RlbmVyRGljdFttc2cudHlwZV07XHJcbiAgICAgICAgdmFyIGxpc3RlbmVyczIgPSB0aGlzLl9saXN0ZW5lckRpY3RbbXNnLmNvbnN0cnVjdG9yLnRvU3RyaW5nKCldO1xyXG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSAobGlzdGVuZXJzMSAmJiBsaXN0ZW5lcnMyID8gbGlzdGVuZXJzMS5jb25jYXQobGlzdGVuZXJzMikgOiBsaXN0ZW5lcnMxIHx8IGxpc3RlbmVyczIpO1xyXG4gICAgICAgIGlmIChsaXN0ZW5lcnMpIHtcclxuICAgICAgICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmNvbmNhdCgpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGxpc3RlbmVyc18xID0gbGlzdGVuZXJzOyBfaSA8IGxpc3RlbmVyc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRlbXAgPSBsaXN0ZW5lcnNfMVtfaV07XHJcbiAgICAgICAgICAgICAgICAvLyDosIPnlKjlpITnkIblh73mlbBcclxuICAgICAgICAgICAgICAgIGlmIChtc2cgaW5zdGFuY2VvZiBDb21tb25NZXNzYWdlKVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIOWmguaenOaYr+mAmueUqOa2iOaBr++8jOWImeWwhuWPguaVsOe7k+aehOWQjuiwg+eUqOWbnuiwg1xyXG4gICAgICAgICAgICAgICAgICAgIChfYSA9IHRlbXAuaGFuZGxlcikuY2FsbC5hcHBseShfYSwgW3RlbXAudGhpc0FyZ10uY29uY2F0KG1zZy5wYXJhbXMpKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAvLyDlpoLmnpzmmK/lhbbku5bmtojmga/vvIzliJnnm7TmjqXlsIbmtojmga/kvZPkvKDnu5nlm57osINcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wLmhhbmRsZXIuY2FsbCh0ZW1wLnRoaXNBcmcsIG1zZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmRvRGlzcGF0Y2ggPSBmdW5jdGlvbiAobXNnKSB7XHJcbiAgICAgICAgLy8g6K6+572u5omA5bGe5YaF5qC4XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1zZywgXCJfX29ic2VydmFibGVcIiwge1xyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICB2YWx1ZTogdGhpcyxcclxuICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8g6K6+572u5omA5bGe5Y6f5aeL5YaF5qC4XHJcbiAgICAgICAgaWYgKCFtc2cuX19vcmlPYnNlcnZhYmxlKSB7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtc2csIFwiX19vcmlPYnNlcnZhYmxlXCIsIHtcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMsXHJcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogZmFsc2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOinpuWPkeWRveS7pFxyXG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZHMobXNnKTtcclxuICAgICAgICAvLyDop6blj5HnlKhsaXN0ZW7lvaLlvI/nm5HlkKznmoTmtojmga9cclxuICAgICAgICB0aGlzLmhhbmRsZU1lc3NhZ2VzKG1zZyk7XHJcbiAgICB9O1xyXG4gICAgLyoqIGRpc3BhdGNo5pa55rOV5a6e546wICovXHJcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5kaXNwYXRjaCA9IGZ1bmN0aW9uICh0eXBlT3JNc2cpIHtcclxuICAgICAgICB2YXIgcGFyYW1zID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgcGFyYW1zW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDplIDmr4HliKTmlq1cclxuICAgICAgICBpZiAodGhpcy5fZGlzcG9zZWQpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAvLyDnu5/kuIDmtojmga/lr7nosaFcclxuICAgICAgICB2YXIgbXNnID0gdHlwZU9yTXNnO1xyXG4gICAgICAgIGlmICh0eXBlb2YgdHlwZU9yTXNnID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbXNnID0gbmV3IENvbW1vbk1lc3NhZ2UodHlwZU9yTXNnKTtcclxuICAgICAgICAgICAgbXNnLnBhcmFtcyA9IHBhcmFtcztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g5rS+5Y+R5raI5oGvXHJcbiAgICAgICAgdGhpcy5kb0Rpc3BhdGNoKG1zZyk7XHJcbiAgICAgICAgLy8g6aKd5aSW5rS+5Y+R5LiA5Liq6YCa55So5LqL5Lu2XHJcbiAgICAgICAgdGhpcy5kb0Rpc3BhdGNoKG5ldyBDb21tb25NZXNzYWdlKENvcmVNZXNzYWdlLk1FU1NBR0VfRElTUEFUQ0hFRCwgbXNnKSk7XHJcbiAgICAgICAgLy8g5bCG5LqL5Lu26L2s5Y+R5Yiw5LiK5LiA5bGCXHJcbiAgICAgICAgdGhpcy5fcGFyZW50ICYmIHRoaXMuX3BhcmVudC5kaXNwYXRjaChtc2cpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog55uR5ZCs5YaF5qC45raI5oGvXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUg5raI5oGv57G75Z6LXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIOa2iOaBr+WkhOeQhuWHveaVsFxyXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10g5raI5oGvdGhpc+aMh+WQkVxyXG4gICAgICogQG1lbWJlcm9mIE9ic2VydmFibGVcclxuICAgICAqL1xyXG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUubGlzdGVuID0gZnVuY3Rpb24gKHR5cGUsIGhhbmRsZXIsIHRoaXNBcmcpIHtcclxuICAgICAgICAvLyDplIDmr4HliKTmlq1cclxuICAgICAgICBpZiAodGhpcy5fZGlzcG9zZWQpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB0eXBlID0gKHR5cGVvZiB0eXBlID09IFwic3RyaW5nXCIgPyB0eXBlIDogdHlwZS50b1N0cmluZygpKTtcclxuICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJEaWN0W3R5cGVdO1xyXG4gICAgICAgIGlmICghbGlzdGVuZXJzKVxyXG4gICAgICAgICAgICB0aGlzLl9saXN0ZW5lckRpY3RbdHlwZV0gPSBsaXN0ZW5lcnMgPSBbXTtcclxuICAgICAgICAvLyDmo4Dmn6XlrZjlnKjmgKdcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciB0ZW1wID0gbGlzdGVuZXJzW2ldO1xyXG4gICAgICAgICAgICAvLyDlpoLmnpzlt7Lnu4/lrZjlnKjnm5HlkKzliJnnm7TmjqXov5Tlm55cclxuICAgICAgICAgICAgaWYgKHRlbXAuaGFuZGxlciA9PSBoYW5kbGVyICYmIHRlbXAudGhpc0FyZyA9PSB0aGlzQXJnKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDmt7vliqDnm5HlkKxcclxuICAgICAgICBsaXN0ZW5lcnMucHVzaCh7IGhhbmRsZXI6IGhhbmRsZXIsIHRoaXNBcmc6IHRoaXNBcmcgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDnp7vpmaTlhoXmoLjmtojmga/nm5HlkKxcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSDmtojmga/nsbvlnotcclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIg5raI5oGv5aSE55CG5Ye95pWwXHJcbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSDmtojmga90aGlz5oyH5ZCRXHJcbiAgICAgKiBAbWVtYmVyb2YgT2JzZXJ2YWJsZVxyXG4gICAgICovXHJcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS51bmxpc3RlbiA9IGZ1bmN0aW9uICh0eXBlLCBoYW5kbGVyLCB0aGlzQXJnKSB7XHJcbiAgICAgICAgLy8g6ZSA5q+B5Yik5patXHJcbiAgICAgICAgaWYgKHRoaXMuX2Rpc3Bvc2VkKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgdHlwZSA9ICh0eXBlb2YgdHlwZSA9PSBcInN0cmluZ1wiID8gdHlwZSA6IHR5cGUudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyRGljdFt0eXBlXTtcclxuICAgICAgICAvLyDmo4Dmn6XlrZjlnKjmgKdcclxuICAgICAgICBpZiAobGlzdGVuZXJzKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciB0ZW1wID0gbGlzdGVuZXJzW2ldO1xyXG4gICAgICAgICAgICAgICAgLy8g5aaC5p6c5bey57uP5a2Y5Zyo55uR5ZCs5YiZ55u05o6l6L+U5ZueXHJcbiAgICAgICAgICAgICAgICBpZiAodGVtcC5oYW5kbGVyID09IGhhbmRsZXIgJiYgdGVtcC50aGlzQXJnID09IHRoaXNBcmcpIHtcclxuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmhhbmRsZUNvbW1hbmRzID0gZnVuY3Rpb24gKG1zZykge1xyXG4gICAgICAgIHZhciBjb21tYW5kcyA9IHRoaXMuX2NvbW1hbmREaWN0W21zZy50eXBlXTtcclxuICAgICAgICBpZiAoY29tbWFuZHMpIHtcclxuICAgICAgICAgICAgY29tbWFuZHMgPSBjb21tYW5kcy5jb25jYXQoKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBjb21tYW5kc18xID0gY29tbWFuZHM7IF9pIDwgY29tbWFuZHNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjbHMgPSBjb21tYW5kc18xW19pXTtcclxuICAgICAgICAgICAgICAgIC8vIOaJp+ihjOWRveS7pFxyXG4gICAgICAgICAgICAgICAgbmV3IGNscyhtc2cpLmV4ZWMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOazqOWGjOWRveS7pOWIsOeJueWumua2iOaBr+exu+Wei+S4iu+8jOW9k+i/meS4quexu+Wei+eahOa2iOaBr+a0vuWPkeWIsOahhuaetuWGheaguOaXtuS8muinpuWPkUNvbW1hbmTov5DooYxcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSDopoHms6jlhoznmoTmtojmga/nsbvlnotcclxuICAgICAqIEBwYXJhbSB7KElDb21tYW5kQ29uc3RydWN0b3IpfSBjbWQg5ZG95Luk5aSE55CG5Zmo77yM5Y+v5Lul5piv5pa55rOV5b2i5byP77yM5Lmf5Y+v5Lul5L2/57G75b2i5byPXHJcbiAgICAgKiBAbWVtYmVyb2YgT2JzZXJ2YWJsZVxyXG4gICAgICovXHJcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5tYXBDb21tYW5kID0gZnVuY3Rpb24gKHR5cGUsIGNtZCkge1xyXG4gICAgICAgIC8vIOmUgOavgeWIpOaWrVxyXG4gICAgICAgIGlmICh0aGlzLl9kaXNwb3NlZClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHZhciBjb21tYW5kcyA9IHRoaXMuX2NvbW1hbmREaWN0W3R5cGVdO1xyXG4gICAgICAgIGlmICghY29tbWFuZHMpXHJcbiAgICAgICAgICAgIHRoaXMuX2NvbW1hbmREaWN0W3R5cGVdID0gY29tbWFuZHMgPSBbXTtcclxuICAgICAgICBpZiAoY29tbWFuZHMuaW5kZXhPZihjbWQpIDwgMClcclxuICAgICAgICAgICAgY29tbWFuZHMucHVzaChjbWQpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5rOo6ZSA5ZG95LukXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUg6KaB5rOo6ZSA55qE5raI5oGv57G75Z6LXHJcbiAgICAgKiBAcGFyYW0geyhJQ29tbWFuZENvbnN0cnVjdG9yKX0gY21kIOWRveS7pOWkhOeQhuWZqFxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKiBAbWVtYmVyb2YgT2JzZXJ2YWJsZVxyXG4gICAgICovXHJcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS51bm1hcENvbW1hbmQgPSBmdW5jdGlvbiAodHlwZSwgY21kKSB7XHJcbiAgICAgICAgLy8g6ZSA5q+B5Yik5patXHJcbiAgICAgICAgaWYgKHRoaXMuX2Rpc3Bvc2VkKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgdmFyIGNvbW1hbmRzID0gdGhpcy5fY29tbWFuZERpY3RbdHlwZV07XHJcbiAgICAgICAgaWYgKCFjb21tYW5kcylcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHZhciBpbmRleCA9IGNvbW1hbmRzLmluZGV4T2YoY21kKTtcclxuICAgICAgICBpZiAoaW5kZXggPCAwKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgY29tbWFuZHMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoT2JzZXJ2YWJsZS5wcm90b3R5cGUsIFwiZGlzcG9zZWRcIiwge1xyXG4gICAgICAgIC8qKiDmmK/lkKblt7Lnu4/ooqvplIDmr4EgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc3Bvc2VkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgLyoqIOmUgOavgSAqL1xyXG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyDplIDmr4HliKTmlq1cclxuICAgICAgICBpZiAodGhpcy5fZGlzcG9zZWQpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAvLyDnp7vpmaTkuIrkuIDlsYLop4Llr5/ogIXlvJXnlKhcclxuICAgICAgICB0aGlzLl9wYXJlbnQgPSBudWxsO1xyXG4gICAgICAgIC8vIOa4heepuuaJgOaciea2iOaBr+ebkeWQrFxyXG4gICAgICAgIHRoaXMuX2xpc3RlbmVyRGljdCA9IG51bGw7XHJcbiAgICAgICAgLy8g5riF56m65omA5pyJ5ZG95LukXHJcbiAgICAgICAgdGhpcy5fY29tbWFuZERpY3QgPSBudWxsO1xyXG4gICAgICAgIC8vIOagh+iusOmUgOavgVxyXG4gICAgICAgIHRoaXMuX2Rpc3Bvc2VkID0gdHJ1ZTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gT2JzZXJ2YWJsZTtcclxufSgpKTtcclxuZXhwb3J0IGRlZmF1bHQgT2JzZXJ2YWJsZTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvY29yZS9vYnNlcnZhYmxlL09ic2VydmFibGUuanNcbi8vIG1vZHVsZSBpZCA9IDIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0wOS0xOFxyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0wOS0xOFxyXG4gKlxyXG4gKiDmtojmga/ln7rnsbtcclxuKi9cclxudmFyIE1lc3NhZ2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBNZXNzYWdlKHR5cGUpIHtcclxuICAgICAgICB0aGlzLl90eXBlID0gdHlwZTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNzYWdlLnByb3RvdHlwZSwgXCJ0eXBlXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDojrflj5bmtojmga/nsbvlnovlrZfnrKbkuLJcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEByZWFkb25seVxyXG4gICAgICAgICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICAgICAgICogQG1lbWJlcm9mIE1lc3NhZ2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3R5cGU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gTWVzc2FnZTtcclxufSgpKTtcclxuZXhwb3J0IGRlZmF1bHQgTWVzc2FnZTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvY29yZS9tZXNzYWdlL01lc3NhZ2UuanNcbi8vIG1vZHVsZSBpZCA9IDIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0wOS0xM1xyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0wOS0xM1xyXG4gKlxyXG4gKiDmoLjlv4Pkuovku7bnsbvlnotcclxuKi9cclxudmFyIENvcmVNZXNzYWdlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQ29yZU1lc3NhZ2UoKSB7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOS7u+S9lea2iOaBr+a0vuWPkeWIsOahhuaetuWQjumDveS8mua0vuWPkei/meS4qua2iOaBr1xyXG4gICAgICpcclxuICAgICAqIEBzdGF0aWNcclxuICAgICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICAgKiBAbWVtYmVyb2YgQ29yZU1lc3NhZ2VcclxuICAgICAqL1xyXG4gICAgQ29yZU1lc3NhZ2UuTUVTU0FHRV9ESVNQQVRDSEVEID0gXCJtZXNzYWdlRGlzcGF0Y2hlZFwiO1xyXG4gICAgcmV0dXJuIENvcmVNZXNzYWdlO1xyXG59KCkpO1xyXG5leHBvcnQgZGVmYXVsdCBDb3JlTWVzc2FnZTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvY29yZS9tZXNzYWdlL0NvcmVNZXNzYWdlLmpzXG4vLyBtb2R1bGUgaWQgPSAyMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgeyBjb3JlIH0gZnJvbSBcIi4uLy4uL2NvcmUvQ29yZVwiO1xyXG5pbXBvcnQgeyBtdXRhdGUgfSBmcm9tIFwiLi4vYmluZC9NdXRhdG9yXCI7XHJcbmltcG9ydCB7IGJpbmRNYW5hZ2VyIH0gZnJvbSBcIi4uL2JpbmQvQmluZE1hbmFnZXJcIjtcclxuLyoqXHJcbiAqIEBhdXRob3IgUmF5a2lkXHJcbiAqIEBlbWFpbCBpbml0aWFsX3JAcXEuY29tXHJcbiAqIEBjcmVhdGUgZGF0ZSAyMDE3LTA5LTA0XHJcbiAqIEBtb2RpZnkgZGF0ZSAyMDE3LTA5LTA0XHJcbiAqXHJcbiAqIOe7hOS7tueVjOmdouS4reS7i+iAheWfuuexu1xyXG4qL1xyXG52YXIgTWVkaWF0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBNZWRpYXRvcihza2luKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog57uR5a6a55uu5qCH5pWw57uE77yM56ys5LiA5bGCa2V55piv6LCD55So5bGC57qn77yM56ys5LqM5bGC5piv6K+l5bGC57qn6ZyA6KaB57yW6K+R55qE5a+56LGh5pWw57uEXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAdHlwZSB7RGljdGlvbmFyeTxhbnksIGFueT5bXX1cclxuICAgICAgICAgKiBAbWVtYmVyb2YgTWVkaWF0b3JcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmJpbmRUYXJnZXRzID0gW107XHJcbiAgICAgICAgdGhpcy5fZGlzcG9zZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSBbXTtcclxuICAgICAgICBpZiAoc2tpbilcclxuICAgICAgICAgICAgdGhpcy5za2luID0gc2tpbjtcclxuICAgICAgICAvLyDliJ3lp4vljJbnu5HlrppcclxuICAgICAgICBiaW5kTWFuYWdlci5iaW5kKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lZGlhdG9yLnByb3RvdHlwZSwgXCJ2aWV3TW9kZWxcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPluaIluiuvue9rlZpZXdNb2RlbFxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHR5cGUgeyp9XHJcbiAgICAgICAgICogQG1lbWJlcm9mIE1lZGlhdG9yXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92aWV3TW9kZWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAvLyDorr7nva7nmoTml7blgJnov5vooYzkuIDmrKHlj5jlvIJcclxuICAgICAgICAgICAgdGhpcy5fdmlld01vZGVsID0gbXV0YXRlKHZhbHVlKTtcclxuICAgICAgICAgICAgLy8g5pu05paw57uR5a6aXHJcbiAgICAgICAgICAgIGJpbmRNYW5hZ2VyLmJpbmQodGhpcyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWVkaWF0b3IucHJvdG90eXBlLCBcImRpc3Bvc2VkXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDojrflj5bkuK3ku4vogIXmmK/lkKblt7LooqvplIDmr4FcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEByZWFkb25seVxyXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBNZWRpYXRvclxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGlzcG9zZWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWVkaWF0b3IucHJvdG90eXBlLCBcImRlcGVuZE1vZHVsZUluc3RhbmNlXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmiYDlsZ7nmoTmqKHlnZflvJXnlKjvvIzpnIDopoHphY3lkIhARGVsZWdhdGVNZWRpYXRvcuS9v+eUqFxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJlYWRvbmx5XHJcbiAgICAgICAgICogQHR5cGUge0lNb2R1bGV9XHJcbiAgICAgICAgICogQG1lbWJlcm9mIElNZWRpYXRvclxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVwZW5kTW9kdWxlSW5zdGFuY2U7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWVkaWF0b3IucHJvdG90eXBlLCBcImRlcGVuZE1vZHVsZVwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5omA5bGe55qE5qih5Z2X57G75Z6L77yM6ZyA6KaB6YWN5ZCIQERlbGVnYXRlTWVkaWF0b3Lkvb/nlKhcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEByZWFkb25seVxyXG4gICAgICAgICAqIEB0eXBlIHtJTW9kdWxlQ29uc3RydWN0b3J9XHJcbiAgICAgICAgICogQG1lbWJlcm9mIElNZWRpYXRvclxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVwZW5kTW9kdWxlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lZGlhdG9yLnByb3RvdHlwZSwgXCJpbml0UmVzcG9uc2VzXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDkvr/mjbfojrflj5booqvmiZjnrqHliLDnmoTmqKHlnZfnmoTliJ3lp4vljJbmtojmga/mlbDnu4RcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEB0eXBlIHtSZXNwb25zZURhdGFbXX1cclxuICAgICAgICAgKiBAbWVtYmVyb2YgSU1vZHVsZU1lZGlhdG9yXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5fZGVwZW5kTW9kdWxlSW5zdGFuY2UgPyB0aGlzLl9kZXBlbmRNb2R1bGVJbnN0YW5jZS5yZXNwb25zZXMgOiBbXSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWVkaWF0b3IucHJvdG90eXBlLCBcImRhdGFcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOaJk+W8gOaXtuS8oOmAkueahGRhdGHlr7nosaFcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEByZWFkb25seVxyXG4gICAgICAgICAqIEB0eXBlIHsqfVxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBNZWRpYXRvclxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGF0YTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIC8qKlxyXG4gICAgICog5YiX5Ye65Lit5LuL6ICF5omA6ZyA55qE6LWE5rqQ5pWw57uE77yM5Y+v6YeN5YaZXHJcbiAgICAgKiDkvYblpoLmnpxNZWRpYXRvcuayoeacieiiq+aJmOeuoeWcqE1vZHVsZeS4reWImeivpeaWueazleS4jeW6lOivpeiiq+mHjeWGme+8jOWQpuWImeWPr+iDveS8muaciemXrumimFxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmdbXX0g6LWE5rqQ5pWw57uE77yM6K+35qC55o2u6K+lTWVkaWF0b3LmiYDmk43kvZznmoTmuLLmn5PmqKHnu4TnmoTpnIDmsYLnu5nlh7rotYTmupDlnLDlnYDmiJbnu4TlkI1cclxuICAgICAqIEBtZW1iZXJvZiBNZWRpYXRvclxyXG4gICAgICovXHJcbiAgICBNZWRpYXRvci5wcm90b3R5cGUubGlzdEFzc2V0cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOWKoOi9veS7jmxpc3RBc3NldHPkuK3ojrflj5bliLDnmoTmiYDmnInotYTmupBcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyhlcnI/OkVycm9yKT0+dm9pZH0gaGFuZGxlciDliqDovb3lrozmr5XlkI7nmoTlm57osIPvvIzlpoLmnpzlh7rplJnliJnkvJrnu5nlh7plcnLlj4LmlbBcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICogQG1lbWJlcm9mIE1lZGlhdG9yXHJcbiAgICAgKi9cclxuICAgIE1lZGlhdG9yLnByb3RvdHlwZS5sb2FkQXNzZXRzID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5icmlkZ2UubG9hZEFzc2V0cyh0aGlzLmxpc3RBc3NldHMoKSwgdGhpcywgZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAvLyDosIPnlKhvbkxvYWRBc3NldHPmjqXlj6NcclxuICAgICAgICAgICAgc2VsZi5vbkxvYWRBc3NldHMoZXJyKTtcclxuICAgICAgICAgICAgLy8g6LCD55So5Zue6LCDXHJcbiAgICAgICAgICAgIGhhbmRsZXIoZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOW9k+aJgOmcgOi1hOa6kOWKoOi9veWujOavleWQjuiwg+eUqFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RXJyb3J9IFtlcnJdIOWKoOi9veWHuumUmeS8mue7meWHuumUmeivr+Wvueixoe+8jOayoemUmeWImeS4jee7mVxyXG4gICAgICogQG1lbWJlcm9mIE1lZGlhdG9yXHJcbiAgICAgKi9cclxuICAgIE1lZGlhdG9yLnByb3RvdHlwZS5vbkxvYWRBc3NldHMgPSBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDmiZPlvIDvvIzkuLrkuoblrp7njrBJT3BlbkNsb3Nl5o6l5Y+jXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHsqfSBbZGF0YV1cclxuICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICogQG1lbWJlcm9mIE1lZGlhdG9yXHJcbiAgICAgKi9cclxuICAgIE1lZGlhdG9yLnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICB0aGlzLl9kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLm9uT3BlbihkYXRhKTtcclxuICAgICAgICAvLyDliJ3lp4vljJbnu5HlrprvvIzlpoLmnpzlrZDnsbvlubbmsqHmnInlnKhvbk9wZW7kuK3orr7nva52aWV3TW9kZWzvvIzliJnnu5nkuIDkuKrpu5jorqTlgLzku6XlkK/liqjnu5Hlrprlip/og71cclxuICAgICAgICBpZiAoIXRoaXMuX3ZpZXdNb2RlbClcclxuICAgICAgICAgICAgdGhpcy52aWV3TW9kZWwgPSB7fTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOWFs+mXre+8jOS4uuS6huWunueOsElPcGVuQ2xvc2XmjqXlj6NcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyp9IFtkYXRhXVxyXG4gICAgICogQHJldHVybnMgeyp9XHJcbiAgICAgKiBAbWVtYmVyb2YgTWVkaWF0b3JcclxuICAgICAqL1xyXG4gICAgTWVkaWF0b3IucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICB0aGlzLm9uQ2xvc2UoZGF0YSk7XHJcbiAgICAgICAgdGhpcy5kaXNwb3NlKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDlvZPmiZPlvIDml7bosIPnlKhcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyp9IFtkYXRhXSDlj6/og73nmoTmiZPlvIDlj4LmlbBcclxuICAgICAqIEBtZW1iZXJvZiBNZWRpYXRvclxyXG4gICAgICovXHJcbiAgICBNZWRpYXRvci5wcm90b3R5cGUub25PcGVuID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAvLyDlj6/ph43lhplcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOW9k+WFs+mXreaXtuiwg+eUqFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7Kn0gW2RhdGFdIOWPr+iDveeahOWFs+mXreWPguaVsFxyXG4gICAgICogQG1lbWJlcm9mIE1lZGlhdG9yXHJcbiAgICAgKi9cclxuICAgIE1lZGlhdG9yLnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAvLyDlj6/ph43lhplcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOebkeWQrOS6i+S7tu+8jOS7jui/meS4quaWueazleebkeWQrOeahOS6i+S7tuS8muWcqOS4reS7i+iAhemUgOavgeaXtuiiq+iHquWKqOenu+mZpOebkeWQrFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IOS6i+S7tuebruagh+WvueixoVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUg5LqL5Lu257G75Z6LXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIOS6i+S7tuWkhOeQhuWHveaVsFxyXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gdGhpc+aMh+WQkeWvueixoVxyXG4gICAgICogQG1lbWJlcm9mIE1lZGlhdG9yXHJcbiAgICAgKi9cclxuICAgIE1lZGlhdG9yLnByb3RvdHlwZS5tYXBMaXN0ZW5lciA9IGZ1bmN0aW9uICh0YXJnZXQsIHR5cGUsIGhhbmRsZXIsIHRoaXNBcmcpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fbGlzdGVuZXJzW2ldO1xyXG4gICAgICAgICAgICBpZiAoZGF0YS50YXJnZXQgPT0gdGFyZ2V0ICYmIGRhdGEudHlwZSA9PSB0eXBlICYmIGRhdGEuaGFuZGxlciA9PSBoYW5kbGVyICYmIGRhdGEudGhpc0FyZyA9PSB0aGlzQXJnKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDlt7Lnu4/lrZjlnKjkuIDmoLfnmoTnm5HlkKzvvIzkuI3lho3nm5HlkKxcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDorrDlvZXnm5HlkKxcclxuICAgICAgICB0aGlzLl9saXN0ZW5lcnMucHVzaCh7IHRhcmdldDogdGFyZ2V0LCB0eXBlOiB0eXBlLCBoYW5kbGVyOiBoYW5kbGVyLCB0aGlzQXJnOiB0aGlzQXJnIH0pO1xyXG4gICAgICAgIC8vIOiwg+eUqOahpeaOpeWPo1xyXG4gICAgICAgIHRoaXMuYnJpZGdlLm1hcExpc3RlbmVyKHRhcmdldCwgdHlwZSwgaGFuZGxlciwgdGhpc0FyZyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDms6jplIDnm5HlkKzkuovku7ZcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyp9IHRhcmdldCDkuovku7bnm67moIflr7nosaFcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIOS6i+S7tuexu+Wei1xyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciDkuovku7blpITnkIblh73mlbBcclxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIHRoaXPmjIflkJHlr7nosaFcclxuICAgICAqIEBtZW1iZXJvZiBNZWRpYXRvclxyXG4gICAgICovXHJcbiAgICBNZWRpYXRvci5wcm90b3R5cGUudW5tYXBMaXN0ZW5lciA9IGZ1bmN0aW9uICh0YXJnZXQsIHR5cGUsIGhhbmRsZXIsIHRoaXNBcmcpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fbGlzdGVuZXJzW2ldO1xyXG4gICAgICAgICAgICBpZiAoZGF0YS50YXJnZXQgPT0gdGFyZ2V0ICYmIGRhdGEudHlwZSA9PSB0eXBlICYmIGRhdGEuaGFuZGxlciA9PSBoYW5kbGVyICYmIGRhdGEudGhpc0FyZyA9PSB0aGlzQXJnKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDosIPnlKjmoaXmjqXlj6NcclxuICAgICAgICAgICAgICAgIHRoaXMuYnJpZGdlLnVubWFwTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBoYW5kbGVyLCB0aGlzQXJnKTtcclxuICAgICAgICAgICAgICAgIC8vIOenu+mZpOiusOW9lVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5rOo6ZSA5omA5pyJ5rOo5YaM5Zyo5b2T5YmN5Lit5LuL6ICF5LiK55qE5LqL5Lu255uR5ZCsXHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlcm9mIE1lZGlhdG9yXHJcbiAgICAgKi9cclxuICAgIE1lZGlhdG9yLnByb3RvdHlwZS51bm1hcEFsbExpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fbGlzdGVuZXJzLnBvcCgpO1xyXG4gICAgICAgICAgICAvLyDosIPnlKjmoaXmjqXlj6NcclxuICAgICAgICAgICAgdGhpcy5icmlkZ2UudW5tYXBMaXN0ZW5lcihkYXRhLnRhcmdldCwgZGF0YS50eXBlLCBkYXRhLmhhbmRsZXIsIGRhdGEudGhpc0FyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZWRpYXRvci5wcm90b3R5cGUsIFwib2JzZXJ2YWJsZVwiLCB7XHJcbiAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqIOS4i+mdouaYr+aooeWdl+a2iOaBr+ezu+e7nyAqKioqKioqKioqKioqKioqKioqKioqKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmmrTpnLJJT2JzZXJ2YWJsZVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJlYWRvbmx5XHJcbiAgICAgICAgICogQHR5cGUge0lPYnNlcnZhYmxlfVxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBNZWRpYXRvclxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuX2RlcGVuZE1vZHVsZUluc3RhbmNlIHx8IGNvcmUpLm9ic2VydmFibGU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWVkaWF0b3IucHJvdG90eXBlLCBcInBhcmVudFwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6I635Y+W5Yiw54i257qnSU9ic2VydmFibGVcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEB0eXBlIHtJT2JzZXJ2YWJsZX1cclxuICAgICAgICAgKiBAbWVtYmVyb2YgTWVkaWF0b3JcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMub2JzZXJ2YWJsZS5wYXJlbnQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICAvKiogZGlzcGF0Y2jmlrnms5Xlrp7njrAgKi9cclxuICAgIE1lZGlhdG9yLnByb3RvdHlwZS5kaXNwYXRjaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcGFyYW1zID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgcGFyYW1zW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gdGhpcy5vYnNlcnZhYmxlO1xyXG4gICAgICAgIG9ic2VydmFibGUuZGlzcGF0Y2guYXBwbHkob2JzZXJ2YWJsZSwgcGFyYW1zKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOebkeWQrOa2iOaBr1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIOa2iOaBr+exu+Wei1xyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciDmtojmga/lpITnkIblh73mlbBcclxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIOa2iOaBr3RoaXPmjIflkJFcclxuICAgICAqIEBtZW1iZXJvZiBJTW9kdWxlT2JzZXJ2YWJsZVxyXG4gICAgICovXHJcbiAgICBNZWRpYXRvci5wcm90b3R5cGUubGlzdGVuID0gZnVuY3Rpb24gKHR5cGUsIGhhbmRsZXIsIHRoaXNBcmcpIHtcclxuICAgICAgICB0aGlzLm9ic2VydmFibGUubGlzdGVuKHR5cGUsIGhhbmRsZXIsIHRoaXNBcmcpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog56e76Zmk5raI5oGv55uR5ZCsXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUg5raI5oGv57G75Z6LXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIOa2iOaBr+WkhOeQhuWHveaVsFxyXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10g5raI5oGvdGhpc+aMh+WQkVxyXG4gICAgICogQG1lbWJlcm9mIElNb2R1bGVPYnNlcnZhYmxlXHJcbiAgICAgKi9cclxuICAgIE1lZGlhdG9yLnByb3RvdHlwZS51bmxpc3RlbiA9IGZ1bmN0aW9uICh0eXBlLCBoYW5kbGVyLCB0aGlzQXJnKSB7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlLnVubGlzdGVuKHR5cGUsIGhhbmRsZXIsIHRoaXNBcmcpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5rOo5YaM5ZG95Luk5Yiw54m55a6a5raI5oGv57G75Z6L5LiK77yM5b2T6L+Z5Liq57G75Z6L55qE5raI5oGv5rS+5Y+R5Yiw5qGG5p625YaF5qC45pe25Lya6Kem5Y+RQ29tbWFuZOi/kOihjFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIOimgeazqOWGjOeahOa2iOaBr+exu+Wei1xyXG4gICAgICogQHBhcmFtIHsoSUNvbW1hbmRDb25zdHJ1Y3Rvcil9IGNtZCDlkb3ku6TlpITnkIblmajvvIzlj6/ku6XmmK/mlrnms5XlvaLlvI/vvIzkuZ/lj6/ku6Xkvb/nsbvlvaLlvI9cclxuICAgICAqIEBtZW1iZXJvZiBJTW9kdWxlT2JzZXJ2YWJsZVxyXG4gICAgICovXHJcbiAgICBNZWRpYXRvci5wcm90b3R5cGUubWFwQ29tbWFuZCA9IGZ1bmN0aW9uICh0eXBlLCBjbWQpIHtcclxuICAgICAgICB0aGlzLm9ic2VydmFibGUubWFwQ29tbWFuZCh0eXBlLCBjbWQpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5rOo6ZSA5ZG95LukXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUg6KaB5rOo6ZSA55qE5raI5oGv57G75Z6LXHJcbiAgICAgKiBAcGFyYW0geyhJQ29tbWFuZENvbnN0cnVjdG9yKX0gY21kIOWRveS7pOWkhOeQhuWZqFxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKiBAbWVtYmVyb2YgSU1vZHVsZU9ic2VydmFibGVcclxuICAgICAqL1xyXG4gICAgTWVkaWF0b3IucHJvdG90eXBlLnVubWFwQ29tbWFuZCA9IGZ1bmN0aW9uICh0eXBlLCBjbWQpIHtcclxuICAgICAgICB0aGlzLm9ic2VydmFibGUudW5tYXBDb21tYW5kKHR5cGUsIGNtZCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDplIDmr4HkuK3ku4vogIVcclxuICAgICAqXHJcbiAgICAgKiBAbWVtYmVyb2YgTWVkaWF0b3JcclxuICAgICAqL1xyXG4gICAgTWVkaWF0b3IucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2Rpc3Bvc2VkKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgLy8g6LCD55So5qih5p2/5pa55rOVXHJcbiAgICAgICAgdGhpcy5vbkRpc3Bvc2UoKTtcclxuICAgICAgICAvLyDnp7vpmaTmmL7npLpcclxuICAgICAgICBpZiAodGhpcy5za2luICYmIHRoaXMuYnJpZGdlKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLmJyaWRnZS5nZXRQYXJlbnQodGhpcy5za2luKTtcclxuICAgICAgICAgICAgaWYgKHBhcmVudClcclxuICAgICAgICAgICAgICAgIHRoaXMuYnJpZGdlLnJlbW92ZUNoaWxkKHBhcmVudCwgdGhpcy5za2luKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g5rOo6ZSA5LqL5Lu255uR5ZCsXHJcbiAgICAgICAgdGhpcy51bm1hcEFsbExpc3RlbmVycygpO1xyXG4gICAgICAgIC8vIOenu+mZpOihqOeOsOWxguahpVxyXG4gICAgICAgIHRoaXMuYnJpZGdlID0gbnVsbDtcclxuICAgICAgICAvLyDnp7vpmaTnu5HlrppcclxuICAgICAgICBiaW5kTWFuYWdlci51bmJpbmQodGhpcyk7XHJcbiAgICAgICAgLy8g56e76ZmkVmlld01vZGVsXHJcbiAgICAgICAgdGhpcy5fdmlld01vZGVsID0gbnVsbDtcclxuICAgICAgICAvLyDnp7vpmaTnu5Hlrprnm67moIfmlbDnu4RcclxuICAgICAgICB0aGlzLmJpbmRUYXJnZXRzID0gbnVsbDtcclxuICAgICAgICAvLyDnp7vpmaTnmq7ogqRcclxuICAgICAgICB0aGlzLnNraW4gPSBudWxsO1xyXG4gICAgICAgIC8vIOiuvue9ruW3suiiq+mUgOavgVxyXG4gICAgICAgIHRoaXMuX2Rpc3Bvc2VkID0gdHJ1ZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOW9k+mUgOavgeaXtuiwg+eUqFxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJvZiBNZWRpYXRvclxyXG4gICAgICovXHJcbiAgICBNZWRpYXRvci5wcm90b3R5cGUub25EaXNwb3NlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIOWPr+mHjeWGmVxyXG4gICAgfTtcclxuICAgIHJldHVybiBNZWRpYXRvcjtcclxufSgpKTtcclxuZXhwb3J0IGRlZmF1bHQgTWVkaWF0b3I7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2VuZ2luZS9tZWRpYXRvci9NZWRpYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IHsgY3JlYXRlRXZhbEZ1bmMgfSBmcm9tIFwiLi9VdGlsc1wiO1xyXG4vKipcclxuICogQGF1dGhvciBSYXlraWRcclxuICogQGVtYWlsIGluaXRpYWxfckBxcS5jb21cclxuICogQGNyZWF0ZSBkYXRlIDIwMTctMTEtMDZcclxuICogQG1vZGlmeSBkYXRlIDIwMTctMTEtMDZcclxuICpcclxuICog5pWw5o2u5pu05paw6K6i6ZiF6ICF77yM5b2T5L6d6LWW55qE5pWw5o2u5pyJ5pu05paw5pe25Lya6Kem5Y+RY2FsbGJhY2vpgJrnn6XlpJbpnaJcclxuKi9cclxudmFyIFdhdGNoZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBXYXRjaGVyKGJpbmQsIHRhcmdldCwgZXhwLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBzY29wZXMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDQ7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBzY29wZXNbX2kgLSA0XSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2Rpc3Bvc2VkID0gZmFsc2U7XHJcbiAgICAgICAgLy8g6K6w5b2VQmluZOWunuS+i1xyXG4gICAgICAgIHRoaXMuX2JpbmQgPSBiaW5kO1xyXG4gICAgICAgIC8vIOiusOW9leS9nOeUqOebruagh+OAgeihqOi+vuW8j+WSjOS9nOeUqOWfn1xyXG4gICAgICAgIHRoaXMuX3RhcmdldCA9IHRhcmdldDtcclxuICAgICAgICB0aGlzLl9leHAgPSBleHA7XHJcbiAgICAgICAgdGhpcy5fc2NvcGVzID0gc2NvcGVzO1xyXG4gICAgICAgIC8vIOWwhuihqOi+vuW8j+WSjOS9nOeUqOWfn+ino+aekOS4uuS4gOS4qkZ1bmN0aW9uXHJcbiAgICAgICAgdGhpcy5fZXhwRnVuYyA9IGNyZWF0ZUV2YWxGdW5jKGV4cCwgMSArIHNjb3Blcy5sZW5ndGgpO1xyXG4gICAgICAgIC8vIOiusOW9leWbnuiwg+WHveaVsFxyXG4gICAgICAgIHRoaXMuX2NhbGxiYWNrID0gY2FsbGJhY2s7XHJcbiAgICAgICAgLy8g6L+b6KGM6aaW5qyh5pu05pawXHJcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5Yiw6KGo6L6+5byP5b2T5YmN5pyA5paw5YC8XHJcbiAgICAgKiBAcmV0dXJucyB7YW55fSDmnIDmlrDlgLxcclxuICAgICAqL1xyXG4gICAgV2F0Y2hlci5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2Rpc3Bvc2VkKVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB2YXIgdmFsdWU7XHJcbiAgICAgICAgLy8g6K6w5b2V6Ieq6LqrXHJcbiAgICAgICAgV2F0Y2hlci51cGRhdGluZyA9IHRoaXM7XHJcbiAgICAgICAgLy8g6K6+572u6YCa55So5bGe5oCnXHJcbiAgICAgICAgdmFyIGNvbW1vblNjb3BlID0ge1xyXG4gICAgICAgICAgICAkdGhpczogdGhpcy5fYmluZC5tZWRpYXRvcixcclxuICAgICAgICAgICAgJGJyaWRnZTogdGhpcy5fYmluZC5tZWRpYXRvci5icmlkZ2UsXHJcbiAgICAgICAgICAgICR0YXJnZXQ6IHRoaXMuX3RhcmdldFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8g6KGo6L6+5byP5rGC5YC8XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdmFsdWUgPSAoX2EgPSB0aGlzLl9leHBGdW5jKS5jYWxsLmFwcGx5KF9hLCBbdGhpcy5fc2NvcGVzWzBdLCBjb21tb25TY29wZV0uY29uY2F0KHRoaXMuX3Njb3BlcykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIC8vIOi+k+WHuumUmeivr+aXpeW/l1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCLooajovr7lvI/msYLlgLzplJnor69cXG5lcnI6IFwiICsgZXJyLnRvU3RyaW5nKCkgKyBcIlxcbmV4cO+8mlwiICsgdGhpcy5fZXhwICsgXCLvvIxzY29wZXPvvJpcIiArIEpTT04uc3RyaW5naWZ5KHRoaXMuX3Njb3BlcykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDnp7vpmaToh6rouqvorrDlvZVcclxuICAgICAgICBXYXRjaGVyLnVwZGF0aW5nID0gbnVsbDtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5b2T5L6d6LWW55qE5pWw5o2u5pyJ5pu05paw5pe26LCD55So6K+l5pa55rOVXHJcbiAgICAgKiBAcGFyYW0gZXh0cmEg5Y+v6IO955qE6aKd5aSW5pWw5o2uXHJcbiAgICAgKi9cclxuICAgIFdhdGNoZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChleHRyYSkge1xyXG4gICAgICAgIGlmICh0aGlzLl9kaXNwb3NlZClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0VmFsdWUoKTtcclxuICAgICAgICBpZiAoIVdhdGNoZXIuaXNFcXVhbCh2YWx1ZSwgdGhpcy5fdmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrICYmIHRoaXMuX2NhbGxiYWNrKHZhbHVlLCB0aGlzLl92YWx1ZSwgZXh0cmEpO1xyXG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IFdhdGNoZXIuZGVlcENvcHkodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiog6ZSA5q+B6K6i6ZiF6ICFICovXHJcbiAgICBXYXRjaGVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9kaXNwb3NlZClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcclxuICAgICAgICB0aGlzLl90YXJnZXQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX2V4cCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fc2NvcGVzID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9leHBGdW5jID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9jYWxsYmFjayA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fZGlzcG9zZWQgPSB0cnVlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5piv5ZCm55u4562J77yM5YyF5ous5Z+656GA57G75Z6L5ZKM5a+56LGhL+aVsOe7hOeahOWvueavlFxyXG4gICAgICovXHJcbiAgICBXYXRjaGVyLmlzRXF1YWwgPSBmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgIHJldHVybiAoYSA9PSBiIHx8IChXYXRjaGVyLmlzT2JqZWN0KGEpICYmIFdhdGNoZXIuaXNPYmplY3QoYilcclxuICAgICAgICAgICAgPyBKU09OLnN0cmluZ2lmeShhKSA9PSBKU09OLnN0cmluZ2lmeShiKVxyXG4gICAgICAgICAgICA6IGZhbHNlKSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDmmK/lkKbkuLrlr7nosaEo5YyF5ous5pWw57uE44CB5q2j5YiZ562JKVxyXG4gICAgICovXHJcbiAgICBXYXRjaGVyLmlzT2JqZWN0ID0gZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgIHJldHVybiAob2JqICYmIHR5cGVvZiBvYmogPT0gXCJvYmplY3RcIik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDlpI3liLblr7nosaHvvIzoi6XkuLrlr7nosaHliJnmt7HluqblpI3liLZcclxuICAgICAqL1xyXG4gICAgV2F0Y2hlci5kZWVwQ29weSA9IGZ1bmN0aW9uIChmcm9tKSB7XHJcbiAgICAgICAgaWYgKFdhdGNoZXIuaXNPYmplY3QoZnJvbSkpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIC8vIOWkjeadguexu+Wei+Wvueixoe+8jOWFiOWtl+espuS4suWMlu+8jOWGjeWvueixoeWMllxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZnJvbSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHsgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDln7rmnKznsbvlnovlr7nosaHlkozml6Dms5XlpI3liLbnmoTlr7nosaHvvIznm7TmjqXov5Tlm57kuYtcclxuICAgICAgICByZXR1cm4gZnJvbTtcclxuICAgIH07XHJcbiAgICAvKiog6K6w5b2V5b2T5YmN5q2j5Zyo5omn6KGMdXBkYXRl5pa55rOV55qEV2F0Y2hlcuW8leeUqCAqL1xyXG4gICAgV2F0Y2hlci51cGRhdGluZyA9IG51bGw7XHJcbiAgICBXYXRjaGVyLl91aWQgPSAwO1xyXG4gICAgcmV0dXJuIFdhdGNoZXI7XHJcbn0oKSk7XHJcbmV4cG9ydCBkZWZhdWx0IFdhdGNoZXI7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2VuZ2luZS9iaW5kL1dhdGNoZXIuanNcbi8vIG1vZHVsZSBpZCA9IDI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0xMS0wNlxyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0xMS0wNlxyXG4gKlxyXG4gKiDnu5Hlrprlt6XlhbfnsbtcclxuKi9cclxuZnVuY3Rpb24gd3JhcEV2YWxGdW5jRXhwKGV4cCwgc2NvcGVDb3VudCkge1xyXG4gICAgdmFyIGFyZ0xpc3QgPSBbXTtcclxuICAgIHZhciBleHBTdHIgPSBleHA7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjb3BlQ291bnQ7IGkrKykge1xyXG4gICAgICAgIGFyZ0xpc3QucHVzaChcInNcIiArIGkpO1xyXG4gICAgICAgIGV4cFN0ciA9IFwid2l0aChzXCIgKyAoc2NvcGVDb3VudCAtIDEgLSBpKSArIFwifHx7fSl7XCIgKyBleHBTdHIgKyBcIn1cIjtcclxuICAgIH1cclxuICAgIHJldHVybiBGdW5jdGlvbihhcmdMaXN0LmpvaW4oXCIsXCIpLCBleHBTdHIpO1xyXG59XHJcbi8qKlxyXG4gKiDliJvlu7rkuIDkuKrmiafooYzmlrnms5XvvIznlKjkuo7mnKrmnaXmiafooYxcclxuICpcclxuICogQGV4cG9ydFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZXhwIOihqOi+vuW8j1xyXG4gKiBAcGFyYW0ge251bWJlcn0gW3Njb3BlQ291bnQ9MF0g5omA6ZyA55qE5Z+f55qE5pWw6YePXHJcbiAqIEByZXR1cm5zIHsoLi4uc2NvcGVzOmFueVtdKT0+dm9pZH0g5Yib5bu655qE5pa55rOVXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUnVuRnVuYyhleHAsIHNjb3BlQ291bnQpIHtcclxuICAgIGlmIChzY29wZUNvdW50ID09PSB2b2lkIDApIHsgc2NvcGVDb3VudCA9IDA7IH1cclxuICAgIHZhciBmdW5jO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBmdW5jID0gd3JhcEV2YWxGdW5jRXhwKGV4cCwgc2NvcGVDb3VudCk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgLy8g5Y+v6IO95piv5p+Q5Lqb54mI5pys55qE6Kej6YeK5Zmo5LiN6K6k6K+G5qih5p2/5a2X56ym5Liy77yM5bCG5qih5p2/5a2X56ym5Liy5Y+Y5oiQ5pmu6YCa5a2X56ym5LiyXHJcbiAgICAgICAgdmFyIHNlcFN0ciA9IChleHAuaW5kZXhPZignXCInKSA8IDAgPyAnXCInIDogXCInXCIpO1xyXG4gICAgICAgIC8vIOWwhmV4cOS4reeahMK35pu/5o2i5Li6J1xyXG4gICAgICAgIHZhciByZWcgPSAvKFteXFxcXF0/KWAvZztcclxuICAgICAgICBleHAgPSBleHAucmVwbGFjZShyZWcsIFwiJDFcIiArIHNlcFN0cik7XHJcbiAgICAgICAgLy8g5bCGZXhw5LitJHsuLi595pu/5o2i5Li6XCIgKyAuLi4gKyBcIueahOW9ouW8j1xyXG4gICAgICAgIHJlZyA9IC9cXCRcXHsoLio/KVxcfS9nO1xyXG4gICAgICAgIGV4cCA9IGV4cC5yZXBsYWNlKHJlZywgc2VwU3RyICsgXCIrKCQxKStcIiArIHNlcFN0cik7XHJcbiAgICAgICAgLy8g6YeN5paw55Sf5oiQ5pa55rOV5bm26L+U5ZueXHJcbiAgICAgICAgZnVuYyA9IHdyYXBFdmFsRnVuY0V4cChleHAsIHNjb3BlQ291bnQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmM7XHJcbn1cclxuLyoqXHJcbiAqIOebtOaOpeaJp+ihjOihqOi+vuW8j++8jOS4jeaxguWAvOOAguivpeaWueazleWPr+S7peaJp+ihjOWkmuadoeivreWPpVxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBleHAg6KGo6L6+5byPXHJcbiAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIHRoaXPmjIflkJFcclxuICogQHBhcmFtIHsuLi5hbnlbXX0gc2NvcGVzIOihqOi+vuW8j+eahOS9nOeUqOWfn+WIl+ihqFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJ1bkV4cChleHAsIHRoaXNBcmcpIHtcclxuICAgIHZhciBzY29wZXMgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgc2NvcGVzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlUnVuRnVuYyhleHAsIHNjb3Blcy5sZW5ndGgpLmFwcGx5KHRoaXNBcmcsIHNjb3Blcyk7XHJcbn1cclxuLyoqXHJcbiAqIOWIm+W7uuS4gOS4quihqOi+vuW8j+axguWAvOaWueazle+8jOeUqOS6juacquadpeaJp+ihjFxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBleHAg6KGo6L6+5byPXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBbc2NvcGVDb3VudD0wXSDmiYDpnIDnmoTln5/nmoTmlbDph49cclxuICogQHJldHVybnMgeyguLi5zY29wZXM6YW55W10pPT5hbnl9IOWIm+W7uueahOaWueazlVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUV2YWxGdW5jKGV4cCwgc2NvcGVDb3VudCkge1xyXG4gICAgaWYgKHNjb3BlQ291bnQgPT09IHZvaWQgMCkgeyBzY29wZUNvdW50ID0gMDsgfVxyXG4gICAgcmV0dXJuIGNyZWF0ZVJ1bkZ1bmMoXCJyZXR1cm4gXCIgKyBleHAsIHNjb3BlQ291bnQpO1xyXG59XHJcbi8qKlxyXG4gKiDooajovr7lvI/msYLlgLzvvIzml6Dms5XmiafooYzlpJrmnaHor63lj6VcclxuICpcclxuICogQGV4cG9ydFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZXhwIOihqOi+vuW8j1xyXG4gKiBAcGFyYW0geyp9IFt0aGlzQXJnXSB0aGlz5oyH5ZCRXHJcbiAqIEBwYXJhbSB7Li4uYW55W119IHNjb3BlcyDooajovr7lvI/nmoTkvZznlKjln5/liJfooahcclxuICogQHJldHVybnMgeyp9IOi/lOWbnuWAvFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGV2YWxFeHAoZXhwLCB0aGlzQXJnKSB7XHJcbiAgICB2YXIgc2NvcGVzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHNjb3Blc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHJldHVybiBjcmVhdGVFdmFsRnVuYyhleHAsIHNjb3Blcy5sZW5ndGgpLmFwcGx5KHRoaXNBcmcsIHNjb3Blcyk7XHJcbn1cclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL2JpbmQvVXRpbHMuanNcbi8vIG1vZHVsZSBpZCA9IDI1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn07XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiLi4vLi4vY29yZS9pbmplY3Rvci9JbmplY3RvclwiO1xyXG5pbXBvcnQgeyBjb3JlIH0gZnJvbSBcIi4uLy4uL2NvcmUvQ29yZVwiO1xyXG5pbXBvcnQgRGljdGlvbmFyeSBmcm9tIFwiLi4vLi4vdXRpbHMvRGljdGlvbmFyeVwiO1xyXG5pbXBvcnQgQmluZCBmcm9tIFwiLi9CaW5kXCI7XHJcbmltcG9ydCB7IGV2YWxFeHAsIGNyZWF0ZVJ1bkZ1bmMgfSBmcm9tIFwiLi9VdGlsc1wiO1xyXG5pbXBvcnQgeyBuZXRNYW5hZ2VyIH0gZnJvbSBcIi4uL25ldC9OZXRNYW5hZ2VyXCI7XHJcbi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0xMS0wNlxyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0xMS0wNlxyXG4gKlxyXG4gKiDnu5HlrprnrqHnkIblmajvvIzlj6/ku6XlsIbmlbDmja7lkozmmL7npLrlr7nosaHnu5HlrprliLDkuIDotbfvvIxNVlZN5Lmm5YaZ55WM6Z2iXHJcbiovXHJcbnZhciBCaW5kTWFuYWdlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEJpbmRNYW5hZ2VyKCkge1xyXG4gICAgICAgIHRoaXMuX2JpbmREaWN0ID0gbmV3IERpY3Rpb25hcnkoKTtcclxuICAgICAgICB0aGlzLl9lbnZNb2RlbCA9IFtdO1xyXG4gICAgICAgIHRoaXMuX3JlZ0V4cCA9IC9eXFxzKihcXHcrKVxccysoKGluKXwob2YpKVxccysoLis/KVxccyokLztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog57uR5a6a5pWw5o2u5YiwVUnkuIpcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0lNZWRpYXRvcn0gbWVkaWF0b3Ig5Lit5LuL6ICFXHJcbiAgICAgKiBAcmV0dXJucyB7QmluZH0g6L+U5Zue57uR5a6a5a6e5L6LXHJcbiAgICAgKiBAbWVtYmVyb2YgQmluZE1hbmFnZXJcclxuICAgICAqL1xyXG4gICAgQmluZE1hbmFnZXIucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAobWVkaWF0b3IpIHtcclxuICAgICAgICB2YXIgYmluZERhdGEgPSB0aGlzLl9iaW5kRGljdC5nZXQobWVkaWF0b3IpO1xyXG4gICAgICAgIGlmICghYmluZERhdGEpIHtcclxuICAgICAgICAgICAgdGhpcy5fYmluZERpY3Quc2V0KG1lZGlhdG9yLCBiaW5kRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIGJpbmQ6IG5ldyBCaW5kKG1lZGlhdG9yKSxcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrczogW11cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOmHjeaWsOe7keWumuaJgOaciVxyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBiaW5kRGF0YS5jYWxsYmFja3M7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IF9hW19pXTtcclxuICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g6L+U5ZueQmluZOWvueixoVxyXG4gICAgICAgIHJldHVybiBiaW5kRGF0YS5iaW5kO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog56e76Zmk57uR5a6aXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtJTWVkaWF0b3J9IG1lZGlhdG9yXHJcbiAgICAgKiBAcmV0dXJucyB7QmluZH1cclxuICAgICAqIEBtZW1iZXJvZiBCaW5kTWFuYWdlclxyXG4gICAgICovXHJcbiAgICBCaW5kTWFuYWdlci5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKG1lZGlhdG9yKSB7XHJcbiAgICAgICAgdmFyIGJpbmREYXRhID0gdGhpcy5fYmluZERpY3QuZ2V0KG1lZGlhdG9yKTtcclxuICAgICAgICBpZiAoYmluZERhdGEpXHJcbiAgICAgICAgICAgIHRoaXMuX2JpbmREaWN0LmRlbGV0ZShtZWRpYXRvcik7XHJcbiAgICAgICAgcmV0dXJuIGJpbmREYXRhICYmIGJpbmREYXRhLmJpbmQ7XHJcbiAgICB9O1xyXG4gICAgQmluZE1hbmFnZXIucHJvdG90eXBlLmFkZEJpbmRIYW5kbGVyID0gZnVuY3Rpb24gKG1lZGlhdG9yLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyDliKTmlq3mlbDmja7mmK/lkKblkIjms5VcclxuICAgICAgICAgICAgaWYgKCFtZWRpYXRvci52aWV3TW9kZWwpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIC8vIOW8gOWni+e7keWumlxyXG4gICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8g5re75Yqg57uR5a6a5pWw5o2uXHJcbiAgICAgICAgdmFyIGJpbmREYXRhID0gdGhpcy5fYmluZERpY3QuZ2V0KG1lZGlhdG9yKTtcclxuICAgICAgICBpZiAoYmluZERhdGEuY2FsbGJhY2tzLmluZGV4T2YoaGFuZGxlcikgPCAwKVxyXG4gICAgICAgICAgICBiaW5kRGF0YS5jYWxsYmFja3MucHVzaChoYW5kbGVyKTtcclxuICAgICAgICAvLyDnq4vljbPosIPnlKjkuIDmrKFcclxuICAgICAgICBoYW5kbGVyKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDnu5HlrprlsZ7mgKflgLxcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0lNZWRpYXRvcn0gbWVkaWF0b3Ig5Lit5LuL6ICFXHJcbiAgICAgKiBAcGFyYW0geyp9IHRhcmdldCDnu5HlrprliLDnmoR0YXJnZXTlrp7kvZPlr7nosaFcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIOe7keWumueahOWxnuaAp+WQjVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cCDnu5HlrprnmoTlsZ7mgKfooajovr7lvI9cclxuICAgICAqIEBtZW1iZXJvZiBCaW5kTWFuYWdlclxyXG4gICAgICovXHJcbiAgICBCaW5kTWFuYWdlci5wcm90b3R5cGUuYmluZFZhbHVlID0gZnVuY3Rpb24gKG1lZGlhdG9yLCB0YXJnZXQsIG5hbWUsIGV4cCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHdhdGNoZXI7XHJcbiAgICAgICAgdmFyIGJpbmREYXRhID0gdGhpcy5fYmluZERpY3QuZ2V0KG1lZGlhdG9yKTtcclxuICAgICAgICB0aGlzLmFkZEJpbmRIYW5kbGVyKG1lZGlhdG9yLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIOWmguaenOS5i+WJjee7keWumui/h++8jOWImeimgeWFiOmUgOavgeS5i1xyXG4gICAgICAgICAgICBpZiAod2F0Y2hlcilcclxuICAgICAgICAgICAgICAgIHdhdGNoZXIuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAvLyDnu5HlrprmlrDnmoTorqLpmIXogIVcclxuICAgICAgICAgICAgd2F0Y2hlciA9IChfYSA9IGJpbmREYXRhLmJpbmQpLmNyZWF0ZVdhdGNoZXIuYXBwbHkoX2EsIFt0YXJnZXQsIGV4cCwgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9LCBtZWRpYXRvci52aWV3TW9kZWxdLmNvbmNhdChfdGhpcy5fZW52TW9kZWwpKTtcclxuICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog57uR5a6a5pa55rOV5omn6KGMXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtJTWVkaWF0b3J9IG1lZGlhdG9yIOS4reS7i+iAhVxyXG4gICAgICogQHBhcmFtIHsqfSB0YXJnZXQg57uR5a6a5Yiw55qEdGFyZ2V05a6e5L2T5a+56LGhXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSDnu5HlrprnmoTmlrnms5XlkI1cclxuICAgICAqIEBwYXJhbSB7Li4uc3RyaW5nW119IGFyZ0V4cHMg5omn6KGM5pa55rOV55qE5Y+C5pWw6KGo6L6+5byP5YiX6KGoXHJcbiAgICAgKiBAbWVtYmVyb2YgQmluZE1hbmFnZXJcclxuICAgICAqL1xyXG4gICAgQmluZE1hbmFnZXIucHJvdG90eXBlLmJpbmRGdW5jID0gZnVuY3Rpb24gKG1lZGlhdG9yLCB0YXJnZXQsIG5hbWUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBhcmdFeHBzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAzOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnRXhwc1tfaSAtIDNdID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHdhdGNoZXJzID0gW107XHJcbiAgICAgICAgdmFyIGJpbmREYXRhID0gdGhpcy5fYmluZERpY3QuZ2V0KG1lZGlhdG9yKTtcclxuICAgICAgICB0aGlzLmFkZEJpbmRIYW5kbGVyKG1lZGlhdG9yLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIOWIpOaWreWPguaVsOaVsOmHj++8jOaXoOWPguaVsOaWueazleS4gOasoeaAp+aJp+ihjOWNs+WPr++8jOaXoOmcgOe7keWumu+8jOacieWPguaVsOeahOaWueazleWImemcgOimgeavj+asoeWPguaVsOaUueWPmOWwseaJp+ihjOS4gOasoVxyXG4gICAgICAgICAgICBpZiAoYXJnRXhwcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDlsIbooajovr7lvI/kuK3miYDmnIl1bmRlZmluZWTlkoxudWxs5Y+Y5Li65YaF6YOo5YC8XHJcbiAgICAgICAgICAgICAgICB2YXIgdW5kZWZpbmVkVmFsdWUgPSBEYXRlLm5vdygpICogTWF0aC5yYW5kb20oKSArIFwiX3VuZGVmaW5lZFwiO1xyXG4gICAgICAgICAgICAgICAgdmFyIG51bGxWYWx1ZSA9IERhdGUubm93KCkgKiBNYXRoLnJhbmRvbSgpICsgXCJfbnVsbFwiO1xyXG4gICAgICAgICAgICAgICAgYXJnRXhwcyA9IGFyZ0V4cHMubWFwKGZ1bmN0aW9uIChleHApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXhwID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIidcIiArIHVuZGVmaW5lZFZhbHVlICsgXCInXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZXhwID09PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCInXCIgKyBudWxsVmFsdWUgKyBcIidcIjtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBleHA7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIC8vIOe7keWumuihqOi+vuW8j+WPguaVsOaVsOe7hFxyXG4gICAgICAgICAgICAgICAgdmFyIGluaXRWYWx1ZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICAgICAgICAgIHZhciBhcmdzSW5pdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDlsIZ2YWx1ZeS4reeahHVuZGVmaW5lZOWSjG51bGzmgaLlpI3lm57ljrtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZFZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSA9PSBudWxsVmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAvLyDorr7nva7lj4LmlbDlgLxcclxuICAgICAgICAgICAgICAgICAgICBhcmdzW2luZGV4XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOWIpOaWreWPguaVsOaYr+WQpum9kOWFqFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYXJnc0luaXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGFyZ3NfMSA9IGFyZ3M7IF9pIDwgYXJnc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFyZyA9IGFyZ3NfMVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDlpoLmnpzliJfooajph4zlrZjlnKjliJ3lp4vlgLzvvIzooajnpLrmsqHmnInotYvlgLzlrozmr5XvvIznm7TmjqXov5Tlm55cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmcgPT09IGluaXRWYWx1ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g6K6+572u5Yid5aeL5YyW5a6M5q+V54q25oCBXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3NJbml0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyDotYvlgLzlt7Lnu4/lrozmr5XkuobvvIzosIPnlKjmlrnms5XvvIx0aGlz5oyH5ZCRdWnmnKzouqtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRbbmFtZV0uYXBwbHkodGFyZ2V0LCBhcmdzKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyDmuIXnkIbml6fnmoTorqLpmIXogIVcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB3YXRjaGVycy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhdGNoZXJzLnNoaWZ0KCkuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8g5b6q546v57uR5a6a6KGo6L6+5byP5YiwaGFuZGxlclxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFyZ0V4cHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDorrDlvZXkuIDkuKrliJ3lp4vlgLzvvIznlKjkuo7liKTmlq3lj4LmlbDliJfooajmmK/lkKblt7LotYvlgLzlrozmr5VcclxuICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goaW5pdFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcmdFeHBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g57uR5a6a6KGo6L6+5byPXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdhdGNoZXIgPSAoX2EgPSBiaW5kRGF0YS5iaW5kKS5jcmVhdGVXYXRjaGVyLmFwcGx5KF9hLCBbdGFyZ2V0LCBhcmdFeHBzW2ldLCBoYW5kbGVyLmJpbmQoX3RoaXMsIGkpLCBtZWRpYXRvci52aWV3TW9kZWxdLmNvbmNhdChfdGhpcy5fZW52TW9kZWwpKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyDorrDlvZXorqLpmIXogIVcclxuICAgICAgICAgICAgICAgICAgICB3YXRjaGVycy5wdXNoKHdhdGNoZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8g5peg5Y+C5pWw5omn6KGM77yM5peg6ZyA57uR5a6a77yM5LiA5qyh5oCn5omn6KGM5Y2z5Y+vXHJcbiAgICAgICAgICAgICAgICB0YXJnZXRbbmFtZV0oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDnu5Hlrprkuovku7ZcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0lNZWRpYXRvcn0gbWVkaWF0b3Ig5Lit5LuL6ICFXHJcbiAgICAgKiBAcGFyYW0geyp9IHVpIOe7keWumuWIsOeahHVp5a6e5L2T5a+56LGhXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSDnu5HlrprnmoTkuovku7bnsbvlnotcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHAg57uR5a6a55qE5LqL5Lu25Zue6LCD6KGo6L6+5byPXHJcbiAgICAgKiBAbWVtYmVyb2YgQmluZE1hbmFnZXJcclxuICAgICAqL1xyXG4gICAgQmluZE1hbmFnZXIucHJvdG90eXBlLmJpbmRPbiA9IGZ1bmN0aW9uIChtZWRpYXRvciwgdGFyZ2V0LCB0eXBlLCBleHApIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBoYW5kbGVyO1xyXG4gICAgICAgIHRoaXMuYWRkQmluZEhhbmRsZXIobWVkaWF0b3IsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGNvbW1vblNjb3BlID0ge1xyXG4gICAgICAgICAgICAgICAgJHRoaXM6IG1lZGlhdG9yLFxyXG4gICAgICAgICAgICAgICAgJGRhdGE6IG1lZGlhdG9yLnZpZXdNb2RlbCxcclxuICAgICAgICAgICAgICAgICRicmlkZ2U6IG1lZGlhdG9yLmJyaWRnZSxcclxuICAgICAgICAgICAgICAgICR0YXJnZXQ6IHRhcmdldFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyDlpoLmnpzkuYvliY3mt7vliqDov4fnm5HlkKzvvIzliJnlhYjnp7vpmaTkuYtcclxuICAgICAgICAgICAgaWYgKCFoYW5kbGVyKVxyXG4gICAgICAgICAgICAgICAgbWVkaWF0b3IuYnJpZGdlLnVubWFwTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBoYW5kbGVyLCBtZWRpYXRvci52aWV3TW9kZWwpO1xyXG4gICAgICAgICAgICAvLyDlhYjlsJ3or5XnlKhleHDlvZPlgZrmlrnms5XlkI3ljrt2aWV3TW9kZWzph4zlr7vmib7vvIzlpoLmnpzmib7kuI3liLDliJnmiopleHDlvZPlgZrkuIDkuKrmiafooYzooajovr7lvI/lpITnkIbvvIzlpJbpnaLljIXkuIDlsYLmlrnms5VcclxuICAgICAgICAgICAgaGFuZGxlciA9IG1lZGlhdG9yLnZpZXdNb2RlbFtleHBdO1xyXG4gICAgICAgICAgICBpZiAoIWhhbmRsZXIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBmdW5jID0gY3JlYXRlUnVuRnVuYyhleHAsIDIgKyBfdGhpcy5fZW52TW9kZWwubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIC8vIOi/memHjOimgei9rOS4gOaJi++8jOiusOWIsOmXreWMhemHjOS4gOS4quWJr+acrO+8jOWQpuWImeWboOS4umJpbmRPbuaYr+W7tui/n+aTjeS9nO+8jOWIsOaXtmVudk1vZGVs5Y+v6IO95bey6KKr5L+u5pS5XHJcbiAgICAgICAgICAgICAgICB2YXIgZW52TW9kZWwgPSBfdGhpcy5fZW52TW9kZWwuY29uY2F0KCk7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmMuY2FsbC5hcHBseShmdW5jLCBbdGhpcywgbWVkaWF0b3Iudmlld01vZGVsXS5jb25jYXQoZW52TW9kZWwsIFtjb21tb25TY29wZV0pKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbWVkaWF0b3IuYnJpZGdlLm1hcExpc3RlbmVyKHRhcmdldCwgdHlwZSwgaGFuZGxlciwgbWVkaWF0b3Iudmlld01vZGVsKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBCaW5kTWFuYWdlci5wcm90b3R5cGUucmVwbGFjZURpc3BsYXkgPSBmdW5jdGlvbiAoYnJpZGdlLCBvcmksIGN1cikge1xyXG4gICAgICAgIHZhciBwYXJlbnQgPSBicmlkZ2UuZ2V0UGFyZW50KG9yaSk7XHJcbiAgICAgICAgaWYgKHBhcmVudCkge1xyXG4gICAgICAgICAgICAvLyBvcmnmnInniLbnuqfvvIzorrDlvZXlhbblvZPliY3ntKLlvJVcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gYnJpZGdlLmdldENoaWxkSW5kZXgocGFyZW50LCBvcmkpO1xyXG4gICAgICAgICAgICAvLyDnp7vpmaRvcmlcclxuICAgICAgICAgICAgYnJpZGdlLnJlbW92ZUNoaWxkKHBhcmVudCwgb3JpKTtcclxuICAgICAgICAgICAgLy8g5pi+56S6Y3VyXHJcbiAgICAgICAgICAgIGJyaWRnZS5hZGRDaGlsZEF0KHBhcmVudCwgY3VyLCBpbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog57uR5a6a5pi+56S6XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtJTWVkaWF0b3J9IG1lZGlhdG9yIOS4reS7i+iAhVxyXG4gICAgICogQHBhcmFtIHsqfSB0YXJnZXQg57uR5a6a5Yiw55qEdGFyZ2V05a6e5L2T5a+56LGhXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwIOe7keWumuihqOi+vuW8j1xyXG4gICAgICogQHBhcmFtIHsodmFsdWU6Ym9vbGVhbik9PnZvaWR9IFtjYWxsYmFja10g5Yik5pat5p2h5Lu25pS55Y+Y5pe25Lya6Kem5Y+R6L+Z5Liq5Zue6LCDXHJcbiAgICAgKiBAbWVtYmVyb2YgQmluZE1hbmFnZXJcclxuICAgICAqL1xyXG4gICAgQmluZE1hbmFnZXIucHJvdG90eXBlLmJpbmRJZiA9IGZ1bmN0aW9uIChtZWRpYXRvciwgdGFyZ2V0LCBleHAsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgd2F0Y2hlcjtcclxuICAgICAgICB2YXIgYmluZERhdGEgPSB0aGlzLl9iaW5kRGljdC5nZXQobWVkaWF0b3IpO1xyXG4gICAgICAgIHZhciByZXBsYWNlciA9IG1lZGlhdG9yLmJyaWRnZS5jcmVhdGVFbXB0eURpc3BsYXkoKTtcclxuICAgICAgICB0aGlzLmFkZEJpbmRIYW5kbGVyKG1lZGlhdG9yLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIOWmguaenOS5i+WJjee7keWumui/h++8jOWImeimgeWFiOmUgOavgeS5i1xyXG4gICAgICAgICAgICBpZiAod2F0Y2hlcilcclxuICAgICAgICAgICAgICAgIHdhdGNoZXIuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAvLyDnu5Hlrprooajovr7lvI9cclxuICAgICAgICAgICAgd2F0Y2hlciA9IChfYSA9IGJpbmREYXRhLmJpbmQpLmNyZWF0ZVdhdGNoZXIuYXBwbHkoX2EsIFt0YXJnZXQsIGV4cCwgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5aaC5p6c6KGo6L6+5byP5Li6dHJ1ZeWImeaYvuekunVp77yM5ZCm5YiZ56e76ZmkdWlcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlcGxhY2VEaXNwbGF5KG1lZGlhdG9yLmJyaWRnZSwgcmVwbGFjZXIsIHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZXBsYWNlRGlzcGxheShtZWRpYXRvci5icmlkZ2UsIHRhcmdldCwgcmVwbGFjZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOinpuWPkeWbnuiwg1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH0sIG1lZGlhdG9yLnZpZXdNb2RlbF0uY29uY2F0KF90aGlzLl9lbnZNb2RlbCkpO1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDnu5Hlrprlvqrnjq9cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0lNZWRpYXRvcn0gbWVkaWF0b3Ig5Lit5LuL6ICFXHJcbiAgICAgKiBAcGFyYW0geyp9IHRhcmdldCDnu5HlrprliLDnmoR0YXJnZXTlrp7kvZPlr7nosaFcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHAg5b6q546v6KGo6L6+5byP77yM5b2i5aaC77yaXCJhIGluIGJcIu+8iOihqOekumHpgY3ljoZi5Lit55qEa2V577yJ5oiWXCJhIG9mIGJcIu+8iOihqOekumHpgY3ljoZi5Lit55qE5YC877yJ44CCYuWPr+S7peaYr+S4quihqOi+vuW8j1xyXG4gICAgICogQHBhcmFtIHsoZGF0YT86YW55LCByZW5kZXJlcj86YW55KT0+dm9pZH0gW2NhbGxiYWNrXSDmr4/mrKHnlJ/miJDmlrDnmoRyZW5kZXJlcuWunuS+i+aXtuiwg+eUqOi/meS4quWbnuiwg1xyXG4gICAgICogQG1lbWJlcm9mIEJpbmRNYW5hZ2VyXHJcbiAgICAgKi9cclxuICAgIEJpbmRNYW5hZ2VyLnByb3RvdHlwZS5iaW5kRm9yID0gZnVuY3Rpb24gKG1lZGlhdG9yLCB0YXJnZXQsIGV4cCwgY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciB3YXRjaGVyO1xyXG4gICAgICAgIHZhciBiaW5kRGF0YSA9IHRoaXMuX2JpbmREaWN0LmdldChtZWRpYXRvcik7XHJcbiAgICAgICAgdmFyIHJlcGxhY2VyID0gbWVkaWF0b3IuYnJpZGdlLmNyZWF0ZUVtcHR5RGlzcGxheSgpO1xyXG4gICAgICAgIHRoaXMuYWRkQmluZEhhbmRsZXIobWVkaWF0b3IsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy8g6Kej5p6Q6KGo6L6+5byPXHJcbiAgICAgICAgICAgIHZhciByZXMgPSBfdGhpcy5fcmVnRXhwLmV4ZWMoZXhwKTtcclxuICAgICAgICAgICAgaWYgKCFyZXMpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIC8vIOWMheijhea4suafk+WZqOWIm+W7uuWbnuiwg1xyXG4gICAgICAgICAgICB2YXIgbWVtZW50byA9IG1lZGlhdG9yLmJyaWRnZS53cmFwQmluZEZvcih0YXJnZXQsIGZ1bmN0aW9uIChrZXksIHZhbHVlLCByZW5kZXJlcikge1xyXG4gICAgICAgICAgICAgICAgLy8g6K6+572u546v5aKD5Y+Y6YePXHJcbiAgICAgICAgICAgICAgICB2YXIgY29tbW9uU2NvcGUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGtleToga2V5LFxyXG4gICAgICAgICAgICAgICAgICAgICR2YWx1ZTogdmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgJHRhcmdldDogcmVuZGVyZXJcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyDloavlhaXnlKjmiLflo7DmmI7nmoTlsZ7mgKdcclxuICAgICAgICAgICAgICAgIGNvbW1vblNjb3BlW3Jlc1sxXV0gPSAocmVzWzJdID09IFwiaW5cIiA/IGtleSA6IHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIC8vIOaPkuWFpeeOr+Wig+WPmOmHj1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX2Vudk1vZGVsLnB1c2goY29tbW9uU2NvcGUpO1xyXG4gICAgICAgICAgICAgICAgLy8g6Kem5Y+R5Zue6LCDXHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayh2YWx1ZSwgcmVuZGVyZXIpO1xyXG4gICAgICAgICAgICAgICAgLy8g56e76Zmk546v5aKD5Y+Y6YePXHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fZW52TW9kZWwuc3BsaWNlKF90aGlzLl9lbnZNb2RlbC5pbmRleE9mKGNvbW1vblNjb3BlKSwgMSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyDlpoLmnpzkuYvliY3nu5Hlrprov4fvvIzliJnopoHlhYjplIDmr4HkuYtcclxuICAgICAgICAgICAgaWYgKHdhdGNoZXIpXHJcbiAgICAgICAgICAgICAgICB3YXRjaGVyLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgLy8g6I635b6X6KaB6YGN5Y6G55qE5pWw5o2u6ZuG5ZCIXHJcbiAgICAgICAgICAgIHdhdGNoZXIgPSAoX2EgPSBiaW5kRGF0YS5iaW5kKS5jcmVhdGVXYXRjaGVyLmFwcGx5KF9hLCBbdGFyZ2V0LCByZXNbNV0sIGZ1bmN0aW9uIChkYXRhcykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOWmguaenOmBjeWOhueahOWvueixoeaYr+S4quaVsOWtl++8jOWImeS8qumAoOS4gOS4quS4tOaXtuaVsOe7hOS+m+S9v+eUqFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YXMgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBBcnIgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhczsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wQXJyLnB1c2goaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXMgPSB0ZW1wQXJyO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyDotYvlgLxcclxuICAgICAgICAgICAgICAgICAgICBtZWRpYXRvci5icmlkZ2UudmFsdWF0ZUJpbmRGb3IodGFyZ2V0LCBkYXRhcywgbWVtZW50byk7XHJcbiAgICAgICAgICAgICAgICB9LCBtZWRpYXRvci52aWV3TW9kZWxdLmNvbmNhdChfdGhpcy5fZW52TW9kZWwpKTtcclxuICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog57uR5a6aTWVzc2FnZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7SU1lZGlhdG9yfSBtZWRpYXRvciDkuK3ku4vogIVcclxuICAgICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IOe7keWumuWIsOeahHRhcmdldOWunuS9k+WvueixoVxyXG4gICAgICogQHBhcmFtIHtJQ29uc3RydWN0b3J8c3RyaW5nfSB0eXBlIOe7keWumueahOa2iOaBr+exu+Wei+Wtl+espuS4slxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUg57uR5a6a55qE5bGe5oCn5ZCNXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwIOe7keWumueahOihqOi+vuW8j1xyXG4gICAgICogQHBhcmFtIHtJT2JzZXJ2YWJsZX0gW29ic2VydmFibGVdIOe7keWumueahOa2iOaBr+WGheaguO+8jOm7mOiupOaYr2NvcmVcclxuICAgICAqIEBtZW1iZXJvZiBCaW5kTWFuYWdlclxyXG4gICAgICovXHJcbiAgICBCaW5kTWFuYWdlci5wcm90b3R5cGUuYmluZE1lc3NhZ2UgPSBmdW5jdGlvbiAobWVkaWF0b3IsIHRhcmdldCwgdHlwZSwgbmFtZSwgZXhwLCBvYnNlcnZhYmxlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAoIW9ic2VydmFibGUpXHJcbiAgICAgICAgICAgIG9ic2VydmFibGUgPSBjb3JlLm9ic2VydmFibGU7XHJcbiAgICAgICAgdmFyIGJpbmREYXRhID0gdGhpcy5fYmluZERpY3QuZ2V0KG1lZGlhdG9yKTtcclxuICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobWVkaWF0b3IuZGlzcG9zZWQpIHtcclxuICAgICAgICAgICAgICAgIC8vIG1lZGlhdG9y5bey6ZSA5q+B77yM5Y+W5raI55uR5ZCsXHJcbiAgICAgICAgICAgICAgICBvYnNlcnZhYmxlLnVubGlzdGVuKHR5cGUsIGhhbmRsZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1zZztcclxuICAgICAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PSAxICYmIHR5cGVvZiBhcmdzWzBdID09IFwib2JqZWN0XCIgJiYgYXJnc1swXS50eXBlKVxyXG4gICAgICAgICAgICAgICAgICAgIG1zZyA9IGFyZ3NbMF07XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgbXNnID0geyAkYXJndW1lbnRzOiBhcmdzIH07XHJcbiAgICAgICAgICAgICAgICAvLyDorr7nva7pgJrnlKjlsZ7mgKdcclxuICAgICAgICAgICAgICAgIHZhciBjb21tb25TY29wZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAkdGhpczogbWVkaWF0b3IsXHJcbiAgICAgICAgICAgICAgICAgICAgJGRhdGE6IG1lZGlhdG9yLnZpZXdNb2RlbCxcclxuICAgICAgICAgICAgICAgICAgICAkYnJpZGdlOiBtZWRpYXRvci5icmlkZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgJHRhcmdldDogdGFyZ2V0XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdID0gZXZhbEV4cC5hcHBseSh2b2lkIDAsIFtleHAsIG1lZGlhdG9yLnZpZXdNb2RlbCwgbXNnLCBtZWRpYXRvci52aWV3TW9kZWxdLmNvbmNhdChfdGhpcy5fZW52TW9kZWwsIFtjb21tb25TY29wZV0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8g5re75Yqg55uR5ZCsXHJcbiAgICAgICAgb2JzZXJ2YWJsZS5saXN0ZW4odHlwZSwgaGFuZGxlcik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDnu5HlrppSZXNwb25zZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7SU1lZGlhdG9yfSBtZWRpYXRvciDkuK3ku4vogIVcclxuICAgICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IOe7keWumuWIsOeahHRhcmdldOWunuS9k+WvueixoVxyXG4gICAgICogQHBhcmFtIHtJUmVzcG9uc2VEYXRhQ29uc3RydWN0b3J8c3RyaW5nfSB0eXBlIOe7keWumueahOmAmuiur+a2iOaBr+exu+Wei1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUg57uR5a6a55qE5bGe5oCn5ZCNXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwIOe7keWumueahOihqOi+vuW8j1xyXG4gICAgICogQHBhcmFtIHtJT2JzZXJ2YWJsZX0gW29ic2VydmFibGVdIOe7keWumueahOa2iOaBr+WGheaguO+8jOm7mOiupOaYr2NvcmVcclxuICAgICAqIEBtZW1iZXJvZiBCaW5kTWFuYWdlclxyXG4gICAgICovXHJcbiAgICBCaW5kTWFuYWdlci5wcm90b3R5cGUuYmluZFJlc3BvbnNlID0gZnVuY3Rpb24gKG1lZGlhdG9yLCB0YXJnZXQsIHR5cGUsIG5hbWUsIGV4cCwgb2JzZXJ2YWJsZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKCFvYnNlcnZhYmxlKVxyXG4gICAgICAgICAgICBvYnNlcnZhYmxlID0gY29yZS5vYnNlcnZhYmxlO1xyXG4gICAgICAgIHZhciBiaW5kRGF0YSA9IHRoaXMuX2JpbmREaWN0LmdldChtZWRpYXRvcik7XHJcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgaWYgKG1lZGlhdG9yLmRpc3Bvc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBtZWRpYXRvcuW3sumUgOavge+8jOWPlua2iOebkeWQrFxyXG4gICAgICAgICAgICAgICAgbmV0TWFuYWdlci51bmxpc3RlblJlc3BvbnNlKHR5cGUsIGhhbmRsZXIsIG51bGwsIG51bGwsIG9ic2VydmFibGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8g6K6+572u6YCa55So5bGe5oCnXHJcbiAgICAgICAgICAgICAgICB2YXIgY29tbW9uU2NvcGUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHRoaXM6IG1lZGlhdG9yLFxyXG4gICAgICAgICAgICAgICAgICAgICRkYXRhOiBtZWRpYXRvci52aWV3TW9kZWwsXHJcbiAgICAgICAgICAgICAgICAgICAgJGJyaWRnZTogbWVkaWF0b3IuYnJpZGdlLFxyXG4gICAgICAgICAgICAgICAgICAgICR0YXJnZXQ6IHRhcmdldFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHRhcmdldFtuYW1lXSA9IGV2YWxFeHAuYXBwbHkodm9pZCAwLCBbZXhwLCBtZWRpYXRvci52aWV3TW9kZWwsIHJlc3BvbnNlLCBtZWRpYXRvci52aWV3TW9kZWxdLmNvbmNhdChfdGhpcy5fZW52TW9kZWwsIFtjb21tb25TY29wZV0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8g5re75Yqg55uR5ZCsXHJcbiAgICAgICAgbmV0TWFuYWdlci5saXN0ZW5SZXNwb25zZSh0eXBlLCBoYW5kbGVyLCBudWxsLCBudWxsLCBvYnNlcnZhYmxlKTtcclxuICAgICAgICAvLyDlpoLmnpxtZWRpYXRvcuaJgOS+nei1lueahOaooeWdl+acieWIneWni+WMlua2iOaBr++8jOWImeimgemineWkluinpuWPkeWIneWni+WMlua2iOaBr+eahOe7keWumlxyXG4gICAgICAgIGlmIChtZWRpYXRvcltcImRlcGVuZE1vZHVsZUluc3RhbmNlXCJdKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBtZWRpYXRvcltcImRlcGVuZE1vZHVsZUluc3RhbmNlXCJdLnJlc3BvbnNlczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXNwb25zZSA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXIocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEJpbmRNYW5hZ2VyID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgSW5qZWN0YWJsZVxyXG4gICAgXSwgQmluZE1hbmFnZXIpO1xyXG4gICAgcmV0dXJuIEJpbmRNYW5hZ2VyO1xyXG59KCkpO1xyXG5leHBvcnQgZGVmYXVsdCBCaW5kTWFuYWdlcjtcclxuLyoqIOWGjemineWkluWvvOWHuuS4gOS4quWNleS+iyAqL1xyXG5leHBvcnQgdmFyIGJpbmRNYW5hZ2VyID0gY29yZS5nZXRJbmplY3QoQmluZE1hbmFnZXIpO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9lbmdpbmUvYmluZC9CaW5kTWFuYWdlci5qc1xuLy8gbW9kdWxlIGlkID0gMjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIFJlcXVlc3REYXRhID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmVxdWVzdERhdGEoKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog55So5oi35Y+C5pWw77yM5Y+v5Lul5L+d5a2Y5Lu75oSP5Y+C5pWw5YiwTWVzc2FnZeS4re+8jOivpeWPguaVsOS4reeahOaVsOaNruS4jeS8muiiq+WPkemAgVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHR5cGUgeyp9XHJcbiAgICAgICAgICogQG1lbWJlcm9mIFJlcXVlc3REYXRhXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fX3VzZXJEYXRhID0ge307XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xyXG4gICAgICAgICAgICBfX3VzZXJEYXRhOiB7XHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuX191c2VyRGF0YVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVxdWVzdERhdGEucHJvdG90eXBlLCBcInR5cGVcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPluivt+axgua2iOaBr+exu+Wei+Wtl+espuS4slxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJlYWRvbmx5XHJcbiAgICAgICAgICogQHR5cGUge3N0cmluZ31cclxuICAgICAgICAgKiBAbWVtYmVyb2YgUmVxdWVzdERhdGFcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19wYXJhbXMudHlwZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBSZXF1ZXN0RGF0YTtcclxufSgpKTtcclxuZXhwb3J0IGRlZmF1bHQgUmVxdWVzdERhdGE7XHJcbi8qKiDlr7zlh7rlhazlhbHmtojmga/lj4LmlbDlr7nosaEgKi9cclxuZXhwb3J0IHZhciBjb21tb25EYXRhID0ge307XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2VuZ2luZS9uZXQvUmVxdWVzdERhdGEuanNcbi8vIG1vZHVsZSBpZCA9IDI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0wOS0wNlxyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0wOS0wNlxyXG4gKlxyXG4gKiDooajnjrDlsYLmtojmga9cclxuKi9cclxudmFyIEJyaWRnZU1lc3NhZ2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBCcmlkZ2VNZXNzYWdlKCkge1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDliJ3lp4vljJbooajnjrDlsYLlrp7kvovliY3nmoTmtojmga9cclxuICAgICAqXHJcbiAgICAgKiBAc3RhdGljXHJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAgICogQG1lbWJlcm9mIFZpZXdNZXNzYWdlXHJcbiAgICAgKi9cclxuICAgIEJyaWRnZU1lc3NhZ2UuQlJJREdFX0JFRk9SRV9JTklUID0gXCJicmlkZ2VCZWZvcmVJbml0XCI7XHJcbiAgICAvKipcclxuICAgICAqIOWIneWni+WMluihqOeOsOWxguWunuS+i+WQjueahOa2iOaBr1xyXG4gICAgICpcclxuICAgICAqIEBzdGF0aWNcclxuICAgICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICAgKiBAbWVtYmVyb2YgVmlld01lc3NhZ2VcclxuICAgICAqL1xyXG4gICAgQnJpZGdlTWVzc2FnZS5CUklER0VfQUZURVJfSU5JVCA9IFwiYnJpZGdlQWZ0ZXJJbml0XCI7XHJcbiAgICAvKipcclxuICAgICAqIOaJgOacieihqOeOsOWxguWunuS+i+mDveWIneWni+WMluWujOavleeahOa2iOaBr1xyXG4gICAgICpcclxuICAgICAqIEBzdGF0aWNcclxuICAgICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICAgKiBAbWVtYmVyb2YgVmlld01lc3NhZ2VcclxuICAgICAqL1xyXG4gICAgQnJpZGdlTWVzc2FnZS5CUklER0VfQUxMX0lOSVQgPSBcImJyaWRnZUFsbEluaXRcIjtcclxuICAgIHJldHVybiBCcmlkZ2VNZXNzYWdlO1xyXG59KCkpO1xyXG5leHBvcnQgZGVmYXVsdCBCcmlkZ2VNZXNzYWdlO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9lbmdpbmUvYnJpZGdlL0JyaWRnZU1lc3NhZ2UuanNcbi8vIG1vZHVsZSBpZCA9IDI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn07XHJcbmltcG9ydCB7IGNvcmUgfSBmcm9tIFwiLi4vLi4vY29yZS9Db3JlXCI7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiLi4vLi4vY29yZS9pbmplY3Rvci9JbmplY3RvclwiO1xyXG5pbXBvcnQgbm9uZSBmcm9tIFwiLi9Ob25lUGFuZWxQb2xpY3lcIjtcclxuaW1wb3J0IFBhbmVsTWVzc2FnZSBmcm9tIFwiLi9QYW5lbE1lc3NhZ2VcIjtcclxuaW1wb3J0IHsgQnV0dG9uVHlwZSB9IGZyb20gXCIuL0lQcm9tcHRQYW5lbFwiO1xyXG5pbXBvcnQgeyBicmlkZ2VNYW5hZ2VyIH0gZnJvbSBcIi4uL2JyaWRnZS9CcmlkZ2VNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IG1hc2tNYW5hZ2VyIH0gZnJvbSBcIi4uL21hc2svTWFza01hbmFnZXJcIjtcclxuaW1wb3J0IERpY3Rpb25hcnkgZnJvbSBcIi4uLy4uL3V0aWxzL0RpY3Rpb25hcnlcIjtcclxuLyoqXHJcbiAqIEBhdXRob3IgUmF5a2lkXHJcbiAqIEBlbWFpbCBpbml0aWFsX3JAcXEuY29tXHJcbiAqIEBjcmVhdGUgZGF0ZSAyMDE3LTA5LTA2XHJcbiAqIEBtb2RpZnkgZGF0ZSAyMDE3LTA5LTA2XHJcbiAqXHJcbiAqIOW8ueeql+euoeeQhuWZqO+8jOWMheWQq+W8ueWHuuW8ueeql+OAgeWFs+mXreW8ueeql+OAgeW8ueeql+euoeeQhuetieWKn+iDvVxyXG4qL1xyXG52YXIgUGFuZWxNYW5hZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUGFuZWxNYW5hZ2VyKCkge1xyXG4gICAgICAgIHRoaXMuX3BhbmVscyA9IFtdO1xyXG4gICAgICAgIHRoaXMuX3ByaW9yaXRpZXMgPSBuZXcgRGljdGlvbmFyeSgpO1xyXG4gICAgICAgIHRoaXMuX21vZGFsRGljdCA9IG5ldyBEaWN0aW9uYXJ5KCk7XHJcbiAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKiDkuIvpnaLmmK/pgJrnlKjlvLnnqpfnmoTpgLvovpEgKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gICAgICAgIHRoaXMuX3Byb21wdERpY3QgPSB7fTtcclxuICAgIH1cclxuICAgIFBhbmVsTWFuYWdlcl8xID0gUGFuZWxNYW5hZ2VyO1xyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5blvZPliY3mmL7npLrnmoTlvLnnqpfmlbDnu4TvvIjlia/mnKzvvIlcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0lDb25zdHJ1Y3Rvcn0gW2Nsc10g5by556qX57G75Z6L77yM5aaC5p6c5Lyg6YCS6K+l5Y+C5pWw5YiZ5Y+q6L+U5Zue6K+l57G75Z6L55qE5bey5omT5byA5by556qX77yM5ZCm5YiZ5bCG6L+U5Zue5omA5pyJ5bey5omT5byA55qE5by556qXXHJcbiAgICAgKiBAcmV0dXJucyB7SVBhbmVsW119IOW3suaJk+W8gOW8ueeql+aVsOe7hFxyXG4gICAgICogQG1lbWJlcm9mIFBhbmVsTWFuYWdlclxyXG4gICAgICovXHJcbiAgICBQYW5lbE1hbmFnZXIucHJvdG90eXBlLmdldE9wZW5lZCA9IGZ1bmN0aW9uIChjbHMpIHtcclxuICAgICAgICBpZiAoIWNscylcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhbmVscy5jb25jYXQoKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYW5lbHMuZmlsdGVyKGZ1bmN0aW9uIChwYW5lbCkgeyByZXR1cm4gcGFuZWwuY29uc3RydWN0b3IgPT0gY2xzOyB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluW8ueeql+aYr+WQpuW3suW8gOWQr1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7SVBhbmVsfSBwYW5lbCDlvLnnqpflr7nosaFcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSDmmK/lkKblt7Lnu4/lvIDlkK9cclxuICAgICAqIEBtZW1iZXJvZiBQYW5lbE1hbmFnZXJcclxuICAgICAqL1xyXG4gICAgUGFuZWxNYW5hZ2VyLnByb3RvdHlwZS5pc09wZW5lZCA9IGZ1bmN0aW9uIChwYW5lbCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5fcGFuZWxzLmluZGV4T2YocGFuZWwpID49IDApO1xyXG4gICAgfTtcclxuICAgIFBhbmVsTWFuYWdlci5wcm90b3R5cGUudXBkYXRlTW9kYWxNYXNrID0gZnVuY3Rpb24gKHBhbmVsKSB7XHJcbiAgICAgICAgLy8g6aaW5YWI5bCG5Lyg5YWl55qEcGFuZWznmoTmqKHmgIHpga7nvanljrvpmaRcclxuICAgICAgICBtYXNrTWFuYWdlci5oaWRlTW9kYWxNYXNrKHBhbmVsKTtcclxuICAgICAgICAvLyDnhLblkI7kuLrmnIDkuIrlsYLnmoTmqKHmgIHlvLnnqpfmt7vliqDpga7nvalcclxuICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5fcGFuZWxzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgIHBhbmVsID0gdGhpcy5fcGFuZWxzW2ldO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fbW9kYWxEaWN0LmdldChwYW5lbCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIOWmguaenOW3sue7j+aciemBrue9qeS6hu+8jOWFiOenu+mZpOS5i1xyXG4gICAgICAgICAgICAgICAgaWYgKG1hc2tNYW5hZ2VyLmlzU2hvd2luZ01vZGFsTWFzayhwYW5lbCkpXHJcbiAgICAgICAgICAgICAgICAgICAgbWFza01hbmFnZXIuaGlkZU1vZGFsTWFzayhwYW5lbCk7XHJcbiAgICAgICAgICAgICAgICAvLyDmt7vliqDpga7nvalcclxuICAgICAgICAgICAgICAgIG1hc2tNYW5hZ2VyLnNob3dNb2RhbE1hc2socGFuZWwpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDmiZPlvIDkuIDkuKrlvLnnqpdcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0lQYW5lbH0gcGFuZWwg6KaB5omT5byA55qE5by556qXXHJcbiAgICAgKiBAcGFyYW0geyp9IFtkYXRhXSDmlbDmja5cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzTW9kYWw9dHJ1ZV0g5piv5ZCm5qih5oCB5by55Ye6XHJcbiAgICAgKiBAcGFyYW0ge3t4Om51bWJlciwgeTpudW1iZXJ9fSBbZnJvbV0g5by55Ye66LW354K55L2N572uXHJcbiAgICAgKiBAcmV0dXJucyB7SVBhbmVsfSDov5Tlm57lvLnnqpflr7nosaFcclxuICAgICAqIEBtZW1iZXJvZiBQYW5lbE1hbmFnZXJcclxuICAgICAqL1xyXG4gICAgUGFuZWxNYW5hZ2VyLnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbiAocGFuZWwsIGRhdGEsIGlzTW9kYWwsIGZyb20pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmIChpc01vZGFsID09PSB2b2lkIDApIHsgaXNNb2RhbCA9IHRydWU7IH1cclxuICAgICAgICBpZiAodGhpcy5fcGFuZWxzLmluZGV4T2YocGFuZWwpIDwgMCkge1xyXG4gICAgICAgICAgICAvLyDmlbDmja7lhYjooYxcclxuICAgICAgICAgICAgdGhpcy5fcGFuZWxzLnB1c2gocGFuZWwpO1xyXG4gICAgICAgICAgICAvLyDlvLnnqpfmiYDlnKjnmoTooajnjrDlsYLlv4XpobvopoHmmL7npLpcclxuICAgICAgICAgICAgcGFuZWwuYnJpZGdlLmh0bWxXcmFwcGVyLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xyXG4gICAgICAgICAgICAvLyDosIPnlKjmjqXlj6NcclxuICAgICAgICAgICAgcGFuZWwuX19vcGVuKGRhdGEsIGlzTW9kYWwsIGZyb20pO1xyXG4gICAgICAgICAgICAvLyDojrflj5bnrZbnlaVcclxuICAgICAgICAgICAgdmFyIHBvbGljeSA9IHBhbmVsLnBvbGljeSB8fCBwYW5lbC5icmlkZ2UuZGVmYXVsdFBhbmVsUG9saWN5IHx8IG5vbmU7XHJcbiAgICAgICAgICAgIC8vIOiwg+eUqOWbnuiwg1xyXG4gICAgICAgICAgICBwYW5lbC5vbkJlZm9yZVBvcChkYXRhLCBpc01vZGFsLCBmcm9tKTtcclxuICAgICAgICAgICAgLy8g5rS+5Y+R5raI5oGvXHJcbiAgICAgICAgICAgIGNvcmUuZGlzcGF0Y2goUGFuZWxNZXNzYWdlLlBBTkVMX0JFRk9SRV9QT1AsIHBhbmVsLCBpc01vZGFsLCBmcm9tKTtcclxuICAgICAgICAgICAgLy8g6LCD55So5YeG5aSH5o6l5Y+jXHJcbiAgICAgICAgICAgIHBvbGljeS5wcmVwYXJlICYmIHBvbGljeS5wcmVwYXJlKHBhbmVsKTtcclxuICAgICAgICAgICAgLy8g5re75Yqg5pi+56S6XHJcbiAgICAgICAgICAgIHZhciBicmlkZ2UgPSBwYW5lbC5icmlkZ2U7XHJcbiAgICAgICAgICAgIGJyaWRnZS5hZGRDaGlsZChicmlkZ2UucGFuZWxMYXllciwgcGFuZWwuc2tpbik7XHJcbiAgICAgICAgICAgIC8vIOagueaNruS8mOWFiOe6p+i/m+ihjOaOkuW6j1xyXG4gICAgICAgICAgICB0aGlzLl9wYW5lbHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHByaUEgPSBfdGhpcy5fcHJpb3JpdGllcy5nZXQoYSkgfHwgMDtcclxuICAgICAgICAgICAgICAgIHZhciBwcmlCID0gX3RoaXMuX3ByaW9yaXRpZXMuZ2V0KGIpIHx8IDA7XHJcbiAgICAgICAgICAgICAgICAvLyDlpoLmnpxh5LyY5YWI57qn5aSn5LqOYuS8mOWFiOe6p++8jOWImeihqOekumHlkoxi6ZyA6KaB6L+b6KGM5Y+N5ZCR77yM5bCG5LuW5Lus55qE5pi+56S65bGC57qn5a+56LCDXHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gcHJpQSAtIHByaUI7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBza2luQSA9IGEuc2tpbjtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2tpbkIgPSBiLnNraW47XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4QSA9IGJyaWRnZS5nZXRDaGlsZEluZGV4KGJyaWRnZS5wYW5lbExheWVyLCBza2luQSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4QiA9IGJyaWRnZS5nZXRDaGlsZEluZGV4KGJyaWRnZS5wYW5lbExheWVyLCBza2luQik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJpZGdlLnJlbW92ZUNoaWxkKGJyaWRnZS5wYW5lbExheWVyLCBza2luQSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJpZGdlLnJlbW92ZUNoaWxkKGJyaWRnZS5wYW5lbExheWVyLCBza2luQik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJpZGdlLmFkZENoaWxkQXQoYnJpZGdlLnBhbmVsTGF5ZXIsIHNraW5CLCBpbmRleEEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyaWRnZS5hZGRDaGlsZEF0KGJyaWRnZS5wYW5lbExheWVyLCBza2luQSwgaW5kZXhCKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIOi/lOWbnuaVsOaNru+8jOiuqeaVsOe7hOS5n+mHjeaWsOaOkuW6j1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIOiwg+eUqOetlueVpeaOpeWPo1xyXG4gICAgICAgICAgICBwb2xpY3kucG9wKHBhbmVsLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDosIPnlKjlm57osINcclxuICAgICAgICAgICAgICAgIHBhbmVsLm9uQWZ0ZXJQb3AoZGF0YSwgaXNNb2RhbCwgZnJvbSk7XHJcbiAgICAgICAgICAgICAgICAvLyDmtL7lj5Hmtojmga9cclxuICAgICAgICAgICAgICAgIGNvcmUuZGlzcGF0Y2goUGFuZWxNZXNzYWdlLlBBTkVMX0FGVEVSX1BPUCwgcGFuZWwsIGlzTW9kYWwsIGZyb20pO1xyXG4gICAgICAgICAgICB9LCBmcm9tKTtcclxuICAgICAgICAgICAgLy8g6K6w5b2V5qih5oCB5pWw5o2uXHJcbiAgICAgICAgICAgIHRoaXMuX21vZGFsRGljdC5zZXQocGFuZWwsIGlzTW9kYWwpO1xyXG4gICAgICAgICAgICAvLyDmm7TmlrDmqKHmgIHpga7nvalcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVNb2RhbE1hc2socGFuZWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGFuZWw7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDlhbPpl63kuIDkuKrlvLnnqpdcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0lQYW5lbH0gcGFuZWwg6KaB5YWz6Zet55qE5by556qXXHJcbiAgICAgKiBAcGFyYW0geyp9IFtkYXRhXSDmlbDmja5cclxuICAgICAqIEBwYXJhbSB7e3g6bnVtYmVyLCB5Om51bWJlcn19IFt0b10g5YWz6Zet57uI54K55L2N572uXHJcbiAgICAgKiBAcmV0dXJucyB7SVBhbmVsfSDov5Tlm57lvLnnqpflr7nosaFcclxuICAgICAqIEBtZW1iZXJvZiBQYW5lbE1hbmFnZXJcclxuICAgICAqL1xyXG4gICAgUGFuZWxNYW5hZ2VyLnByb3RvdHlwZS5kcm9wID0gZnVuY3Rpb24gKHBhbmVsLCBkYXRhLCB0bykge1xyXG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuX3BhbmVscy5pbmRleE9mKHBhbmVsKTtcclxuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAvLyDmlbDmja7lhYjooYxcclxuICAgICAgICAgICAgdGhpcy5fcGFuZWxzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIC8vIOiOt+WPluetlueVpVxyXG4gICAgICAgICAgICB2YXIgcG9saWN5ID0gcGFuZWwucG9saWN5IHx8IHBhbmVsLmJyaWRnZS5kZWZhdWx0UGFuZWxQb2xpY3kgfHwgbm9uZTtcclxuICAgICAgICAgICAgLy8g6LCD55So5Zue6LCDXHJcbiAgICAgICAgICAgIHBhbmVsLm9uQmVmb3JlRHJvcChkYXRhLCB0byk7XHJcbiAgICAgICAgICAgIC8vIOa0vuWPkea2iOaBr1xyXG4gICAgICAgICAgICBjb3JlLmRpc3BhdGNoKFBhbmVsTWVzc2FnZS5QQU5FTF9CRUZPUkVfRFJPUCwgcGFuZWwsIHRvKTtcclxuICAgICAgICAgICAgLy8g6LCD55So562W55Wl5o6l5Y+jXHJcbiAgICAgICAgICAgIHBvbGljeS5kcm9wKHBhbmVsLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDosIPnlKjlm57osINcclxuICAgICAgICAgICAgICAgIHBhbmVsLm9uQWZ0ZXJEcm9wKGRhdGEsIHRvKTtcclxuICAgICAgICAgICAgICAgIC8vIOa0vuWPkea2iOaBr1xyXG4gICAgICAgICAgICAgICAgY29yZS5kaXNwYXRjaChQYW5lbE1lc3NhZ2UuUEFORUxfQUZURVJfRFJPUCwgcGFuZWwsIHRvKTtcclxuICAgICAgICAgICAgICAgIC8vIOenu+mZpOaYvuekulxyXG4gICAgICAgICAgICAgICAgdmFyIGJyaWRnZSA9IHBhbmVsLmJyaWRnZTtcclxuICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBicmlkZ2UuZ2V0UGFyZW50KHBhbmVsLnNraW4pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudClcclxuICAgICAgICAgICAgICAgICAgICBicmlkZ2UucmVtb3ZlQ2hpbGQocGFyZW50LCBwYW5lbC5za2luKTtcclxuICAgICAgICAgICAgICAgIC8vIOiwg+eUqOaOpeWPo1xyXG4gICAgICAgICAgICAgICAgcGFuZWwuX19jbG9zZShkYXRhLCB0byk7XHJcbiAgICAgICAgICAgIH0sIHRvKTtcclxuICAgICAgICAgICAgLy8g56e76Zmk5LyY5YWI57qn5pWw5o2uXHJcbiAgICAgICAgICAgIHRoaXMuX3ByaW9yaXRpZXMuZGVsZXRlKHBhbmVsKTtcclxuICAgICAgICAgICAgLy8g56e76Zmk5qih5oCB5pWw5o2uXHJcbiAgICAgICAgICAgIHRoaXMuX21vZGFsRGljdC5kZWxldGUocGFuZWwpO1xyXG4gICAgICAgICAgICAvLyDmm7TmlrDmqKHmgIHpga7nvalcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVNb2RhbE1hc2socGFuZWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGFuZWw7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDms6jlhozpgJrnlKjlvLnnqpdcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSDpgJrnlKjlvLnnqpfopoHms6jlhozliLDnmoTooajnjrDlsYLnsbvlnotcclxuICAgICAqIEBwYXJhbSB7SVByb21wdFBhbmVsQ29uc3RydWN0b3J9IHByb21wdCDpgJrnlKjlvLnnqpfnsbvlnotcclxuICAgICAqIEBtZW1iZXJvZiBQYW5lbE1hbmFnZXJcclxuICAgICAqL1xyXG4gICAgUGFuZWxNYW5hZ2VyLnByb3RvdHlwZS5yZWdpc3RlclByb21wdCA9IGZ1bmN0aW9uICh0eXBlLCBwcm9tcHQpIHtcclxuICAgICAgICB0aGlzLl9wcm9tcHREaWN0W3R5cGVdID0gcHJvbXB0O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5Y+W5raI5rOo5YaM6YCa55So5by556qXXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUg6KaB5Y+W5raI5rOo5YaM6YCa55So5by556qX55qE6KGo546w5bGC57G75Z6LXHJcbiAgICAgKiBAbWVtYmVyb2YgUGFuZWxNYW5hZ2VyXHJcbiAgICAgKi9cclxuICAgIFBhbmVsTWFuYWdlci5wcm90b3R5cGUudW5yZWdpc3RlclByb21wdCA9IGZ1bmN0aW9uICh0eXBlKSB7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuX3Byb21wdERpY3RbdHlwZV07XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBQYW5lbE1hbmFnZXIucHJvdG90eXBlLnByb21wdCA9IGZ1bmN0aW9uIChtc2dPclBhcmFtcykge1xyXG4gICAgICAgIHZhciBoYW5kbGVycyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGhhbmRsZXJzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcGFyYW1zO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbXNnT3JQYXJhbXMgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBwYXJhbXMgPSB7XHJcbiAgICAgICAgICAgICAgICBtc2c6IG1zZ09yUGFyYW1zLFxyXG4gICAgICAgICAgICAgICAgaGFuZGxlcnM6IGhhbmRsZXJzXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwYXJhbXMgPSBtc2dPclBhcmFtcztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g5Y+W5Yiw5b2T5YmN5Zy65pmv55qE57G75Z6LXHJcbiAgICAgICAgdmFyIGN1ckJyaWRnZSA9IGJyaWRnZU1hbmFnZXIuY3VycmVudEJyaWRnZTtcclxuICAgICAgICB2YXIgdHlwZSA9IGN1ckJyaWRnZSAmJiBjdXJCcmlkZ2UudHlwZTtcclxuICAgICAgICAvLyDnlKjlnLrmma/nsbvlnovlj5bliLDlvLnnqpflr7nosaFcclxuICAgICAgICB2YXIgcHJvbXB0Q2xzID0gdGhpcy5fcHJvbXB0RGljdFt0eXBlXTtcclxuICAgICAgICBpZiAocHJvbXB0Q2xzID09IG51bGwpIHtcclxuICAgICAgICAgICAgLy8g5rKh5pyJ5om+5Yiw5b2T5YmN5qih5Z2X57G75Z6L5YWz6IGU55qE6YCa55So5by556qX57G75Z6L77yM5pS555So57O757uf5by556qX5YeR5ZCI5LiA5LiLXHJcbiAgICAgICAgICAgIGFsZXJ0KHBhcmFtcy5tc2cpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOWinuWKoOm7mOiupOWAvFxyXG4gICAgICAgIGZvciAodmFyIGkgaW4gcGFyYW1zLmhhbmRsZXJzKSB7XHJcbiAgICAgICAgICAgIHZhciBoYW5kbGVyID0gcGFyYW1zLmhhbmRsZXJzW2ldO1xyXG4gICAgICAgICAgICBpZiAoaGFuZGxlci50ZXh0ID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyLnRleHQgPSBoYW5kbGVyLmRhdGE7XHJcbiAgICAgICAgICAgIGlmIChoYW5kbGVyLmJ1dHRvblR5cGUgPT0gbnVsbClcclxuICAgICAgICAgICAgICAgIGhhbmRsZXIuYnV0dG9uVHlwZSA9IEJ1dHRvblR5cGUubm9ybWFsO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDlrp7kvovljJZcclxuICAgICAgICB2YXIgcHJvbXB0ID0gbmV3IHByb21wdENscygpO1xyXG4gICAgICAgIC8vIOiuvue9ruS8mOWFiOe6p1xyXG4gICAgICAgIHRoaXMuX3ByaW9yaXRpZXMuc2V0KHByb21wdCwgUGFuZWxNYW5hZ2VyXzEuUFJJT1JJVFlfUFJPTVBUKTtcclxuICAgICAgICAvLyDmmL7npLrlvLnnqpdcclxuICAgICAgICB0aGlzLnBvcChwcm9tcHQpO1xyXG4gICAgICAgIC8vIOabtOaWsOW8ueeql1xyXG4gICAgICAgIHByb21wdC51cGRhdGUocGFyYW1zKTtcclxuICAgICAgICAvLyDov5Tlm57lvLnnqpdcclxuICAgICAgICByZXR1cm4gcHJvbXB0O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5pi+56S66K2m5ZGK56qX5Y+j77yI5Y+q5pyJ5LiA5Liq56Gu5a6a5oyJ6ZKu77yJXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHsoc3RyaW5nfElQcm9tcHRQYXJhbXMpfSBtc2dPclBhcmFtcyDopoHmmL7npLrnmoTmlofmnKzvvIzmiJbogIXlvLnnqpfmlbDmja5cclxuICAgICAqIEBwYXJhbSB7KCk9PnZvaWR9IFtva0hhbmRsZXJdIOehruWumuaMiemSrueCueWHu+Wbnuiwg1xyXG4gICAgICogQHJldHVybnMge0lQcm9tcHRQYW5lbH0g6L+U5Zue5by556qX5a6e5L2TXHJcbiAgICAgKiBAbWVtYmVyb2YgUGFuZWxNYW5hZ2VyXHJcbiAgICAgKi9cclxuICAgIFBhbmVsTWFuYWdlci5wcm90b3R5cGUuYWxlcnQgPSBmdW5jdGlvbiAobXNnT3JQYXJhbXMsIG9rSGFuZGxlcikge1xyXG4gICAgICAgIHZhciBwYXJhbXM7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBtc2dPclBhcmFtcyA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHBhcmFtcyA9IHsgbXNnOiBtc2dPclBhcmFtcyB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcGFyYW1zID0gbXNnT3JQYXJhbXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHBhcmFtcy5oYW5kbGVycyA9IFtcclxuICAgICAgICAgICAgeyBkYXRhOiBcIuehruWumlwiLCBoYW5kbGVyOiBva0hhbmRsZXIsIGJ1dHRvblR5cGU6IEJ1dHRvblR5cGUuaW1wb3J0YW50IH1cclxuICAgICAgICBdO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb21wdChwYXJhbXMpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5pi+56S656Gu6K6k56qX5Y+j77yI5pyJ5LiA5Liq56Gu5a6a5oyJ6ZKu5ZKM5LiA5Liq5Y+W5raI5oyJ6ZKu77yJXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHsoc3RyaW5nfElQcm9tcHRQYXJhbXMpfSBtc2dPclBhcmFtcyDopoHmmL7npLrnmoTmlofmnKzvvIzmiJbogIXlvLnnqpfmlbDmja5cclxuICAgICAqIEBwYXJhbSB7KCk9PnZvaWR9IFtva0hhbmRsZXJdIOehruWumuaMiemSrueCueWHu+Wbnuiwg1xyXG4gICAgICogQHBhcmFtIHsoKT0+dm9pZH0gW2NhbmNlbEhhbmRsZXJdIOWPlua2iOaMiemSrueCueWHu+Wbnuiwg1xyXG4gICAgICogQHJldHVybnMge0lQcm9tcHRQYW5lbH0g6L+U5Zue5by556qX5a6e5L2TXHJcbiAgICAgKiBAbWVtYmVyb2YgUGFuZWxNYW5hZ2VyXHJcbiAgICAgKi9cclxuICAgIFBhbmVsTWFuYWdlci5wcm90b3R5cGUuY29uZmlybSA9IGZ1bmN0aW9uIChtc2dPclBhcmFtcywgb2tIYW5kbGVyLCBjYW5jZWxIYW5kbGVyKSB7XHJcbiAgICAgICAgdmFyIHBhcmFtcztcclxuICAgICAgICBpZiAodHlwZW9mIG1zZ09yUGFyYW1zID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcGFyYW1zID0geyBtc2c6IG1zZ09yUGFyYW1zIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwYXJhbXMgPSBtc2dPclBhcmFtcztcclxuICAgICAgICB9XHJcbiAgICAgICAgcGFyYW1zLmhhbmRsZXJzID0gW1xyXG4gICAgICAgICAgICB7IGRhdGE6IFwi5Y+W5raIXCIsIGhhbmRsZXI6IGNhbmNlbEhhbmRsZXIsIGJ1dHRvblR5cGU6IEJ1dHRvblR5cGUubm9ybWFsIH0sXHJcbiAgICAgICAgICAgIHsgZGF0YTogXCLnoa7lrppcIiwgaGFuZGxlcjogb2tIYW5kbGVyLCBidXR0b25UeXBlOiBCdXR0b25UeXBlLmltcG9ydGFudCB9XHJcbiAgICAgICAgXTtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9tcHQocGFyYW1zKTtcclxuICAgIH07XHJcbiAgICBQYW5lbE1hbmFnZXIuUFJJT1JJVFlfTk9STUFMID0gMDtcclxuICAgIFBhbmVsTWFuYWdlci5QUklPUklUWV9QUk9NUFQgPSAxO1xyXG4gICAgUGFuZWxNYW5hZ2VyID0gUGFuZWxNYW5hZ2VyXzEgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBJbmplY3RhYmxlXHJcbiAgICBdLCBQYW5lbE1hbmFnZXIpO1xyXG4gICAgcmV0dXJuIFBhbmVsTWFuYWdlcjtcclxuICAgIHZhciBQYW5lbE1hbmFnZXJfMTtcclxufSgpKTtcclxuZXhwb3J0IGRlZmF1bHQgUGFuZWxNYW5hZ2VyO1xyXG4vKiog5YaN6aKd5aSW5a+85Ye65LiA5Liq5Y2V5L6LICovXHJcbmV4cG9ydCB2YXIgcGFuZWxNYW5hZ2VyID0gY29yZS5nZXRJbmplY3QoUGFuZWxNYW5hZ2VyKTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL3BhbmVsL1BhbmVsTWFuYWdlci5qc1xuLy8gbW9kdWxlIGlkID0gMjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IHsgZW52aXJvbm1lbnQgfSBmcm9tIFwiLi4vZW5naW5lL2Vudi9FbnZpcm9ubWVudFwiO1xyXG5pbXBvcnQgeyB2YWxpZGF0ZVByb3RvY29sLCBqb2luUXVlcnlQYXJhbXMsIHRyaW1VUkwgfSBmcm9tIFwiLi9VUkxVdGlsXCI7XHJcbmltcG9ydCB7IGNsb25lT2JqZWN0IH0gZnJvbSBcIi4vT2JqZWN0VXRpbFwiO1xyXG4vKipcclxuICog5Y+R6YCB5LiA5Liq5oiW5aSa5LiqSFRUUOivt+axglxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBwYXJhbSB7SUhUVFBSZXF1ZXN0UGFyYW1zfSBwYXJhbXMg6K+35rGC5Y+C5pWwXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbG9hZChwYXJhbXMpIHtcclxuICAgIC8vIOmdnuepuuWIpOaWrVxyXG4gICAgaWYgKCFwYXJhbXMudXJsKSB7XHJcbiAgICAgICAgLy8g5oiQ5Yqf5Zue6LCDXHJcbiAgICAgICAgcGFyYW1zLm9uUmVzcG9uc2UgJiYgcGFyYW1zLm9uUmVzcG9uc2UoKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyDmlbDnu4TliKTmlq1cclxuICAgIGlmIChwYXJhbXMudXJsIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgICAvLyDkuIDmrKHor7fmsYLlpJrkuKrlnLDlnYDvvIzpnIDopoHlgZrkuIDkuKrpmJ/liJfliqDovb3vvIznhLblkI7kuIDmrKHmgKflm57osINcclxuICAgICAgICB2YXIgdXJscyA9IHBhcmFtcy51cmw7XHJcbiAgICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcclxuICAgICAgICB2YXIgbmV3UGFyYW1zID0gY2xvbmVPYmplY3QocGFyYW1zKTtcclxuICAgICAgICBuZXdQYXJhbXMub25SZXNwb25zZSA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XHJcbiAgICAgICAgICAgIGxvYWROZXh0KCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgbG9hZE5leHQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh1cmxzLmxlbmd0aCA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDmiJDlip/lm57osINcclxuICAgICAgICAgICAgICAgIHBhcmFtcy5vblJlc3BvbnNlICYmIHBhcmFtcy5vblJlc3BvbnNlKHJlc3VsdHMpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG5ld1BhcmFtcy51cmwgPSB1cmxzLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIGxvYWQobmV3UGFyYW1zKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxvYWROZXh0KCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8g5LiA5qyh6K+35rGC5LiA5Liq5Zyw5Z2AXHJcbiAgICB2YXIgcmV0cnlUaW1lcyA9IHBhcmFtcy5yZXRyeVRpbWVzIHx8IDI7XHJcbiAgICB2YXIgdGltZW91dCA9IHBhcmFtcy50aW1lb3V0IHx8IDEwMDAwO1xyXG4gICAgdmFyIG1ldGhvZCA9IHBhcmFtcy5tZXRob2QgfHwgXCJHRVRcIjtcclxuICAgIHZhciB0aW1lb3V0SWQgPSAwO1xyXG4gICAgdmFyIGRhdGEgPSBwYXJhbXMuZGF0YSB8fCB7fTtcclxuICAgIC8vIOWPluWIsHVybFxyXG4gICAgdmFyIHVybCA9IHBhcmFtcy51cmw7XHJcbiAgICBpZiAocGFyYW1zLnVzZUNETikge1xyXG4gICAgICAgIC8vIOWmguaenOS9v+eUqENETuWImeaUueeUqGNkbuWfn+WQjVxyXG4gICAgICAgIHVybCA9IGVudmlyb25tZW50LnRvQ0ROSG9zdFVSTCh1cmwpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8g5ZCI5rOV5YyW5LiA5LiLcHJvdG9jb2xcclxuICAgICAgICB1cmwgPSB2YWxpZGF0ZVByb3RvY29sKHVybCk7XHJcbiAgICAgICAgLy8g6KeE5pW05LiA5LiLdXJsXHJcbiAgICAgICAgdXJsID0gdHJpbVVSTCh1cmwpO1xyXG4gICAgfVxyXG4gICAgLy8g55Sf5oiQ5bm25Yid5aeL5YyWeGhyXHJcbiAgICB2YXIgeGhyID0gKHdpbmRvd1tcIlhNTEh0dHBSZXF1ZXN0XCJdID8gbmV3IFhNTEh0dHBSZXF1ZXN0KCkgOiBuZXcgQWN0aXZlWE9iamVjdChcIk1pY3Jvc29mdC5YTUxIVFRQXCIpKTtcclxuICAgIGlmIChwYXJhbXMucmVzcG9uc2VUeXBlKVxyXG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSBwYXJhbXMucmVzcG9uc2VUeXBlO1xyXG4gICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG9uUmVhZHlTdGF0ZUNoYW5nZTtcclxuICAgIC8vIOWPkemAgVxyXG4gICAgc2VuZCgpO1xyXG4gICAgZnVuY3Rpb24gc2VuZCgpIHtcclxuICAgICAgICB2YXIgc2VuZERhdGEgPSBudWxsO1xyXG4gICAgICAgIC8vIOagueaNruWPkemAgeaWueW8j+e7hOe7h+aVsOaNruagvOW8j1xyXG4gICAgICAgIHN3aXRjaCAobWV0aG9kKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJQT1NUXCI6XHJcbiAgICAgICAgICAgICAgICAvLyBQT1NU55uu5YmN6KeE5a6a5Li6SlNPTuagvOW8j+WPkemAgVxyXG4gICAgICAgICAgICAgICAgc2VuZERhdGEgPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiR0VUXCI6XHJcbiAgICAgICAgICAgICAgICAvLyDlsIbmlbDmja7mt7vliqDliLB1cmzkuIpcclxuICAgICAgICAgICAgICAgIHVybCA9IGpvaW5RdWVyeVBhcmFtcyh1cmwsIGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLmmoLkuI3mlK/mjIHnmoRIVFRQIE1ldGhvZO+8mlwiICsgbWV0aG9kKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g5omT5byAWEhSXHJcbiAgICAgICAgeGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUpO1xyXG4gICAgICAgIC8vIOa3u+WKoOiHquWumuS5ieivt+axguWktFxyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBwYXJhbXMuaGVhZGVyRGljdCkge1xyXG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIHBhcmFtcy5oZWFkZXJEaWN0W2tleV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDlvIDlp4vlj5HpgIFcclxuICAgICAgICB4aHIuc2VuZChzZW5kRGF0YSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBvblJlYWR5U3RhdGVDaGFuZ2UoKSB7XHJcbiAgICAgICAgc3dpdGNoICh4aHIucmVhZHlTdGF0ZSkge1xyXG4gICAgICAgICAgICBjYXNlIDI6Ly8g5bey57uP5Y+R6YCB77yM5byA5aeL6K6h5pe2XHJcbiAgICAgICAgICAgICAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGFib3J0QW5kUmV0cnksIHRpbWVvdXQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgNDovLyDmjqXmlLblrozmr5VcclxuICAgICAgICAgICAgICAgIC8vIOWBnOatouiuoeaXtlxyXG4gICAgICAgICAgICAgICAgdGltZW91dElkICYmIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xyXG4gICAgICAgICAgICAgICAgdGltZW91dElkID0gMDtcclxuICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOaIkOWKn+Wbnuiwg1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcy5vblJlc3BvbnNlICYmIHBhcmFtcy5vblJlc3BvbnNlKHhoci5yZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXRyeVRpbWVzID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOayoeaciei2hei/h+mHjeivleS4iumZkOWImemHjeivlVxyXG4gICAgICAgICAgICAgICAgICAgIGFib3J0QW5kUmV0cnkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOWHuumUme+8jOWmguaenOS9v+eUqENETuWKn+iDveWImeWwneivleWIh+aNolxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXMudXNlQ0ROICYmICFlbnZpcm9ubWVudC5uZXh0Q0ROKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g6L+Y5rKh5YiH5o2i5a6M77yM6YeN5paw5Yqg6L29XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWQocGFyYW1zKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOWIh+aNouWujOS6hui/mOWksei0pe+8jOWImeaxh+aKpemUmeivr1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKHhoci5zdGF0dXMgKyBcIiBcIiArIHhoci5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLm9uRXJyb3IgJiYgcGFyYW1zLm9uRXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhYm9ydEFuZFJldHJ5KCkge1xyXG4gICAgICAgIC8vIOmHjeivleasoeaVsOmAkuWHj1xyXG4gICAgICAgIHJldHJ5VGltZXMtLTtcclxuICAgICAgICAvLyDkuK3mraJ4aHJcclxuICAgICAgICB4aHIuYWJvcnQoKTtcclxuICAgICAgICAvLyDmt7vliqDml7bpl7TmiLPkvZzkuLrpmo/mnLrniYjmnKzlj7dcclxuICAgICAgICB1cmwgPSBqb2luUXVlcnlQYXJhbXModXJsLCB7IF9yOiBEYXRlLm5vdygpIH0pO1xyXG4gICAgICAgIC8vIOmHjeaWsOWPkemAgVxyXG4gICAgICAgIHNlbmQoKTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci91dGlscy9IVFRQVXRpbC5qc1xuLy8gbW9kdWxlIGlkID0gMzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufTtcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCIuLi8uLi9jb3JlL2luamVjdG9yL0luamVjdG9yXCI7XHJcbmltcG9ydCB7IGNvcmUgfSBmcm9tIFwiLi4vLi4vY29yZS9Db3JlXCI7XHJcbmltcG9ydCBBdWRpb1RhZ0ltcGwgZnJvbSBcIi4vQXVkaW9UYWdJbXBsXCI7XHJcbmltcG9ydCBBdWRpb0NvbnRleHRJbXBsIGZyb20gXCIuL0F1ZGlvQ29udGV4dEltcGxcIjtcclxuLyoqXHJcbiAqIEBhdXRob3IgUmF5a2lkXHJcbiAqIEBlbWFpbCBpbml0aWFsX3JAcXEuY29tXHJcbiAqIEBjcmVhdGUgZGF0ZSAyMDE3LTEwLTMwXHJcbiAqIEBtb2RpZnkgZGF0ZSAyMDE3LTEwLTMwXHJcbiAqXHJcbiAqIOmfs+mikeeuoeeQhuWZqO+8jOmfs+mikeaOpeWPo+iiq+W8uuihjOWIhuS4uuS4pOmDqOWIhu+8mlNvdW5k5ZKMTXVzaWPjgIJcclxuICogU291bmTvvJrkvb/nlKhBdWRpb+agh+etvuaSreaUvu+8jOWPr+S7pei3qOWfn+aSreaUvuS9huWPr+iDveS8muiiq+afkOS6m+a1j+iniOWZqOmZkOWItu+8jOW/hemhu+WcqOeCueWHu+S6i+S7tuWkhOeQhuWHveaVsOS4reaSreaUvlxyXG4gKiBNdXNpY++8muS9v+eUqEF1ZGlvQ29udGV4dOaSreaUvu+8jOWPr+S7peS4gOWumueoi+W6puS4iui2iui/h+eCueWHu+S6i+S7tuajgOafpe+8jOS9huaXoOazlei3qOWfn+aSreaUvu+8jOmAguWQiOaSreaUvuiDjOaZr+mfs+S5kFxyXG4qL1xyXG52YXIgQXVkaW9NYW5hZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQXVkaW9NYW5hZ2VyKCkge1xyXG4gICAgICAgIHRoaXMuX3NvdW5kSW1wbCA9IG5ldyBBdWRpb1RhZ0ltcGwoKTtcclxuICAgICAgICB0aGlzLl9tdXNpY0ltcGwgPSBuZXcgQXVkaW9Db250ZXh0SW1wbCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDms6jlhoxTb3VuZOmfs+mikeWunueOsOWvueixoVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7SUF1ZGlvfSBzb3VuZEltcGwgU291bmTpn7PpopHlrp7njrDlr7nosaFcclxuICAgICAqIEBtZW1iZXJvZiBBdWRpb01hbmFnZXJcclxuICAgICAqL1xyXG4gICAgQXVkaW9NYW5hZ2VyLnByb3RvdHlwZS5yZWdpc3RlclNvdW5kSW1wbCA9IGZ1bmN0aW9uIChzb3VuZEltcGwpIHtcclxuICAgICAgICB0aGlzLl9zb3VuZEltcGwgPSBzb3VuZEltcGw7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDliqDovb1Tb3VuZOmfs+mikVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwg6Z+z6aKR5Zyw5Z2AXHJcbiAgICAgKiBAbWVtYmVyb2YgQXVkaW9NYW5hZ2VyXHJcbiAgICAgKi9cclxuICAgIEF1ZGlvTWFuYWdlci5wcm90b3R5cGUubG9hZFNvdW5kID0gZnVuY3Rpb24gKHVybCkge1xyXG4gICAgICAgIHRoaXMuX3NvdW5kSW1wbC5sb2FkKHVybCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDmkq3mlL5Tb3VuZOmfs+mike+8jOWmguaenOayoeacieWKoOi9veWImeS8muWFiOihjOWKoOi9vVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7QXVkaW9QbGF5UGFyYW1zfSBwYXJhbXMg6Z+z6aKR5pKt5pS+5Y+C5pWwXHJcbiAgICAgKiBAbWVtYmVyb2YgQXVkaW9NYW5hZ2VyXHJcbiAgICAgKi9cclxuICAgIEF1ZGlvTWFuYWdlci5wcm90b3R5cGUucGxheVNvdW5kID0gZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgICAgIC8vIOWBnOatouWFtuS7lumfs+mikVxyXG4gICAgICAgIGlmIChwYXJhbXMuc3RvcE90aGVycykge1xyXG4gICAgICAgICAgICB0aGlzLnN0b3BBbGxTb3VuZCgpO1xyXG4gICAgICAgICAgICB0aGlzLnN0b3BBbGxNdXNpY3MoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fc291bmRJbXBsLnBsYXkocGFyYW1zKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOi3s+i9rFNvdW5k6Z+z6aKR6L+b5bqmXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCDpn7PpopFVUkxcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lIOimgei3s+i9rOWIsOeahOmfs+mikeS9jee9ru+8jOavq+enkuWAvFxyXG4gICAgICogQG1lbWJlcm9mIEF1ZGlvTWFuYWdlclxyXG4gICAgICovXHJcbiAgICBBdWRpb01hbmFnZXIucHJvdG90eXBlLnNlZWtTb3VuZCA9IGZ1bmN0aW9uICh1cmwsIHRpbWUpIHtcclxuICAgICAgICB0aGlzLl9zb3VuZEltcGwuc2Vlayh1cmwsIHRpbWUpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5YGc5q2iU291bmTpn7PpopFcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIOmfs+mikeWcsOWdgFxyXG4gICAgICogQG1lbWJlcm9mIEF1ZGlvTWFuYWdlclxyXG4gICAgICovXHJcbiAgICBBdWRpb01hbmFnZXIucHJvdG90eXBlLnN0b3BTb3VuZCA9IGZ1bmN0aW9uICh1cmwpIHtcclxuICAgICAgICB0aGlzLl9zb3VuZEltcGwuc3RvcCh1cmwpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5pqC5YGcU291bmTpn7PpopFcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIOmfs+mikeWcsOWdgFxyXG4gICAgICogQG1lbWJlcm9mIEF1ZGlvTWFuYWdlclxyXG4gICAgICovXHJcbiAgICBBdWRpb01hbmFnZXIucHJvdG90eXBlLnBhdXNlU291bmQgPSBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgdGhpcy5fc291bmRJbXBsLnBhdXNlKHVybCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDlgZzmraLmiYDmnIlTb3VuZOmfs+mikVxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJvZiBBdWRpb01hbmFnZXJcclxuICAgICAqL1xyXG4gICAgQXVkaW9NYW5hZ2VyLnByb3RvdHlwZS5zdG9wQWxsU291bmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5fc291bmRJbXBsLnN0b3BBbGwoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOazqOWGjE11c2lj6Z+z6aKR5a6e546w5a+56LGhXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtJQXVkaW99IG11c2ljSW1wbCBNdXNpY+mfs+mikeWunueOsOWvueixoVxyXG4gICAgICogQG1lbWJlcm9mIEF1ZGlvTWFuYWdlclxyXG4gICAgICovXHJcbiAgICBBdWRpb01hbmFnZXIucHJvdG90eXBlLnJlZ2lzdGVyTXVzaWNJbXBsID0gZnVuY3Rpb24gKG11c2ljSW1wbCkge1xyXG4gICAgICAgIHRoaXMuX211c2ljSW1wbCA9IG11c2ljSW1wbDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOWKoOi9vU11c2lj6Z+z6aKRXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCDpn7PpopHlnLDlnYBcclxuICAgICAqIEBtZW1iZXJvZiBBdWRpb01hbmFnZXJcclxuICAgICAqL1xyXG4gICAgQXVkaW9NYW5hZ2VyLnByb3RvdHlwZS5sb2FkTXVzaWMgPSBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgdGhpcy5fbXVzaWNJbXBsLmxvYWQodXJsKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOaSreaUvk11c2lj6Z+z6aKR77yM5aaC5p6c5rKh5pyJ5Yqg6L295YiZ5Lya5YWI6KGM5Yqg6L29XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtBdWRpb1BsYXlQYXJhbXN9IFtwYXJhbXNdIOmfs+mikeWPguaVsFxyXG4gICAgICogQG1lbWJlcm9mIEF1ZGlvTWFuYWdlclxyXG4gICAgICovXHJcbiAgICBBdWRpb01hbmFnZXIucHJvdG90eXBlLnBsYXlNdXNpYyA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcclxuICAgICAgICAvLyDlgZzmraLlhbbku5bpn7PpopFcclxuICAgICAgICBpZiAocGFyYW1zLnN0b3BPdGhlcnMpIHtcclxuICAgICAgICAgICAgdGhpcy5zdG9wQWxsU291bmQoKTtcclxuICAgICAgICAgICAgdGhpcy5zdG9wQWxsTXVzaWNzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX211c2ljSW1wbC5wbGF5KHBhcmFtcyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDot7PovaxNdXNpY+mfs+mikei/m+W6plxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwg6Z+z6aKRVVJMXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZSDopoHot7PovazliLDnmoTpn7PpopHkvY3nva7vvIzmr6vnp5LlgLxcclxuICAgICAqIEBtZW1iZXJvZiBBdWRpb01hbmFnZXJcclxuICAgICAqL1xyXG4gICAgQXVkaW9NYW5hZ2VyLnByb3RvdHlwZS5zZWVrTXVzaWMgPSBmdW5jdGlvbiAodXJsLCB0aW1lKSB7XHJcbiAgICAgICAgdGhpcy5fbXVzaWNJbXBsLnNlZWsodXJsLCB0aW1lKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOWBnOatok11c2lj6Z+z6aKRXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCDpn7PpopHlnLDlnYBcclxuICAgICAqIEBtZW1iZXJvZiBBdWRpb01hbmFnZXJcclxuICAgICAqL1xyXG4gICAgQXVkaW9NYW5hZ2VyLnByb3RvdHlwZS5zdG9wTXVzaWMgPSBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgdGhpcy5fbXVzaWNJbXBsLnN0b3AodXJsKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOaaguWBnE11c2lj6Z+z6aKRXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCDpn7PpopHlnLDlnYBcclxuICAgICAqIEBtZW1iZXJvZiBBdWRpb01hbmFnZXJcclxuICAgICAqL1xyXG4gICAgQXVkaW9NYW5hZ2VyLnByb3RvdHlwZS5wYXVzZU11c2ljID0gZnVuY3Rpb24gKHVybCkge1xyXG4gICAgICAgIHRoaXMuX211c2ljSW1wbC5wYXVzZSh1cmwpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5YGc5q2i5omA5pyJTXVzaWPpn7PpopFcclxuICAgICAqXHJcbiAgICAgKiBAbWVtYmVyb2YgQXVkaW9NYW5hZ2VyXHJcbiAgICAgKi9cclxuICAgIEF1ZGlvTWFuYWdlci5wcm90b3R5cGUuc3RvcEFsbE11c2ljcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9tdXNpY0ltcGwuc3RvcEFsbCgpO1xyXG4gICAgfTtcclxuICAgIEF1ZGlvTWFuYWdlciA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIEluamVjdGFibGVcclxuICAgIF0sIEF1ZGlvTWFuYWdlcik7XHJcbiAgICByZXR1cm4gQXVkaW9NYW5hZ2VyO1xyXG59KCkpO1xyXG5leHBvcnQgZGVmYXVsdCBBdWRpb01hbmFnZXI7XHJcbi8qKiDlho3pop3lpJblr7zlh7rkuIDkuKrljZXkvosgKi9cclxuZXhwb3J0IHZhciBhdWRpb01hbmFnZXIgPSBjb3JlLmdldEluamVjdChBdWRpb01hbmFnZXIpO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9lbmdpbmUvYXVkaW8vQXVkaW9NYW5hZ2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcclxuICogQGF1dGhvciBSYXlraWRcclxuICogQGVtYWlsIGluaXRpYWxfckBxcS5jb21cclxuICogQGNyZWF0ZSBkYXRlIDIwMTctMTAtMzBcclxuICogQG1vZGlmeSBkYXRlIDIwMTctMTAtMzBcclxuICpcclxuICog6Z+z6aKR5raI5oGvXHJcbiovXHJcbnZhciBBdWRpb01lc3NhZ2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBdWRpb01lc3NhZ2UoKSB7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOmfs+mikeaSreaUvuW8gOWni+S6i+S7tlxyXG4gICAgICpcclxuICAgICAqIEBzdGF0aWNcclxuICAgICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICAgKiBAbWVtYmVyb2YgQXVkaW9NZXNzYWdlXHJcbiAgICAgKi9cclxuICAgIEF1ZGlvTWVzc2FnZS5BVURJT19QTEFZX1NUQVJURUQgPSBcImF1ZGlvUGxheVN0YXJ0ZWRcIjtcclxuICAgIC8qKlxyXG4gICAgICog6Z+z6aKR5pKt5pS+5YGc5q2i5LqL5Lu2XHJcbiAgICAgKlxyXG4gICAgICogQHN0YXRpY1xyXG4gICAgICogQHR5cGUge3N0cmluZ31cclxuICAgICAqIEBtZW1iZXJvZiBBdWRpb01lc3NhZ2VcclxuICAgICAqL1xyXG4gICAgQXVkaW9NZXNzYWdlLkFVRElPX1BMQVlfU1RPUFBFRCA9IFwiYXVkaW9QbGF5U3RvcHBlZFwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiDpn7PpopHmkq3mlL7lrozmr5Xkuovku7ZcclxuICAgICAqXHJcbiAgICAgKiBAc3RhdGljXHJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAgICogQG1lbWJlcm9mIEF1ZGlvTWVzc2FnZVxyXG4gICAgICovXHJcbiAgICBBdWRpb01lc3NhZ2UuQVVESU9fUExBWV9FTkRFRCA9IFwiYXVkaW9QbGF5RW5kZWRcIjtcclxuICAgIC8qKlxyXG4gICAgICog6Z+z6aKR5pKt5pS+6L+b5bqm5LqL5Lu2XHJcbiAgICAgKlxyXG4gICAgICogQHN0YXRpY1xyXG4gICAgICogQHR5cGUge3N0cmluZ31cclxuICAgICAqIEBtZW1iZXJvZiBBdWRpb01lc3NhZ2VcclxuICAgICAqL1xyXG4gICAgQXVkaW9NZXNzYWdlLkFVRElPX1BMQVlfUFJPR1JFU1MgPSBcImF1ZGlvUGxheVByb2dyZXNzXCI7XHJcbiAgICByZXR1cm4gQXVkaW9NZXNzYWdlO1xyXG59KCkpO1xyXG5leHBvcnQgZGVmYXVsdCBBdWRpb01lc3NhZ2U7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2VuZ2luZS9hdWRpby9BdWRpb01lc3NhZ2UuanNcbi8vIG1vZHVsZSBpZCA9IDMyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCB7IGNvcmUgfSBmcm9tIFwiLi4vLi4vY29yZS9Db3JlXCI7XHJcbmltcG9ydCBPYnNlcnZhYmxlIGZyb20gXCIuLi8uLi9jb3JlL29ic2VydmFibGUvT2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgRGljdGlvbmFyeSBmcm9tIFwiLi4vLi4vdXRpbHMvRGljdGlvbmFyeVwiO1xyXG5pbXBvcnQgeyBtb2R1bGVNYW5hZ2VyIH0gZnJvbSBcIi4vTW9kdWxlTWFuYWdlclwiO1xyXG5pbXBvcnQgeyBnZXRDb25zdHJ1Y3RvciB9IGZyb20gXCIuLi8uLi91dGlscy9Db25zdHJ1Y3RVdGlsXCI7XHJcbi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0wOS0xNFxyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0wOS0xNFxyXG4gKlxyXG4gKiDmqKHlnZfln7rnsbtcclxuKi9cclxudmFyIE1vZHVsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE1vZHVsZSgpIHtcclxuICAgICAgICB0aGlzLl9kaXNwb3NlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX21lZGlhdG9ycyA9IFtdO1xyXG4gICAgICAgIHRoaXMuX2Rpc3Bvc2VEaWN0ID0gbmV3IERpY3Rpb25hcnkoKTtcclxuICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKiog5LiL6Z2i5piv5qih5Z2X5raI5oGv57O757ufICoqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gICAgICAgIHRoaXMuX29ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZShjb3JlKTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2R1bGUucHJvdG90eXBlLCBcImRpc3Bvc2VkXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDojrflj5bmmK/lkKblt7LooqvplIDmr4FcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEByZWFkb25seVxyXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBNb2R1bGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc3Bvc2VkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZS5wcm90b3R5cGUsIFwiYmdNdXNpY1wiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6I635Y+W6IOM5pmv6Z+z5LmQVVJMXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcmVhZG9ubHlcclxuICAgICAgICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBNb2R1bGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlLnByb3RvdHlwZSwgXCJkZXBlbmRNb2R1bGVJbnN0YW5jZVwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5omA5bGe55qE5qih5Z2X5byV55SoXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcmVhZG9ubHlcclxuICAgICAgICAgKiBAdHlwZSB7SU1vZHVsZX1cclxuICAgICAgICAgKiBAbWVtYmVyb2YgSU1lZGlhdG9yXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZHVsZS5wcm90b3R5cGUsIFwiZGVwZW5kTW9kdWxlXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmiYDlsZ7nmoTmqKHlnZfnsbvlnotcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEByZWFkb25seVxyXG4gICAgICAgICAqIEB0eXBlIHtJTW9kdWxlQ29uc3RydWN0b3J9XHJcbiAgICAgICAgICogQG1lbWJlcm9mIElNZWRpYXRvclxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2V0Q29uc3RydWN0b3IodGhpcy5jb25zdHJ1Y3Rvcik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlLnByb3RvdHlwZSwgXCJkZWxlZ2F0ZWRNZWRpYXRvcnNcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPluaJgOacieW3suaJmOeuoeeahOS4reS7i+iAhVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJldHVybnMge0lNb2R1bGVNZWRpYXRvcltdfSDlt7LmiZjnrqHnmoTkuK3ku4vogIVcclxuICAgICAgICAgKiBAbWVtYmVyb2YgTW9kdWxlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tZWRpYXRvcnM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBNb2R1bGUucHJvdG90eXBlLmRpc3Bvc2VNZWRpYXRvciA9IGZ1bmN0aW9uIChtZWRpYXRvcikge1xyXG4gICAgICAgIC8vIOWPlua2iOaJmOeuoVxyXG4gICAgICAgIHRoaXMudW5kZWxlZ2F0ZU1lZGlhdG9yKG1lZGlhdG9yKTtcclxuICAgICAgICAvLyDosIPnlKjljp/lp4vplIDmr4Hmlrnms5VcclxuICAgICAgICBtZWRpYXRvci5kaXNwb3NlKCk7XHJcbiAgICAgICAgLy8g5aaC5p6c5omA5pyJ5bey5omY566h55qE5Lit5LuL6ICF6YO95bey57uP6KKr6ZSA5q+B77yM5YiZ6ZSA5q+B5b2T5YmN5qih5Z2XXHJcbiAgICAgICAgaWYgKHRoaXMuX21lZGlhdG9ycy5sZW5ndGggPD0gMClcclxuICAgICAgICAgICAgdGhpcy5kaXNwb3NlKCk7XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqXHJcbiAgICAgKiDmiZjnrqHkuK3ku4vogIVcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0lNb2R1bGVNZWRpYXRvcn0gbWVkaWF0b3Ig5Lit5LuL6ICFXHJcbiAgICAgKiBAbWVtYmVyb2YgTW9kdWxlXHJcbiAgICAgKi9cclxuICAgIE1vZHVsZS5wcm90b3R5cGUuZGVsZWdhdGVNZWRpYXRvciA9IGZ1bmN0aW9uIChtZWRpYXRvcikge1xyXG4gICAgICAgIGlmICh0aGlzLl9tZWRpYXRvcnMuaW5kZXhPZihtZWRpYXRvcikgPCAwKSB7XHJcbiAgICAgICAgICAgIC8vIOaJmOeuoeaWsOeahOS4reS7i+iAhVxyXG4gICAgICAgICAgICB0aGlzLl9tZWRpYXRvcnMucHVzaChtZWRpYXRvcik7XHJcbiAgICAgICAgICAgIC8vIOevoeaUuWRpc3Bvc2Xmlrnms5XvvIzku6Xnm5HlkKzlhbZkaXNwb3NlXHJcbiAgICAgICAgICAgIGlmIChtZWRpYXRvci5oYXNPd25Qcm9wZXJ0eShcImRpc3Bvc2VcIikpXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kaXNwb3NlRGljdC5zZXQobWVkaWF0b3IsIG1lZGlhdG9yLmRpc3Bvc2UpO1xyXG4gICAgICAgICAgICBtZWRpYXRvci5kaXNwb3NlID0gdGhpcy5kaXNwb3NlTWVkaWF0b3IuYmluZCh0aGlzLCBtZWRpYXRvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5Y+W5raI5omY566h5Lit5LuL6ICFXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtJTW9kdWxlTWVkaWF0b3J9IG1lZGlhdG9yIOS4reS7i+iAhVxyXG4gICAgICogQG1lbWJlcm9mIE1vZHVsZVxyXG4gICAgICovXHJcbiAgICBNb2R1bGUucHJvdG90eXBlLnVuZGVsZWdhdGVNZWRpYXRvciA9IGZ1bmN0aW9uIChtZWRpYXRvcikge1xyXG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuX21lZGlhdG9ycy5pbmRleE9mKG1lZGlhdG9yKTtcclxuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAvLyDlj5bmtojmiZjnrqHkuK3ku4vogIVcclxuICAgICAgICAgICAgdGhpcy5fbWVkaWF0b3JzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIC8vIOaBouWkjWRpc3Bvc2Xmlrnms5XvvIzlj5bmtojnm5HlkKxkaXNwb3NlXHJcbiAgICAgICAgICAgIHZhciBvcmlEaXNwb3NlID0gdGhpcy5fZGlzcG9zZURpY3QuZ2V0KG1lZGlhdG9yKTtcclxuICAgICAgICAgICAgaWYgKG9yaURpc3Bvc2UpXHJcbiAgICAgICAgICAgICAgICBtZWRpYXRvci5kaXNwb3NlID0gb3JpRGlzcG9zZTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgZGVsZXRlIG1lZGlhdG9yLmRpc3Bvc2U7XHJcbiAgICAgICAgICAgIHRoaXMuX2Rpc3Bvc2VEaWN0LmRlbGV0ZShtZWRpYXRvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5Yik5pat5oyH5a6a5Lit5LuL6ICF5piv5ZCm5YyF5ZCr5Zyo6K+l5qih5Z2X6YeMXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtJTW9kdWxlTWVkaWF0b3J9IG1lZGlhdG9yIOimgeWIpOaWreeahOS4reS7i+iAhVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IOaYr+WQpuWMheWQq+WcqOivpeaooeWdl+mHjFxyXG4gICAgICogQG1lbWJlcm9mIE1vZHVsZVxyXG4gICAgICovXHJcbiAgICBNb2R1bGUucHJvdG90eXBlLmNvbnN0YWluc01lZGlhdG9yID0gZnVuY3Rpb24gKG1lZGlhdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLl9tZWRpYXRvcnMuaW5kZXhPZihtZWRpYXRvcikgPj0gMCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDliJflh7rmqKHlnZfmiYDpnIBDU1PotYTmupBVUkzvvIzlj6/ku6Xph43lhplcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nW119IENTU+i1hOa6kOWIl+ihqFxyXG4gICAgICogQG1lbWJlcm9mIE1vZHVsZVxyXG4gICAgICovXHJcbiAgICBNb2R1bGUucHJvdG90eXBlLmxpc3RTdHlsZUZpbGVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5YiX5Ye65qih5Z2X5omA6ZyASlPotYTmupBVUkzvvIzlj6/ku6Xph43lhplcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nW119IGpz6LWE5rqQ5YiX6KGoXHJcbiAgICAgKiBAbWVtYmVyb2YgTW9kdWxlXHJcbiAgICAgKi9cclxuICAgIE1vZHVsZS5wcm90b3R5cGUubGlzdEpzRmlsZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDliJflh7rmqKHlnZfliJ3lp4vljJbor7fmsYLvvIzlj6/ku6Xph43lhplcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7UmVxdWVzdERhdGFbXX0g5qih5Z2X55qE5Yid5aeL5YyW6K+35rGC5YiX6KGoXHJcbiAgICAgKiBAbWVtYmVyb2YgTW9kdWxlXHJcbiAgICAgKi9cclxuICAgIE1vZHVsZS5wcm90b3R5cGUubGlzdEluaXRSZXF1ZXN0cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOW9k+aooeWdl+i1hOa6kOWKoOi9veWujOavleWQjuiwg+eUqFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RXJyb3J9IFtlcnJdIOS7u+S9leS4gOS4qk1lZGlhdG9y6LWE5rqQ5Yqg6L295Ye66ZSZ5Lya57uZ5Ye66K+l6ZSZ6K+v5a+56LGh77yM5rKh6ZSZ5YiZ5LiN57uZXHJcbiAgICAgKiBAbWVtYmVyb2YgTW9kdWxlXHJcbiAgICAgKi9cclxuICAgIE1vZHVsZS5wcm90b3R5cGUub25Mb2FkQXNzZXRzID0gZnVuY3Rpb24gKGVycikge1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5omT5byA5qih5Z2X5pe26LCD55So77yM5Y+v5Lul6YeN5YaZXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHsqfSBbZGF0YV0g5Lyg6YCS57uZ5qih5Z2X55qE5pWw5o2uXHJcbiAgICAgKiBAbWVtYmVyb2YgTW9kdWxlXHJcbiAgICAgKi9cclxuICAgIE1vZHVsZS5wcm90b3R5cGUub25PcGVuID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAvLyDosIPnlKjmiYDmnInlt7LmiZjnrqHkuK3ku4vogIXnmoRvcGVu5pa55rOVXHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuX21lZGlhdG9yczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIG1lZGlhdG9yID0gX2FbX2ldO1xyXG4gICAgICAgICAgICBtZWRpYXRvci5vcGVuKGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOWFs+mXreaooeWdl+aXtuiwg+eUqO+8jOWPr+S7pemHjeWGmVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7Kn0gW2RhdGFdIOS8oOmAkue7meaooeWdl+eahOaVsOaNrlxyXG4gICAgICogQG1lbWJlcm9mIE1vZHVsZVxyXG4gICAgICovXHJcbiAgICBNb2R1bGUucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIC8vIOiwg+eUqOaJgOacieW3suaJmOeuoeS4reS7i+iAheeahGNsb3Nl5pa55rOVXHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuX21lZGlhdG9ycy5jb25jYXQoKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIG1lZGlhdG9yID0gX2FbX2ldO1xyXG4gICAgICAgICAgICBtZWRpYXRvci5jbG9zZShkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDmqKHlnZfliIfmjaLliLDliY3lj7Dml7bosIPnlKjvvIhvcGVu5LmL5ZCO5oiW6ICF5YW25LuW5qih5Z2X6KKr5YWz6Zet5pe277yJ77yM5Y+v5Lul6YeN5YaZXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtJTW9kdWxlQ29uc3RydWN0b3J8dW5kZWZpbmVkfSBmcm9tIOS7juWTquS4quaooeWdl+WIh+aNoui/h+adpVxyXG4gICAgICogQHBhcmFtIHsqfSBbZGF0YV0g5Lyg6YCS57uZ5qih5Z2X55qE5pWw5o2uXHJcbiAgICAgKiBAbWVtYmVyb2YgTW9kdWxlXHJcbiAgICAgKi9cclxuICAgIE1vZHVsZS5wcm90b3R5cGUub25BY3RpdmF0ZSA9IGZ1bmN0aW9uIChmcm9tLCBkYXRhKSB7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDmqKHlnZfliIfmjaLliLDlkI7lj7DmmK/osIPnlKjvvIhjbG9zZeS5i+WQjuaIluiAheWFtuS7luaooeWdl+aJk+W8gOaXtu+8ie+8jOWPr+S7pemHjeWGmVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7SU1vZHVsZUNvbnN0cnVjdG9yfHVuZGVmaW5lZH0gdG8g6KaB5YiH5o2i5Yiw5ZOq5Liq5qih5Z2XXHJcbiAgICAgKiBAcGFyYW0geyp9IFtkYXRhXSDkvKDpgJLnu5nmqKHlnZfnmoTmlbDmja5cclxuICAgICAqIEBtZW1iZXJvZiBNb2R1bGVcclxuICAgICAqL1xyXG4gICAgTW9kdWxlLnByb3RvdHlwZS5vbkRlYWN0aXZhdGUgPSBmdW5jdGlvbiAodG8sIGRhdGEpIHtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlLnByb3RvdHlwZSwgXCJvYnNlcnZhYmxlXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmmrTpnLJJT2JzZXJ2YWJsZeaOpeWPo1xyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJlYWRvbmx5XHJcbiAgICAgICAgICogQHR5cGUge0lPYnNlcnZhYmxlfVxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBNb2R1bGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29ic2VydmFibGU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kdWxlLnByb3RvdHlwZSwgXCJwYXJlbnRcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPluWIsOeItue6p0lPYnNlcnZhYmxlXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAdHlwZSB7SU9ic2VydmFibGV9XHJcbiAgICAgICAgICogQG1lbWJlcm9mIE1vZHVsZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fb2JzZXJ2YWJsZS5wYXJlbnQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICAvKiogZGlzcGF0Y2hNb2R1bGXmlrnms5Xlrp7njrAgKi9cclxuICAgIE1vZHVsZS5wcm90b3R5cGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHBhcmFtcyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHBhcmFtc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9vYnNlcnZhYmxlLmRpc3BhdGNoLmFwcGx5KHRoaXMuX29ic2VydmFibGUsIHBhcmFtcyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDnm5HlkKzmtojmga9cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSDmtojmga/nsbvlnotcclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIg5raI5oGv5aSE55CG5Ye95pWwXHJcbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSDmtojmga90aGlz5oyH5ZCRXHJcbiAgICAgKiBAbWVtYmVyb2YgTW9kdWxlXHJcbiAgICAgKi9cclxuICAgIE1vZHVsZS5wcm90b3R5cGUubGlzdGVuID0gZnVuY3Rpb24gKHR5cGUsIGhhbmRsZXIsIHRoaXNBcmcpIHtcclxuICAgICAgICB0aGlzLl9vYnNlcnZhYmxlLmxpc3Rlbih0eXBlLCBoYW5kbGVyLCB0aGlzQXJnKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOenu+mZpOa2iOaBr+ebkeWQrFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIOa2iOaBr+exu+Wei1xyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciDmtojmga/lpITnkIblh73mlbBcclxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIOa2iOaBr3RoaXPmjIflkJFcclxuICAgICAqIEBtZW1iZXJvZiBNb2R1bGVcclxuICAgICAqL1xyXG4gICAgTW9kdWxlLnByb3RvdHlwZS51bmxpc3RlbiA9IGZ1bmN0aW9uICh0eXBlLCBoYW5kbGVyLCB0aGlzQXJnKSB7XHJcbiAgICAgICAgdGhpcy5fb2JzZXJ2YWJsZS51bmxpc3Rlbih0eXBlLCBoYW5kbGVyLCB0aGlzQXJnKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOazqOWGjOWRveS7pOWIsOeJueWumua2iOaBr+exu+Wei+S4iu+8jOW9k+i/meS4quexu+Wei+eahOa2iOaBr+a0vuWPkeWIsOahhuaetuWGheaguOaXtuS8muinpuWPkUNvbW1hbmTov5DooYxcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSDopoHms6jlhoznmoTmtojmga/nsbvlnotcclxuICAgICAqIEBwYXJhbSB7KElDb21tYW5kQ29uc3RydWN0b3IpfSBjbWQg5ZG95Luk5aSE55CG5Zmo77yM5Y+v5Lul5piv5pa55rOV5b2i5byP77yM5Lmf5Y+v5Lul5L2/57G75b2i5byPXHJcbiAgICAgKiBAbWVtYmVyb2YgTW9kdWxlXHJcbiAgICAgKi9cclxuICAgIE1vZHVsZS5wcm90b3R5cGUubWFwQ29tbWFuZCA9IGZ1bmN0aW9uICh0eXBlLCBjbWQpIHtcclxuICAgICAgICB0aGlzLl9vYnNlcnZhYmxlLm1hcENvbW1hbmQodHlwZSwgY21kKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOazqOmUgOWRveS7pFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIOimgeazqOmUgOeahOa2iOaBr+exu+Wei1xyXG4gICAgICogQHBhcmFtIHsoSUNvbW1hbmRDb25zdHJ1Y3Rvcil9IGNtZCDlkb3ku6TlpITnkIblmahcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICogQG1lbWJlcm9mIE1vZHVsZVxyXG4gICAgICovXHJcbiAgICBNb2R1bGUucHJvdG90eXBlLnVubWFwQ29tbWFuZCA9IGZ1bmN0aW9uICh0eXBlLCBjbWQpIHtcclxuICAgICAgICB0aGlzLl9vYnNlcnZhYmxlLnVubWFwQ29tbWFuZCh0eXBlLCBjbWQpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog6ZSA5q+B5qih5Z2X77yM5Y+v5Lul6YeN5YaZXHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlcm9mIE1vZHVsZVxyXG4gICAgICovXHJcbiAgICBNb2R1bGUucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2Rpc3Bvc2VkKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgLy8g6LCD55So5qih5p2/5pa55rOVXHJcbiAgICAgICAgdGhpcy5vbkRpc3Bvc2UoKTtcclxuICAgICAgICAvLyDlhbPpl63oh6rouqtcclxuICAgICAgICB2YXIgY2xzID0gZ2V0Q29uc3RydWN0b3IodGhpcy5jb25zdHJ1Y3Rvcik7XHJcbiAgICAgICAgbW9kdWxlTWFuYWdlci5jbG9zZShjbHMpO1xyXG4gICAgICAgIC8vIOWmguaenOayoeWFs+S4iuWImeS4jemUgOavgVxyXG4gICAgICAgIGlmIChtb2R1bGVNYW5hZ2VyLmlzT3BlbmVkKGNscykpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAvLyDlsIbmiYDmnInlt7LmiZjnrqHnmoTkuK3ku4vogIXplIDmr4FcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fbWVkaWF0b3JzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBtZWRpYXRvciA9IHRoaXMuX21lZGlhdG9ycy5wb3AoKTtcclxuICAgICAgICAgICAgdGhpcy51bmRlbGVnYXRlTWVkaWF0b3IobWVkaWF0b3IpO1xyXG4gICAgICAgICAgICBtZWRpYXRvci5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOmUgOavgU9ic2VydmFibGXlrp7kvotcclxuICAgICAgICB0aGlzLl9vYnNlcnZhYmxlLmRpc3Bvc2UoKTtcclxuICAgICAgICB0aGlzLl9vYnNlcnZhYmxlID0gbnVsbDtcclxuICAgICAgICAvLyDorrDlvZVcclxuICAgICAgICB0aGlzLl9kaXNwb3NlZCA9IHRydWU7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDlvZPplIDmr4Hml7bosIPnlKhcclxuICAgICAqXHJcbiAgICAgKiBAbWVtYmVyb2YgTWVkaWF0b3JcclxuICAgICAqL1xyXG4gICAgTW9kdWxlLnByb3RvdHlwZS5vbkRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8g5Y+v6YeN5YaZXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE1vZHVsZTtcclxufSgpKTtcclxuZXhwb3J0IGRlZmF1bHQgTW9kdWxlO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9lbmdpbmUvbW9kdWxlL01vZHVsZS5qc1xuLy8gbW9kdWxlIGlkID0gMzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbmltcG9ydCBEYXRhVHlwZSBmcm9tIFwiLi9EYXRhVHlwZVwiO1xyXG52YXIgUmVzcG9uc2VEYXRhID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFJlc3BvbnNlRGF0YSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFJlc3BvbnNlRGF0YSgpIHtcclxuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUmVzcG9uc2VEYXRhO1xyXG59KERhdGFUeXBlKSk7XHJcbmV4cG9ydCBkZWZhdWx0IFJlc3BvbnNlRGF0YTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL25ldC9SZXNwb25zZURhdGEuanNcbi8vIG1vZHVsZSBpZCA9IDM0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0wOS0xMVxyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0wOS0xMVxyXG4gKlxyXG4gKiDor7fmsYLmiJbov5Tlm57mlbDmja7nu5PmnoTkvZNcclxuKi9cclxudmFyIERhdGFUeXBlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRGF0YVR5cGUoKSB7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOino+aekOWQjuerr+i/lOWbnueahEpTT07lr7nosaHvvIznlJ/miJDnu5PmnoTkvZNcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge2FueX0gZGF0YSDlkI7nq6/ov5Tlm57nmoRKU09O5a+56LGhXHJcbiAgICAgKiBAcmV0dXJucyB7RGF0YVR5cGV9IOe7k+aehOS9k+WvueixoVxyXG4gICAgICogQG1lbWJlcm9mIERhdGFUeXBlXHJcbiAgICAgKi9cclxuICAgIERhdGFUeXBlLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5fX3Jhd0RhdGEgPSB0aGlzLmRvUGFyc2UoZGF0YSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIERhdGFUeXBlO1xyXG59KCkpO1xyXG5leHBvcnQgZGVmYXVsdCBEYXRhVHlwZTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL25ldC9EYXRhVHlwZS5qc1xuLy8gbW9kdWxlIGlkID0gMzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IHsgYmluZE1hbmFnZXIgfSBmcm9tIFwiLi4vYmluZC9CaW5kTWFuYWdlclwiO1xyXG5mdW5jdGlvbiBnZXRCaW5kUGFyYW1zKHRhcmdldCkge1xyXG4gICAgdmFyIGJpbmRQYXJhbXMgPSB0YXJnZXQuX19iaW5kX2NvbW1hbmRzX187XHJcbiAgICBpZiAoIWJpbmRQYXJhbXMpIHtcclxuICAgICAgICBiaW5kUGFyYW1zID0gW107XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgXCJfX2JpbmRfY29tbWFuZHNfX1wiLCB7XHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICB2YWx1ZTogYmluZFBhcmFtc1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGJpbmRQYXJhbXM7XHJcbn1cclxuLyoqXHJcbiAqIOa3u+WKoOe8luivkeWRveS7pOWIsOaYvuekuuWvueixoeS4iu+8iOato+WQke+8iVxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBwYXJhbSB7SUNvbXBpbGVUYXJnZXR9IHRhcmdldCDmmL7npLrlr7nosaFcclxuICogQHBhcmFtIHtJQmluZENvbW1hbmR9IGNtZCDlkb3ku6Tlh73mlbBcclxuICogQHBhcmFtIHsuLi5hbnlbXX0gYXJncyDlkb3ku6Tlj4LmlbDliJfooahcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwdXNoQ29tcGlsZUNvbW1hbmQodGFyZ2V0LCBjbWQpIHtcclxuICAgIHZhciBhcmdzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICAvLyDmt7vliqDnvJbor5HmjIfku6RcclxuICAgIGdldEJpbmRQYXJhbXModGFyZ2V0KS5wdXNoKHsgY21kOiBjbWQsIGFyZ3M6IGFyZ3MgfSk7XHJcbn1cclxuLyoqXHJcbiAqIOa3u+WKoOe8luivkeWRveS7pOWIsOaYvuekuuWvueixoeS4iu+8iOWPjeWQke+8iVxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBwYXJhbSB7SUNvbXBpbGVUYXJnZXR9IHRhcmdldCDmmL7npLrlr7nosaFcclxuICogQHBhcmFtIHtJQmluZENvbW1hbmR9IGNtZCDlkb3ku6Tlh73mlbBcclxuICogQHBhcmFtIHsuLi5hbnlbXX0gYXJncyDlkb3ku6Tlj4LmlbDliJfooahcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1bnNoaWZ0Q29tcGlsZUNvbW1hbmQodGFyZ2V0LCBjbWQpIHtcclxuICAgIHZhciBhcmdzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBnZXRCaW5kUGFyYW1zKHRhcmdldCkudW5zaGlmdCh7IGNtZDogY21kLCBhcmdzOiBhcmdzIH0pO1xyXG59XHJcbi8qKlxyXG4gKiDnvJbor5HmmL7npLrlr7nosaHvvIzkvJrlhYjnvJbor5Hoh6rouqvvvIznhLblkI7lho3pgJLlvZLnvJbor5HlrZDlr7nosaFcclxuICpcclxuICogQGV4cG9ydFxyXG4gKiBAcGFyYW0ge0lNZWRpYXRvcn0gbWVkaWF0b3Ig5pi+56S65a+56LGh5omA5bGe55qE5Lit5LuL6ICFXHJcbiAqIEBwYXJhbSB7SUNvbXBpbGVUYXJnZXR9IHRhcmdldCDmmL7npLrlr7nosaFcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb21waWxlKG1lZGlhdG9yLCB0YXJnZXQpIHtcclxuICAgIC8vIOWPluWIsOe8luivkeWPguaVsOWIl+ihqFxyXG4gICAgdmFyIGJpbmRQYXJhbXMgPSB0YXJnZXQuX19iaW5kX2NvbW1hbmRzX187XHJcbiAgICAvLyDnvJbor5F0YXJnZXToh6rouqtcclxuICAgIGlmIChiaW5kUGFyYW1zKSB7XHJcbiAgICAgICAgLy8g6L+Z6YeM5rKh5pyJ5o+Q5YmN6K+75Y+W5Ye6bGVuZ3Ro5bGe5oCn77yM5Zug5Li66ZyA6KaB5Yqo5oCB5Yik5pat5pWw57uE6ZW/5bqmXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiaW5kUGFyYW1zLmxlbmd0aDspIHtcclxuICAgICAgICAgICAgLy8g5L2/55Soc2hpZnTmjInpobrluo/lj5blh7rnvJbor5Hlkb3ku6RcclxuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IGJpbmRQYXJhbXMuc2hpZnQoKTtcclxuICAgICAgICAgICAgLy8g6LCD55So57yW6K+R5ZG95Luk77yM5bm25LiU5pu05paw5Lit5q2i54q25oCBXHJcbiAgICAgICAgICAgIHBhcmFtcy5jbWQuYXBwbHkocGFyYW1zLCBbbWVkaWF0b3IsIHRhcmdldF0uY29uY2F0KHBhcmFtcy5hcmdzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiDnvJbor5FiaW5kVmFsdWXlkb3ku6TvvIzkuI3kvJrkuK3mraLnvJbor5FcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb21waWxlVmFsdWUobWVkaWF0b3IsIHRhcmdldCwgbmFtZSwgZXhwKSB7XHJcbiAgICBiaW5kTWFuYWdlci5iaW5kVmFsdWUobWVkaWF0b3IsIHRhcmdldCwgbmFtZSwgZXhwKTtcclxufVxyXG4vKipcclxuICog57yW6K+RYmluZEZ1bmPlkb3ku6TvvIzkuI3kvJrkuK3mraLnvJbor5FcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb21waWxlRnVuYyhtZWRpYXRvciwgdGFyZ2V0LCBuYW1lKSB7XHJcbiAgICB2YXIgYXJnRXhwcyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAzOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhcmdFeHBzW19pIC0gM10gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgYmluZE1hbmFnZXIuYmluZEZ1bmMuYXBwbHkoYmluZE1hbmFnZXIsIFttZWRpYXRvciwgdGFyZ2V0LCBuYW1lXS5jb25jYXQoYXJnRXhwcykpO1xyXG59XHJcbi8qKlxyXG4gKiDnvJbor5FiaW5kT27lkb3ku6TvvIzkuI3kvJrkuK3mraLnvJbor5FcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb21waWxlT24obWVkaWF0b3IsIHRhcmdldCwgdHlwZSwgZXhwKSB7XHJcbiAgICBiaW5kTWFuYWdlci5iaW5kT24obWVkaWF0b3IsIHRhcmdldCwgdHlwZSwgZXhwKTtcclxufVxyXG4vKipcclxuICog57yW6K+RYmluZElm5ZG95Luk77yM5Lya5Lit5q2i57yW6K+R77yM55u05Yiw5Yik5pat5p2h5Lu25Li6dHJ1ZeaXtuaJjeS8muWQr+WKqOS7pee7p+e7ree8luivkVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGVJZihtZWRpYXRvciwgdGFyZ2V0LCBleHApIHtcclxuICAgIC8vIOWwhuWQjumdoueahOe8luivkeWRveS7pOe8k+WtmOi1t+adpVxyXG4gICAgdmFyIGJpbmRQYXJhbXMgPSB0YXJnZXQuX19iaW5kX2NvbW1hbmRzX187XHJcbiAgICB2YXIgY2FjaGVkID0gYmluZFBhcmFtcy5zcGxpY2UoMCwgYmluZFBhcmFtcy5sZW5ndGgpO1xyXG4gICAgLy8g57uR5a6aaWblkb3ku6RcclxuICAgIHZhciB0ZXJtaW5hdGVkID0gZmFsc2U7XHJcbiAgICBiaW5kTWFuYWdlci5iaW5kSWYobWVkaWF0b3IsIHRhcmdldCwgZXhwLCBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAvLyDlpoLmnpzmnaHku7bkuLp0cnVl77yM5YiZ5ZCv5Yqo57un57ut57yW6K+R77yM5L2G5Y+q57yW6K+R5LiA5qyh77yM57yW6K+R6L+H5bCx5LiN6ZyA6KaB5YaN57yW6K+R5LqGXHJcbiAgICAgICAgaWYgKCF0ZXJtaW5hdGVkICYmIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIC8vIOaBouWkjeWQjumdoueahOWRveS7pFxyXG4gICAgICAgICAgICB0YXJnZXQuX19iaW5kX2NvbW1hbmRzX18gPSBjYWNoZWQ7XHJcbiAgICAgICAgICAgIC8vIOe7p+e7ree8luivkVxyXG4gICAgICAgICAgICBjb21waWxlKG1lZGlhdG9yLCB0YXJnZXQpO1xyXG4gICAgICAgICAgICAvLyDorr7nva7lt7Lnu4jnu5PmoIfor4ZcclxuICAgICAgICAgICAgdGVybWluYXRlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIOe8luivkWJpbmRGb3Llkb3ku6TvvIzkvJrkuK3mraLnvJbor5HvvIznm7TliLDnlJ/miJDmlrDnmoRyZW5kZXJlcuWunuS+i+aXtuaJjeS8mue7p+e7ree8luivkeaWsOWunuS+i1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGVGb3IobWVkaWF0b3IsIHRhcmdldCwgZXhwKSB7XHJcbiAgICAvLyDlsIblkI7pnaLnmoTnvJbor5Hlkb3ku6TnvJPlrZjotbfmnaVcclxuICAgIHZhciBsZWZ0SGFuZGxlcnMgPSB0YXJnZXQuX19zdG9wX2xlZnRfaGFuZGxlcnNfXztcclxuICAgIC8vIOe7keWummlm5ZG95LukXHJcbiAgICBiaW5kTWFuYWdlci5iaW5kRm9yKG1lZGlhdG9yLCB0YXJnZXQsIGV4cCwgZnVuY3Rpb24gKGRhdGEsIHJlbmRlcmVyKSB7XHJcbiAgICAgICAgdmFyIHN1YkxlZnRIYW5kbGVycyA9IGxlZnRIYW5kbGVycy5jb25jYXQoKTtcclxuICAgICAgICB2YXIgYmluZFRhcmdldHMgPSBbXTtcclxuICAgICAgICAvLyDpkojlr7nmr4/kuIDkuKpyZW5kZXJlcui1i+WAvOWQjue7ree8luivkeaMh+S7pFxyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgc3ViTGVmdEhhbmRsZXJzXzEgPSBzdWJMZWZ0SGFuZGxlcnM7IF9pIDwgc3ViTGVmdEhhbmRsZXJzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBsZWZ0SGFuZGxlciA9IHN1YkxlZnRIYW5kbGVyc18xW19pXTtcclxuICAgICAgICAgICAgbGVmdEhhbmRsZXIocmVuZGVyZXIsIGJpbmRUYXJnZXRzLCBzdWJMZWZ0SGFuZGxlcnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDnvJbor5FyZW5kZXJlcuWunuS+i1xyXG4gICAgICAgIGZvciAodmFyIGRlcHRoIGluIGJpbmRUYXJnZXRzKSB7XHJcbiAgICAgICAgICAgIHZhciBkaWN0ID0gYmluZFRhcmdldHNbZGVwdGhdO1xyXG4gICAgICAgICAgICBkaWN0LmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkgeyByZXR1cm4gY29tcGlsZShtZWRpYXRvciwgdGFyZ2V0KTsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIOe8luivkWJpbmRNZXNzYWdl5ZG95Luk77yM5LiN5Lya5Lit5q2i57yW6K+RXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29tcGlsZU1lc3NhZ2UobWVkaWF0b3IsIHRhcmdldCwgdHlwZSwgbmFtZSwgZXhwLCBvYnNlcnZhYmxlKSB7XHJcbiAgICBiaW5kTWFuYWdlci5iaW5kTWVzc2FnZShtZWRpYXRvciwgdGFyZ2V0LCB0eXBlLCBuYW1lLCBleHAsIG9ic2VydmFibGUpO1xyXG59XHJcbi8qKlxyXG4gKiDnvJbor5FiaW5kUmVzcG9uc2Xlkb3ku6TvvIzkuI3kvJrkuK3mraLnvJbor5FcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb21waWxlUmVzcG9uc2UobWVkaWF0b3IsIHRhcmdldCwgdHlwZSwgbmFtZSwgZXhwLCBvYnNlcnZhYmxlKSB7XHJcbiAgICBiaW5kTWFuYWdlci5iaW5kUmVzcG9uc2UobWVkaWF0b3IsIHRhcmdldCwgdHlwZSwgbmFtZSwgZXhwLCBvYnNlcnZhYmxlKTtcclxufVxyXG4vKipcclxuICog5pCc57SiVUnvvIzlj5bliLDnm67moIfoioLngrnvvIzmiafooYzlm57osINcclxuICpcclxuICogQGV4cG9ydFxyXG4gKiBAcGFyYW0geyp9IHZhbHVlcyDlgLznu5PmnoTlrZflhbhcclxuICogQHBhcmFtIHsqfSB1aSB1aeWunuS9k1xyXG4gKiBAcGFyYW0geyh1aTphbnksIGtleTpzdHJpbmcsIHZhbHVlOmFueSwgZGVwdGg/Om51bWJlcik9PnZvaWR9IGNhbGxiYWNrIOWbnuiwg1xyXG4gKiBAcGFyYW0ge251bWJlcn0gW2RlcHRoPTBdIOmBjeWOhua3seW6pu+8jOaWueazleS8mue7p+e7reWinuWKoOi/meS4qua3seW6plxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNlYXJjaFVJKHZhbHVlcywgdWksIGNhbGxiYWNrLCBkZXB0aCkge1xyXG4gICAgaWYgKGRlcHRoID09PSB2b2lkIDApIHsgZGVwdGggPSAwOyB9XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWVzKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gdmFsdWVzW2tleV07XHJcbiAgICAgICAgdmFyIGluZGV4ID0ga2V5LmluZGV4T2YoXCIuXCIpO1xyXG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XHJcbiAgICAgICAgICAgIC8vIOaYr+ihqOi+vuW8j+Wvu+WdgO+8jOmAkuW9kuWvu+WdgFxyXG4gICAgICAgICAgICB2YXIgbmV3VmFsdWUgPSB7fTtcclxuICAgICAgICAgICAgbmV3VmFsdWVba2V5LnN1YnN0cihpbmRleCArIDEpXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICBzZWFyY2hVSShuZXdWYWx1ZSwgdWlba2V5LnN1YnN0cmluZygwLCBpbmRleCldLCBjYWxsYmFjaywgZGVwdGggKyAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09IFwib2JqZWN0XCIgJiYgISh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICAgICAgICAvLyDmmK/lrZDlr7nosaHlr7vlnYDvvIzpgJLlvZLlr7vlnYBcclxuICAgICAgICAgICAgc2VhcmNoVUkodmFsdWUsIHVpW2tleV0sIGNhbGxiYWNrLCBkZXB0aCArIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8g5piv6KGo6L6+5byP77yM6LCD55So5Zue6LCD77yM5bCG6LCD55So5bGC57qn5Lmf5Lyg6YCS5Zue5Y67XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKHVpLCBrZXksIHZhbHVlLCBkZXB0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2VuZ2luZS9pbmplY3Rvci9CaW5kVXRpbC5qc1xuLy8gbW9kdWxlIGlkID0gMzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbmRlZmluZShbXCJyZXF1aXJlXCIsIFwiZXhwb3J0c1wiLCBcIi4uL3R5cGUvVGVzdFwiLCBcIm9seW1wdXMtci9lbmdpbmUvbmV0L1Jlc3BvbnNlRGF0YVwiLCBcIm9seW1wdXMtci9lbmdpbmUvbmV0L05ldE1hbmFnZXJcIl0sIGZ1bmN0aW9uIChyZXF1aXJlLCBleHBvcnRzLCBUZXN0XzEsIFJlc3BvbnNlRGF0YV8xLCBOZXRNYW5hZ2VyXzEpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAYXV0aG9yIFRlbXBsYXRlR2VuZXJhdG9yXHJcbiAgICAgKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gICAgICogQG1vZGlmeSBkYXRlIDEwLzkvMjAxN1xyXG4gICAgICpcclxuICAgICAqIOa1i+ivlVxyXG4gICAgKi9cclxuICAgIHZhciBUZXN0UmVzcG9uc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKFRlc3RSZXNwb25zZSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBUZXN0UmVzcG9uc2UoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRlc3RSZXNwb25zZS5wcm90b3R5cGUsIFwiX19wYXJhbXNcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJUZXN0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvdG9jb2w6IFwiaHR0cFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIlxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgO1xyXG4gICAgICAgIFRlc3RSZXNwb25zZS5wcm90b3R5cGUuZG9QYXJzZSA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIHRoaXMuX19wYXJhbXMuc3VjY2VzcyA9IGRhdGEuc3VjY2VzcztcclxuICAgICAgICAgICAgdGhpcy50ZXN0ID0gbmV3IFRlc3RfMS5kZWZhdWx0KCkucGFyc2UoZGF0YS50ZXN0KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFRlc3RSZXNwb25zZS5wcm90b3R5cGUucGFjayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHRlc3Q6IHRoaXMudGVzdC5wYWNrKClcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFRlc3RSZXNwb25zZS50eXBlID0gXCJUZXN0XCI7XHJcbiAgICAgICAgcmV0dXJuIFRlc3RSZXNwb25zZTtcclxuICAgIH0oUmVzcG9uc2VEYXRhXzEuZGVmYXVsdCkpO1xyXG4gICAgZXhwb3J0cy5kZWZhdWx0ID0gVGVzdFJlc3BvbnNlO1xyXG4gICAgLyoqIOazqOWGjOi/lOWbnuS9kyAqL1xyXG4gICAgTmV0TWFuYWdlcl8xLm5ldE1hbmFnZXIucmVnaXN0ZXJSZXNwb25zZShUZXN0UmVzcG9uc2UpO1xyXG59KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pVkdWemRGSmxjM0J2Ym5ObExtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpVkdWemRGSmxjM0J2Ym5ObExuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdPenM3U1VGSlFUczdPenM3TzAxQlRVVTdTVUZEUmp0UlFVRXdReXhuUTBGQldUdFJRVUYwUkRzN1VVRnJRMEVzUTBGQlF6dFJRWGhDUnl4elFrRkJWeXhyUTBGQlVUdHBRa0ZCYmtJN1owSkJSVWtzVFVGQlRTeERRVUZETzI5Q1FVTklMRWxCUVVrc1JVRkJSU3hOUVVGTk8yOUNRVU5hTEZGQlFWRXNSVUZCUlN4TlFVRk5PMjlDUVVOb1FpeE5RVUZOTEVWQlFVVXNTMEZCU3p0cFFrRkRhRUlzUTBGQlF6dFpRVU5PTEVOQlFVTTdPenRYUVVGQk8xRkJRVUVzUTBGQlF6dFJRVWxSTERoQ1FVRlBMRWRCUVdwQ0xGVkJRV3RDTEVsQlFWRTdXVUZGZEVJc1JVRkJSU3hEUVVGQkxFTkJRVU1zU1VGQlNTeEpRVUZKTEVsQlFVa3NRMEZCUXp0blFrRkJReXhOUVVGTkxFTkJRVU03V1VGRGVFSXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhQUVVGUExFZEJRVWNzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXp0WlFVTnlReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZUTEVsQlFVa3NZMEZCU1N4RlFVRkZMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTnNSQ3hEUVVGRE8xRkJSVTBzTWtKQlFVa3NSMEZCV0R0WlFVVkpMRTFCUVUwc1EwRkJRenRuUWtGRFNDeEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVU3WVVGRGVrSXNRMEZCUXp0UlFVTk9MRU5CUVVNN1VVRmtZU3hwUWtGQlNTeEhRVUZWTEUxQlFVMHNRMEZCUXp0UlFXVjJReXh0UWtGQlF6dExRVUZCTEVGQmJFTkVMRU5CUVRCRExITkNRVUZaTEVkQmEwTnlSRHR6UWtGc1EyOUNMRmxCUVZrN1NVRnZRMnBETEZsQlFWazdTVUZEV2l4MVFrRkJWU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGREluMD1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Rlc3QvbmV0L3Jlc3BvbnNlL1Rlc3RSZXNwb25zZS50c1xuLy8gbW9kdWxlIGlkID0gMzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbmltcG9ydCB7IGNvcmUgfSBmcm9tIFwiLi4vLi4vY29yZS9Db3JlXCI7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiLi4vLi4vY29yZS9pbmplY3Rvci9JbmplY3RvclwiO1xyXG4vKipcclxuICogQGF1dGhvciBSYXlraWRcclxuICogQGVtYWlsIGluaXRpYWxfckBxcS5jb21cclxuICogQGNyZWF0ZSBkYXRlIDIwMTctMDktMDZcclxuICogQG1vZGlmeSBkYXRlIDIwMTctMDktMDZcclxuICpcclxuICogSGFzaOexu+aYr+WcsOWdgOi3r+eUse+8iOe9kemhteWTiOW4jO+8ieeuoeeQhuWZqO+8jOinhOWumuWTiOW4jOagvOW8j+S4uu+8miNb5qih5Z2X5ZCNXT9b5Y+C5pWw5ZCNXT1b5Y+C5pWw5YC8XSZb5Y+C5pWw5ZCNXT1b5Y+C5pWw5YC8XSYuLi5cclxuKi9cclxudmFyIEhhc2ggPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBIYXNoKCkge1xyXG4gICAgICAgIHRoaXMuX3BhcmFtcyA9IHt9O1xyXG4gICAgICAgIHRoaXMuX2RpcmVjdCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2tlZXBIYXNoID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5faGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xyXG4gICAgICAgIHZhciByZWcgPSAvIyhbXlxcPyZdKykoXFw/KFteXFw/Jj1dKz1bXlxcPyY9XSspKCYoW15cXD8mPV0rPVteXFw/Jj1dKykpKik/LztcclxuICAgICAgICB2YXIgcmVzdWx0ID0gcmVnLmV4ZWModGhpcy5faGFzaCk7XHJcbiAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAvLyDop6PmnpDmqKHlnZflkI3np7BcclxuICAgICAgICAgICAgdGhpcy5fbW9kdWxlTmFtZSA9IHJlc3VsdFsxXTtcclxuICAgICAgICAgICAgLy8g6Kej5p6Q5qih5Z2X5Y+C5pWwXHJcbiAgICAgICAgICAgIHZhciBwYXJhbXNTdHIgPSByZXN1bHRbMl07XHJcbiAgICAgICAgICAgIGlmIChwYXJhbXNTdHIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zU3RyID0gcGFyYW1zU3RyLnN1YnN0cigxKTtcclxuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSBwYXJhbXNTdHIuc3BsaXQoXCImXCIpO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHBhcmFtcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYWlyID0gcGFyYW1zW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYWlyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXAgPSBwYWlyLnNwbGl0KFwiPVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g6ZSu5ZKM5YC86YO96KaB5YGa5LiA5qyhVVJM6Kej56CBXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBkZWNvZGVVUklDb21wb25lbnQodGVtcFswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudCh0ZW1wWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGFyYW1zW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8g5aSE55CGZGlyZWN05Y+C5pWwXHJcbiAgICAgICAgICAgIHRoaXMuX2RpcmVjdCA9ICh0aGlzLl9wYXJhbXMuZGlyZWN0ID09IFwidHJ1ZVwiKTtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3BhcmFtcy5kaXJlY3Q7XHJcbiAgICAgICAgICAgIC8vIOWkhOeQhmtlZXBIYXNo5Y+C5pWwXHJcbiAgICAgICAgICAgIHRoaXMuX2tlZXBIYXNoID0gKHRoaXMuX3BhcmFtcy5rZWVwSGFzaCA9PSBcInRydWVcIik7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9wYXJhbXMua2VlcEhhc2g7XHJcbiAgICAgICAgICAgIC8vIOWmguaenGtlZXBIYXNo5LiN5pivdHJ1Ze+8jOWImeenu+mZpOWTiOW4jOWAvFxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2tlZXBIYXNoKVxyXG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBcIlwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShIYXNoLnByb3RvdHlwZSwgXCJoYXNoXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDojrflj5bljp/lp4vnmoTlk4jluIzlrZfnrKbkuLJcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEByZWFkb25seVxyXG4gICAgICAgICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICAgICAgICogQG1lbWJlcm9mIEhhc2hcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhc2g7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSGFzaC5wcm90b3R5cGUsIFwibW9kdWxlTmFtZVwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6I635Y+W5qih5Z2X5ZCNXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcmVhZG9ubHlcclxuICAgICAgICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBIYXNoXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb2R1bGVOYW1lO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEhhc2gucHJvdG90eXBlLCBcInBhcmFtc1wiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6I635Y+W5Lyg6YCS57uZ5qih5Z2X55qE5Y+C5pWwXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcmVhZG9ubHlcclxuICAgICAgICAgKiBAdHlwZSB7e1trZXk6c3RyaW5nXTpzdHJpbmd9fVxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBIYXNoXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYXJhbXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSGFzaC5wcm90b3R5cGUsIFwiZGlyZWN0XCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDojrflj5bmmK/lkKbnm7TmjqXot7PovazmqKHlnZdcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEByZWFkb25seVxyXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBIYXNoXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kaXJlY3Q7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSGFzaC5wcm90b3R5cGUsIFwia2VlcEhhc2hcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPluaYr+WQpuS/neaMgeWTiOW4jOWAvFxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJlYWRvbmx5XHJcbiAgICAgICAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICAgICAgICogQG1lbWJlcm9mIEhhc2hcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2tlZXBIYXNoO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bmjIflrprlk4jluIzlj4LmlbBcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IOWPguaVsOWQjVxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30g5Y+C5pWw5YC8XHJcbiAgICAgKiBAbWVtYmVyb2YgSGFzaFxyXG4gICAgICovXHJcbiAgICBIYXNoLnByb3RvdHlwZS5nZXRQYXJhbSA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcGFyYW1zW2tleV07XHJcbiAgICB9O1xyXG4gICAgSGFzaCA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIEluamVjdGFibGUsXHJcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtdKVxyXG4gICAgXSwgSGFzaCk7XHJcbiAgICByZXR1cm4gSGFzaDtcclxufSgpKTtcclxuZXhwb3J0IGRlZmF1bHQgSGFzaDtcclxuLyoqIOWGjemineWkluWvvOWHuuS4gOS4quWNleS+iyAqL1xyXG5leHBvcnQgdmFyIGhhc2ggPSBjb3JlLmdldEluamVjdChIYXNoKTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL2Vudi9IYXNoLmpzXG4vLyBtb2R1bGUgaWQgPSAzOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgeyBhc3NldHNNYW5hZ2VyIH0gZnJvbSBcIm9seW1wdXMtci9lbmdpbmUvYXNzZXRzL0Fzc2V0c01hbmFnZXJcIjtcclxuLyoqXHJcbiAqIEBhdXRob3IgUmF5a2lkXHJcbiAqIEBlbWFpbCBpbml0aWFsX3JAcXEuY29tXHJcbiAqIEBjcmVhdGUgZGF0ZSAyMDE3LTEwLTI2XHJcbiAqIEBtb2RpZnkgZGF0ZSAyMDE3LTEwLTI2XHJcbiAqXHJcbiAqIOS4ukRPTeaPkOS+m+earuiCpOi9rOaNoueahOW3peWFt+mbhlxyXG4qL1xyXG4vKipcclxuICog5Li65Lit5LuL6ICF5YyF6KOF55qu6IKkXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQHBhcmFtIHtJTWVkaWF0b3J9IG1lZGlhdG9yIOS4reS7i+iAhVxyXG4gKiBAcGFyYW0geyhIVE1MRWxlbWVudHxzdHJpbmd8c3RyaW5nW10pfSBza2luIOearuiCpO+8jOWPr+S7peaYr0hUTUxFbGVtZW5077yM5Lmf5Y+v5Lul5piv55qu6IKk5a2X56ym5Liy77yM5Lmf5Y+v5Lul5piv55qu6IKk5qih5p2/5Zyw5Z2A5oiW5Zyw5Z2A5pWw57uEXHJcbiAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH0g55qu6IKk55qESFRNTEVsZW1lbnTlvaLlvI/vvIzlj6/og73kvJrnqI3lkI7lho3loavlhYXlhoXlrrnvvIzlpoLmnpzmg7PlnKjnmq7ogqTliqDovb3lrozmr5XlkI7lho3mi7/liLDnmq7ogqTor7fkvb/nlKhjb21wbGV0ZeWPguaVsFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBTa2luKG1lZGlhdG9yLCBza2luKSB7XHJcbiAgICB2YXIgcmVzdWx0O1xyXG4gICAgaWYgKHNraW4gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xyXG4gICAgICAgIHJlc3VsdCA9IHNraW47XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyDnlJ/miJDkuIDkuKrkuLTml7bnmoRkaXZcclxuICAgICAgICByZXN1bHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIC8vIOevoeaUuW1lZGlhdG9y55qEb25PcGVu5pa55rOV77yM5YWI5LqOb25PcGVu5bCG55qu6IKk6ZmE5LiK5Y67XHJcbiAgICAgICAgdmFyIG9yaUZ1bmMgPSBtZWRpYXRvci5oYXNPd25Qcm9wZXJ0eShcIm9uT3BlblwiKSA/IG1lZGlhdG9yLm9uT3BlbiA6IG51bGw7XHJcbiAgICAgICAgbWVkaWF0b3Iub25PcGVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChza2luIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIC8vIOaYr+aVsOe7hO+8jOWwhuaJgOacieWGheWuuei/nuaOpei1t+adpeWGjeS4gOi1t+i1i+WAvFxyXG4gICAgICAgICAgICAgICAgc2tpbiA9IHNraW4ubWFwKGdldENvbnRlbnQpLmpvaW4oXCJcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8g6LWL5YC855qu6IKk5YaF5a65XHJcbiAgICAgICAgICAgIHJlc3VsdC5pbm5lckhUTUwgPSBza2luO1xyXG4gICAgICAgICAgICAvLyDmi7fotJ3lvJXnlKhcclxuICAgICAgICAgICAgZG9Db3B5UmVmKHJlc3VsdCwgc2tpbiwgbWVkaWF0b3IpO1xyXG4gICAgICAgICAgICAvLyDmgaLlpI3ljp/lp4vmlrnms5VcclxuICAgICAgICAgICAgaWYgKG9yaUZ1bmMpXHJcbiAgICAgICAgICAgICAgICBtZWRpYXRvci5vbk9wZW4gPSBvcmlGdW5jO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBkZWxldGUgbWVkaWF0b3Iub25PcGVuO1xyXG4gICAgICAgICAgICAvLyDosIPnlKjljp/lp4vmlrnms5VcclxuICAgICAgICAgICAgbWVkaWF0b3Iub25PcGVuLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvLyDotYvlgLznmq7ogqRcclxuICAgIG1lZGlhdG9yLnNraW4gPSByZXN1bHQ7XHJcbiAgICAvLyDlkIzmraXov5Tlm57nmq7ogqRcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuLyoqXHJcbiAqIOWwhmZyb23kuK3nmoTmiYDmnInmi6XmnIlpZOWxnuaAp+eahOiKgueCueW8leeUqOWkjeWItuWIsHRv5a+56LGh5LiKXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZnJvbSDlpI3liLbmupBET03oioLngrlcclxuICogQHBhcmFtIHsqfSB0byDlpI3liLbnm67moIflr7nosaFcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb3B5UmVmKGZyb20sIHRvKSB7XHJcbiAgICBkb0NvcHlSZWYoZnJvbSwgZnJvbS5pbm5lckhUTUwsIHRvKTtcclxufVxyXG5mdW5jdGlvbiBkb0NvcHlSZWYoZnJvbUVsZSwgZnJvbVN0ciwgdG8pIHtcclxuICAgIC8vIOS9v+eUqOato+WImeihqOi+vuW8j+WwhuaLpeaciWlk55qE6IqC54K56LWL5YC857uZbWVkaWF0b3JcclxuICAgIHZhciByZWcgPSAvaWQ9KFwiKFteXCJdKylcInwnKFteJ10rKScpL2c7XHJcbiAgICB2YXIgcmVzO1xyXG4gICAgd2hpbGUgKHJlcyA9IHJlZy5leGVjKGZyb21TdHIpKSB7XHJcbiAgICAgICAgdmFyIGlkID0gcmVzWzJdIHx8IHJlc1szXTtcclxuICAgICAgICB0b1tpZF0gPSBmcm9tRWxlLnF1ZXJ5U2VsZWN0b3IoXCIjXCIgKyBpZCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ2V0Q29udGVudChza2luKSB7XHJcbiAgICBpZiAoc2tpbi5pbmRleE9mKFwiPFwiKSA+PSAwICYmIHNraW4uaW5kZXhPZihcIj5cIikgPj0gMCkge1xyXG4gICAgICAgIC8vIOaYr+earuiCpOWtl+espuS4su+8jOebtOaOpei/lOWbnlxyXG4gICAgICAgIHJldHVybiBza2luO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8g5piv55qu6IKk6Lev5b6E5oiW6Lev5b6E55+t5ZCN56ew77yM6I635Y+W5ZCO6L+U5ZueXHJcbiAgICAgICAgcmV0dXJuIGFzc2V0c01hbmFnZXIuZ2V0QXNzZXRzKHNraW4pO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yLWRvbS9kb20vdXRpbHMvU2tpblV0aWwuanNcbi8vIG1vZHVsZSBpZCA9IDM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwib2x5bXB1cy1yXCIvPlxyXG4vLy8gPHJlZmVyZW5jZSB0eXBlcz1cIm9seW1wdXMtci1kb21cIi8+XHJcbi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwib2x5bXB1cy1yLWVncmV0XCIvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9lZ3JldC9saWJzL21vZHVsZXMvZWdyZXQvZWdyZXQuZC50c1wiLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vZWdyZXQvbGlicy9tb2R1bGVzL3Jlcy9yZXMuZC50c1wiLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vZWdyZXQvbGlicy9tb2R1bGVzL2V1aS9ldWkuZC50c1wiLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vZWdyZXQvbGlicy9tb2R1bGVzL3R3ZWVuL3R3ZWVuLmQudHNcIi8+XHJcbmRlZmluZShbXCJyZXF1aXJlXCIsIFwiZXhwb3J0c1wiLCBcIi4vbW9kdWxlcy9GaXJzdE1vZHVsZVwiLCBcIm9seW1wdXMtci9PbHltcHVzXCIsIFwib2x5bXB1cy1yL2VuZ2luZS9lbnYvRW52aXJvbm1lbnRcIiwgXCJvbHltcHVzLXItZG9tL0RPTUJyaWRnZVwiLCBcIm9seW1wdXMtci1lZ3JldC9FZ3JldEJyaWRnZVwiXSwgZnVuY3Rpb24gKHJlcXVpcmUsIGV4cG9ydHMsIEZpcnN0TW9kdWxlXzEsIE9seW1wdXNfMSwgRW52aXJvbm1lbnRfMSwgRE9NQnJpZGdlXzEsIEVncmV0QnJpZGdlXzEpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAYXV0aG9yIFJheWtpZFxyXG4gICAgICogQGVtYWlsIGluaXRpYWxfckBxcS5jb21cclxuICAgICAqIEBjcmVhdGUgZGF0ZSAyMDE3LTA4LTMxXHJcbiAgICAgKiBAbW9kaWZ5IGRhdGUgMjAxNy0wOS0wMVxyXG4gICAgICpcclxuICAgICAqIOa1i+ivlemhueebrlxyXG4gICAgKi9cclxuICAgIE9seW1wdXNfMS5kZWZhdWx0LnN0YXJ0dXAoe1xyXG4gICAgICAgIGJyaWRnZXM6IFtcclxuICAgICAgICAgICAgbmV3IERPTUJyaWRnZV8xLmRlZmF1bHQoe1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiBcIiNyb290RE9NXCJcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIG5ldyBFZ3JldEJyaWRnZV8xLmRlZmF1bHQoe1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDcyMCxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMTI4MCxcclxuICAgICAgICAgICAgICAgIHBhdGhQcmVmaXg6IFwiZWdyZXQvXCIsXHJcbiAgICAgICAgICAgICAgICBjb250YWluZXI6IFwiI3Jvb3RFZ3JldFwiLFxyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAwLFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgZmlyc3RNb2R1bGU6IEZpcnN0TW9kdWxlXzEuZGVmYXVsdCxcclxuICAgICAgICBsb2FkRWxlbWVudDogXCIjbG9hZGluZ1wiLFxyXG4gICAgICAgIGhvc3RzRGljdDoge1xyXG4gICAgICAgICAgICBkZXY6IFtcImh0dHA6Ly93d3cudGVzdC4xN3p1b3llLm5ldC9cIl0sXHJcbiAgICAgICAgICAgIHRlc3Q6IFtcImh0dHBzOi8vd3d3LnRlc3QuMTd6dW95ZS5uZXQvXCJdLFxyXG4gICAgICAgICAgICBzdGFnaW5nOiBbXCJodHRwczovL3d3dy5zdGFnaW5nLjE3enVveWUubmV0L1wiXSxcclxuICAgICAgICAgICAgcHJvZDogW1wiaHR0cHM6Ly93d3cuMTd6dW95ZS5jb20vXCJdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjZG5zRGljdDoge1xyXG4gICAgICAgICAgICB0ZXN0OiBbXCJodHRwczovL2Nkbi1jbmMudGVzdC4xN3p1b3llLm5ldC9cIl0sXHJcbiAgICAgICAgICAgIHN0YWdpbmc6IFtcImh0dHBzOi8vY2RuLWNuYy5zdGFnaW5nLjE3enVveWUubmV0L1wiXSxcclxuICAgICAgICAgICAgcHJvZDogW1wiaHR0cHM6Ly9jZG4tY25jLjE3enVveWUuY29tL1wiXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcGF0aERpY3Q6IHtcclxuICAgICAgICAgICAgYTogXCJ0ZXN0MS5qc1wiLFxyXG4gICAgICAgICAgICBiOiBcInRlc3QyLmpzXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHByZWxvYWRzOiBbXCJhXCIsIFwiYlwiXSxcclxuICAgICAgICBvbkluaXRlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBicmlkZ2VNYW5hZ2VyLmdldEJyaWRnZShcIkVncmV0XCIpLmRlZmF1bHRTY2VuZVBvbGljeSA9IG5vbmU7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKEVudmlyb25tZW50XzEuZW52aXJvbm1lbnQuZW52LCBFbnZpcm9ubWVudF8xLmVudmlyb25tZW50LmdldEhvc3QoKSwgRW52aXJvbm1lbnRfMS5lbnZpcm9ubWVudC5jdXJDRE5Ib3N0KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uSW5pdFByb2dyZXNzOiBmdW5jdGlvbiAocHJnLCBzdGVwKSB7XHJcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBhcmdzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIFtwcmcsIHN0ZXBdLmNvbmNhdChhcmdzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2liV0ZwYmk1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJbTFoYVc0dWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzYTBOQlFXdERPMEZCUTJ4RExITkRRVUZ6UXp0QlFVTjBReXgzUTBGQmQwTTdRVUZEZUVNc05rUkJRVFpFTzBGQlF6ZEVMSGxFUVVGNVJEdEJRVU42UkN4NVJFRkJlVVE3UVVGRGVrUXNOa1JCUVRaRU96czdPMGxCVnpkRU96czdPenM3TzAxQlQwVTdTVUZEUml4cFFrRkJUeXhEUVVGRExFOUJRVThzUTBGQlF6dFJRVU5hTEU5QlFVOHNSVUZCUlR0WlFVTk1MRWxCUVVrc2JVSkJRVk1zUTBGQlF6dG5Ra0ZEVml4VFFVRlRMRVZCUVVVc1ZVRkJWVHRoUVVONFFpeERRVUZETzFsQlEwWXNTVUZCU1N4eFFrRkJWeXhEUVVGRE8yZENRVU5hTEV0QlFVc3NSVUZCUlN4SFFVRkhPMmRDUVVOV0xFMUJRVTBzUlVGQlJTeEpRVUZKTzJkQ1FVTmFMRlZCUVZVc1JVRkJSU3hSUVVGUk8yZENRVU53UWl4VFFVRlRMRVZCUVVVc1dVRkJXVHRuUWtGRGRrSXNaVUZCWlN4RlFVRkZMRU5CUVVNN1lVRkZja0lzUTBGQlF6dFRRVU5NTzFGQlEwUXNWMEZCVnl4RlFVRkZMSEZDUVVGWE8xRkJRM2hDTEZkQlFWY3NSVUZCUlN4VlFVRlZPMUZCUTNaQ0xGTkJRVk1zUlVGQlJUdFpRVU5RTEVkQlFVY3NSVUZCUlN4RFFVRkRMRGhDUVVFNFFpeERRVUZETzFsQlEzSkRMRWxCUVVrc1JVRkJSU3hEUVVGRExDdENRVUVyUWl4RFFVRkRPMWxCUTNaRExFOUJRVThzUlVGQlJTeERRVUZETEd0RFFVRnJReXhEUVVGRE8xbEJRemRETEVsQlFVa3NSVUZCUlN4RFFVRkRMREJDUVVFd1FpeERRVUZETzFOQlEzSkRPMUZCUTBRc1VVRkJVU3hGUVVGRk8xbEJRMDRzU1VGQlNTeEZRVUZGTEVOQlFVTXNiVU5CUVcxRExFTkJRVU03V1VGRE0wTXNUMEZCVHl4RlFVRkZMRU5CUVVNc2MwTkJRWE5ETEVOQlFVTTdXVUZEYWtRc1NVRkJTU3hGUVVGRkxFTkJRVU1zT0VKQlFUaENMRU5CUVVNN1UwRkRla003VVVGRFJDeFJRVUZSTEVWQlFVVTdXVUZEVGl4RFFVRkRMRVZCUVVVc1ZVRkJWVHRaUVVOaUxFTkJRVU1zUlVGQlJTeFZRVUZWTzFOQlEyaENPMUZCUTBRc1VVRkJVU3hGUVVGRkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVkQlFVY3NRMEZCUXp0UlFVTndRaXhSUVVGUkxFVkJRVVU3V1VGRlRpdzRSRUZCT0VRN1dVRkRPVVFzVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4NVFrRkJWeXhEUVVGRExFZEJRVWNzUlVGQlJTeDVRa0ZCVnl4RFFVRkRMRTlCUVU4c1JVRkJSU3hGUVVGRkxIbENRVUZYTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1VVRkRhRVlzUTBGQlF6dFJRVU5FTEdOQlFXTXNSVUZCUlN4VlFVRkRMRWRCUVZVc1JVRkJSU3hKUVVGaE8xbEJRVVVzWTBGQlR6dHBRa0ZCVUN4VlFVRlBMRVZCUVZBc2NVSkJRVThzUlVGQlVDeEpRVUZQTzJkQ1FVRlFMRFpDUVVGUE96dFpRVU12UXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhQUVVGWUxFOUJRVThzUjBGQlN5eEhRVUZITEVWQlFVVXNTVUZCU1N4VFFVRkxMRWxCUVVrc1IwRkJSVHRSUVVOd1F5eERRVUZETzB0QlEwb3NRMEZCUXl4RFFVRkRJbjA9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L21haW4udHNcbi8vIG1vZHVsZSBpZCA9IDQwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxuZGVmaW5lKFtcInJlcXVpcmVcIiwgXCJleHBvcnRzXCIsIFwiLi9TZWNvbmRNb2R1bGVcIiwgXCIuLi9uZXQvcmVzcG9uc2UvVGVzdFJlc3BvbnNlXCIsIFwiLi4vbmV0L3JlcXVlc3QvVGVzdFJlcXVlc3RcIiwgXCIuLi9tb2RlbHMvRnVja01vZGVsXCIsIFwib2x5bXB1cy1yL2VuZ2luZS9zY2VuZS9TY2VuZU1lZGlhdG9yXCIsIFwib2x5bXB1cy1yL2NvcmUvaW5qZWN0b3IvSW5qZWN0b3JcIiwgXCJvbHltcHVzLXIvZW5naW5lL21vZHVsZS9Nb2R1bGVNYW5hZ2VyXCIsIFwib2x5bXB1cy1yL2VuZ2luZS9tb2R1bGUvTW9kdWxlTWVzc2FnZVwiLCBcIm9seW1wdXMtci9lbmdpbmUvbW9kdWxlL01vZHVsZVwiLCBcIm9seW1wdXMtci9lbmdpbmUvaW5qZWN0b3IvSW5qZWN0b3JcIiwgXCJvbHltcHVzLXItZG9tL2RvbS9pbmplY3Rvci9JbmplY3RvclwiLCBcIm9seW1wdXMtci9lbmdpbmUvYXVkaW8vQXVkaW9NYW5hZ2VyXCJdLCBmdW5jdGlvbiAocmVxdWlyZSwgZXhwb3J0cywgU2Vjb25kTW9kdWxlXzEsIFRlc3RSZXNwb25zZV8xLCBUZXN0UmVxdWVzdF8xLCBGdWNrTW9kZWxfMSwgU2NlbmVNZWRpYXRvcl8xLCBJbmplY3Rvcl8xLCBNb2R1bGVNYW5hZ2VyXzEsIE1vZHVsZU1lc3NhZ2VfMSwgTW9kdWxlXzEsIEluamVjdG9yXzIsIEluamVjdG9yXzMsIEF1ZGlvTWFuYWdlcl8xKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuICAgIC8qKlxyXG4gICAgICogQGF1dGhvciBSYXlraWRcclxuICAgICAqIEBlbWFpbCBpbml0aWFsX3JAcXEuY29tXHJcbiAgICAgKiBAY3JlYXRlIGRhdGUgMjAxNy0wOS0xOFxyXG4gICAgICogQG1vZGlmeSBkYXRlIDIwMTctMDktMThcclxuICAgICAqXHJcbiAgICAgKiDmtYvor5XpppbkuKrmqKHlnZdcclxuICAgICovXHJcbiAgICB2YXIgRmlyc3RNZWRpYXRvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoRmlyc3RNZWRpYXRvciwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBGaXJzdE1lZGlhdG9yKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIEZpcnN0TWVkaWF0b3IucHJvdG90eXBlLmxpc3RBc3NldHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXCIuL21vZHVsZXMvdGVzdC5odG1sXCJdO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgRmlyc3RNZWRpYXRvci5wcm90b3R5cGUub25PcGVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICAvLyB0aGlzLm1hcExpc3RlbmVyKHRoaXMuYnRuLCBcImNsaWNrXCIsIGZ1bmN0aW9uKCk6dm9pZFxyXG4gICAgICAgICAgICAvLyB7XHJcbiAgICAgICAgICAgIC8vICAgICB0aGlzLnR4dC50ZXh0Q29udGVudCA9IFwiRnVjayB5b3UhISFcIjtcclxuICAgICAgICAgICAgLy8gICAgIHRoaXMubW9kdWxlTWFuYWdlci5vcGVuKFNlY29uZE1vZHVsZSk7XHJcbiAgICAgICAgICAgIC8vIH0sIHRoaXMpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmZ1Y2tNb2RlbDEuZnVjaywgdGhpcy5mdWNrTW9kZWwxID09PSB0aGlzLmZ1Y2tNb2RlbDIsIHRoaXMuZnVja01vZGVsMSA9PT0gdGhpcy5mdWNrTW9kZWwzKTtcclxuICAgICAgICAgICAgdGhpcy52aWV3TW9kZWwgPSB7XHJcbiAgICAgICAgICAgICAgICBmdWNrTGlzdDogWzEsIDIsIFwic2hpdFwiLCBcInlvdVwiXSxcclxuICAgICAgICAgICAgICAgIGZ1Y2tUZXh0OiBcImZ1Y2sgeW91XCIsXHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudmlld01vZGVsLmZ1Y2tUZXh0ID0gXCJjbGlja2VkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubW9kdWxlTWFuYWdlci5vcGVuKFNlY29uZE1vZHVsZV8xLmRlZmF1bHQsIG51bGwsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1Y2tNb2RlbDogdGhpcy5mdWNrTW9kZWwxXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIEF1ZGlvTWFuYWdlcl8xLmF1ZGlvTWFuYWdlci5wbGF5TXVzaWMoe1xyXG4gICAgICAgICAgICAgICAgdXJsOiBcIi4vdGVzdC5tcDNcIlxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy52aWV3TW9kZWwuZnVja1RleHQgPSBcIjEyMzRcIjtcclxuICAgICAgICAgICAgICAgIF90aGlzLnZpZXdNb2RlbC5mdWNrTGlzdCA9IFtcImhlbGxvXCIsIFwid29ybGRcIl07XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5mdWNrTW9kZWwxLmZ1Y2sgPSBcIllvdSEhIVwiO1xyXG4gICAgICAgICAgICB9LCAzMDAwKTtcclxuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaChuZXcgVGVzdFJlcXVlc3RfMS5kZWZhdWx0KCkpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgRmlyc3RNZWRpYXRvci5wcm90b3R5cGUub25Nb2R1bGVDaGFuZ2UgPSBmdW5jdGlvbiAodG8sIGZyb20pIHtcclxuICAgICAgICAgICAgaWYgKHRvID09IEZpcnN0TW9kdWxlKVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJjaGFuZ2UgdG8gZmlyc3QgbW9kdWxlIVwiKTtcclxuICAgICAgICAgICAgZWxzZSBpZiAodG8gPT0gU2Vjb25kTW9kdWxlXzEuZGVmYXVsdClcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY2hhbmdlIHRvIHNlY29uZCBtb2R1bGUhXCIpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgRmlyc3RNZWRpYXRvci5wcm90b3R5cGUub25SZXNwb25zZSA9IGZ1bmN0aW9uIChyZXMsIHJlcSkge1xyXG4gICAgICAgICAgICBhbGVydChcIjEyM1wiKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIF9fZGVjb3JhdGUoW1xyXG4gICAgICAgICAgICBJbmplY3Rvcl8xLkluamVjdCxcclxuICAgICAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE1vZHVsZU1hbmFnZXJfMS5kZWZhdWx0KVxyXG4gICAgICAgIF0sIEZpcnN0TWVkaWF0b3IucHJvdG90eXBlLCBcIm1vZHVsZU1hbmFnZXJcIiwgdm9pZCAwKTtcclxuICAgICAgICBfX2RlY29yYXRlKFtcclxuICAgICAgICAgICAgSW5qZWN0b3JfMS5JbmplY3QsXHJcbiAgICAgICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBGdWNrTW9kZWxfMS5kZWZhdWx0KVxyXG4gICAgICAgIF0sIEZpcnN0TWVkaWF0b3IucHJvdG90eXBlLCBcImZ1Y2tNb2RlbDFcIiwgdm9pZCAwKTtcclxuICAgICAgICBfX2RlY29yYXRlKFtcclxuICAgICAgICAgICAgSW5qZWN0b3JfMS5JbmplY3QsXHJcbiAgICAgICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBGdWNrTW9kZWxfMS5JRnVja01vZGVsKVxyXG4gICAgICAgIF0sIEZpcnN0TWVkaWF0b3IucHJvdG90eXBlLCBcImZ1Y2tNb2RlbDJcIiwgdm9pZCAwKTtcclxuICAgICAgICBfX2RlY29yYXRlKFtcclxuICAgICAgICAgICAgSW5qZWN0b3JfMS5JbmplY3QoMSksXHJcbiAgICAgICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBGdWNrTW9kZWxfMS5JRnVja01vZGVsKVxyXG4gICAgICAgIF0sIEZpcnN0TWVkaWF0b3IucHJvdG90eXBlLCBcImZ1Y2tNb2RlbDNcIiwgdm9pZCAwKTtcclxuICAgICAgICBfX2RlY29yYXRlKFtcclxuICAgICAgICAgICAgSW5qZWN0b3JfMi5CaW5kT24oeyBjbGljazogXCJvbkNsaWNrXCIgfSksXHJcbiAgICAgICAgICAgIEluamVjdG9yXzIuQmluZElmKFwiZnVja1RleHQgPT0gJzEyMzQnXCIpLFxyXG4gICAgICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgSFRNTEVsZW1lbnQpXHJcbiAgICAgICAgXSwgRmlyc3RNZWRpYXRvci5wcm90b3R5cGUsIFwiYnRuXCIsIHZvaWQgMCk7XHJcbiAgICAgICAgX19kZWNvcmF0ZShbXHJcbiAgICAgICAgICAgIEluamVjdG9yXzIuQmluZEZvcihcImZ1Y2sgaW4gZnVja0xpc3RcIiksXHJcbiAgICAgICAgICAgIEluamVjdG9yXzIuQmluZFZhbHVlKHsgdGV4dENvbnRlbnQ6IFwiZnVjayArICcgLSAnICsgZnVja1RleHQgKyAnIC0gMSdcIiB9KSxcclxuICAgICAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEhUTUxFbGVtZW50KVxyXG4gICAgICAgIF0sIEZpcnN0TWVkaWF0b3IucHJvdG90eXBlLCBcInR4dFwiLCB2b2lkIDApO1xyXG4gICAgICAgIF9fZGVjb3JhdGUoW1xyXG4gICAgICAgICAgICBJbmplY3Rvcl8yLkJpbmRWYWx1ZShcInRleHRDb250ZW50XCIsIFwiZnVja01vZGVsLmZ1Y2tcIiksXHJcbiAgICAgICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBIVE1MRWxlbWVudClcclxuICAgICAgICBdLCBGaXJzdE1lZGlhdG9yLnByb3RvdHlwZSwgXCJmdWNrXCIsIHZvaWQgMCk7XHJcbiAgICAgICAgX19kZWNvcmF0ZShbXHJcbiAgICAgICAgICAgIEluamVjdG9yXzIuTWVzc2FnZUhhbmRsZXIoTW9kdWxlTWVzc2FnZV8xLmRlZmF1bHQuTU9EVUxFX0NIQU5HRSksXHJcbiAgICAgICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBGdW5jdGlvbiksXHJcbiAgICAgICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbT2JqZWN0LCBPYmplY3RdKSxcclxuICAgICAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjpyZXR1cm50eXBlXCIsIHZvaWQgMClcclxuICAgICAgICBdLCBGaXJzdE1lZGlhdG9yLnByb3RvdHlwZSwgXCJvbk1vZHVsZUNoYW5nZVwiLCBudWxsKTtcclxuICAgICAgICBfX2RlY29yYXRlKFtcclxuICAgICAgICAgICAgSW5qZWN0b3JfMi5SZXNwb25zZUhhbmRsZXIsXHJcbiAgICAgICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBGdW5jdGlvbiksXHJcbiAgICAgICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbVGVzdFJlc3BvbnNlXzEuZGVmYXVsdCwgVGVzdFJlcXVlc3RfMS5kZWZhdWx0XSksXHJcbiAgICAgICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cmV0dXJudHlwZVwiLCB2b2lkIDApXHJcbiAgICAgICAgXSwgRmlyc3RNZWRpYXRvci5wcm90b3R5cGUsIFwib25SZXNwb25zZVwiLCBudWxsKTtcclxuICAgICAgICBGaXJzdE1lZGlhdG9yID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgICAgIEluamVjdG9yXzMuRE9NTWVkaWF0b3JDbGFzcyhcIi4vbW9kdWxlcy90ZXN0Lmh0bWxcIilcclxuICAgICAgICBdLCBGaXJzdE1lZGlhdG9yKTtcclxuICAgICAgICByZXR1cm4gRmlyc3RNZWRpYXRvcjtcclxuICAgIH0oU2NlbmVNZWRpYXRvcl8xLmRlZmF1bHQpKTtcclxuICAgIHZhciBGaXJzdE1vZHVsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoRmlyc3RNb2R1bGUsIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gRmlyc3RNb2R1bGUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgRmlyc3RNb2R1bGUucHJvdG90eXBlLmxpc3RKc0ZpbGVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW1widGVzdDEuanNcIiwgXCIuL3Rlc3QyLmpzXCJdO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgRmlyc3RNb2R1bGUucHJvdG90eXBlLm9uRnVjayA9IGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibWVzc2FnZSBhdCBGaXJzdE1vZHVsZTogXCIgKyBhKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIF9fZGVjb3JhdGUoW1xyXG4gICAgICAgICAgICBJbmplY3Rvcl8yLkRlbGVnYXRlTWVkaWF0b3IsXHJcbiAgICAgICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBGaXJzdE1lZGlhdG9yKVxyXG4gICAgICAgIF0sIEZpcnN0TW9kdWxlLnByb3RvdHlwZSwgXCJfbWVkaWF0b3JcIiwgdm9pZCAwKTtcclxuICAgICAgICBfX2RlY29yYXRlKFtcclxuICAgICAgICAgICAgSW5qZWN0b3JfMi5NZXNzYWdlSGFuZGxlcihcImZ1Y2tcIiksXHJcbiAgICAgICAgICAgIEluamVjdG9yXzIuR2xvYmFsTWVzc2FnZUhhbmRsZXIoXCJmdWNrXCIpLFxyXG4gICAgICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgRnVuY3Rpb24pLFxyXG4gICAgICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW09iamVjdF0pLFxyXG4gICAgICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnJldHVybnR5cGVcIiwgdm9pZCAwKVxyXG4gICAgICAgIF0sIEZpcnN0TW9kdWxlLnByb3RvdHlwZSwgXCJvbkZ1Y2tcIiwgbnVsbCk7XHJcbiAgICAgICAgRmlyc3RNb2R1bGUgPSBfX2RlY29yYXRlKFtcclxuICAgICAgICAgICAgSW5qZWN0b3JfMi5Nb2R1bGVDbGFzc1xyXG4gICAgICAgIF0sIEZpcnN0TW9kdWxlKTtcclxuICAgICAgICByZXR1cm4gRmlyc3RNb2R1bGU7XHJcbiAgICB9KE1vZHVsZV8xLmRlZmF1bHQpKTtcclxuICAgIGV4cG9ydHMuZGVmYXVsdCA9IEZpcnN0TW9kdWxlO1xyXG59KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pUm1seWMzUk5iMlIxYkdVdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUpHYVhKemRFMXZaSFZzWlM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3pzN096czdPenM3T3pzN096czdPMGxCWVVFN096czdPenM3VFVGUFJUdEpRVWRHTzFGQlFUUkNMR2xEUVVGaE8xRkJRWHBET3p0UlFYRkZRU3hEUVVGRE8xRkJha1JWTEd0RFFVRlZMRWRCUVdwQ08xbEJSVWtzVFVGQlRTeERRVUZETEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zUTBGQlF6dFJRVU51UXl4RFFVRkRPMUZCUlUwc09FSkJRVTBzUjBGQllqdFpRVUZCTEdsQ1FUaENRenRaUVRWQ1J5eHpSRUZCYzBRN1dVRkRkRVFzU1VGQlNUdFpRVU5LTERSRFFVRTBRenRaUVVNMVF5dzJRMEZCTmtNN1dVRkROME1zV1VGQldUdFpRVU5hTEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRlZCUVZVc1MwRkJTeXhKUVVGSkxFTkJRVU1zVlVGQlZTeEZRVUZGTEVsQlFVa3NRMEZCUXl4VlFVRlZMRXRCUVVzc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzFsQlJUVkhMRWxCUVVrc1EwRkJReXhUUVVGVExFZEJRVWM3WjBKQlEySXNVVUZCVVN4RlFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeE5RVUZOTEVWQlFVVXNTMEZCU3l4RFFVRkRPMmRDUVVNdlFpeFJRVUZSTEVWQlFVVXNWVUZCVlR0blFrRkRjRUlzVDBGQlR5eEZRVUZGTzI5Q1FVTk1MRXRCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zVVVGQlVTeEhRVUZITEZOQlFWTXNRMEZCUXp0dlFrRkRjRU1zUzBGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4SlFVRkpMRU5CUVVNc2MwSkJRVmtzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1owSkJRM1JFTEVOQlFVTTdaMEpCUTBRc1UwRkJVeXhGUVVGRkxFbEJRVWtzUTBGQlF5eFZRVUZWTzJGQlF6ZENMRU5CUVVNN1dVRkZSaXd5UWtGQldTeERRVUZETEZOQlFWTXNRMEZCUXp0blFrRkRia0lzUjBGQlJ5eEZRVUZGTEZsQlFWazdZVUZEY0VJc1EwRkJReXhEUVVGRE8xbEJSVWdzVlVGQlZTeERRVUZETzJkQ1FVTlFMRXRCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zVVVGQlVTeEhRVUZITEUxQlFVMHNRMEZCUXp0blFrRkRha01zUzBGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4UlFVRlJMRWRCUVVjc1EwRkJReXhQUVVGUExFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTTdaMEpCUXpkRExFdEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNTVUZCU1N4SFFVRkhMRkZCUVZFc1EwRkJRenRaUVVOd1F5eERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1dVRkZWQ3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NjVUpCUVZjc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRGNrTXNRMEZCUXp0UlFVZFBMSE5EUVVGakxFZEJRWFJDTEZWQlFYVkNMRVZCUVUwc1JVRkJSU3hKUVVGUk8xbEJSVzVETEVWQlFVVXNRMEZCUVN4RFFVRkRMRVZCUVVVc1NVRkJTU3hYUVVGWExFTkJRVU03WjBKQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXg1UWtGQmVVSXNRMEZCUXl4RFFVRkRPMWxCUXpkRUxFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVRXNRMEZCUXl4RlFVRkZMRWxCUVVrc2MwSkJRVmtzUTBGQlF6dG5Ra0ZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExEQkNRVUV3UWl4RFFVRkRMRU5CUVVNN1VVRkRlRVVzUTBGQlF6dFJRVWRQTEd0RFFVRlZMRWRCUVd4Q0xGVkJRVzFDTEVkQlFXZENMRVZCUVVVc1IwRkJaVHRaUVVWb1JDeExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1VVRkRha0lzUTBGQlF6dFJRV3BGUkR0WlFVUkRMR2xDUVVGTk8zTkRRVU5sTEhWQ1FVRmhPelJFUVVGRE8xRkJSWEJETzFsQlJFTXNhVUpCUVUwN2MwTkJRMWtzYlVKQlFWTTdlVVJCUVVNN1VVRkZOMEk3V1VGRVF5eHBRa0ZCVFR0elEwRkRXU3h6UWtGQlZUdDVSRUZCUXp0UlFVVTVRanRaUVVSRExHbENRVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRPM05EUVVOVExITkNRVUZWTzNsRVFVRkRPMUZCU1RsQ08xbEJSa01zYVVKQlFVMHNRMEZCUXl4RlFVRkRMRXRCUVVzc1JVRkJSU3hUUVVGVExFVkJRVU1zUTBGQlF6dFpRVU14UWl4cFFrRkJUU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRPM05EUVVOc1FpeFhRVUZYTzJ0RVFVRkJPMUZCUjNSQ08xbEJSa01zYTBKQlFVOHNRMEZCUXl4clFrRkJhMElzUTBGQlF6dFpRVU16UWl4dlFrRkJVeXhEUVVGRExFVkJRVU1zVjBGQlZ5eEZRVUZGTEd0RFFVRnJReXhGUVVGRExFTkJRVU03YzBOQlEyeEVMRmRCUVZjN2EwUkJRVU03VVVGRmRrSTdXVUZFUXl4dlFrRkJVeXhEUVVGRExHRkJRV0VzUlVGQlJTeG5Ra0ZCWjBJc1EwRkJRenR6UTBGREwwSXNWMEZCVnp0dFJFRkJRenRSUVhkRGVFSTdXVUZFUXl4NVFrRkJZeXhEUVVGRExIVkNRVUZoTEVOQlFVTXNZVUZCWVN4RFFVRkRPenM3T3pKRVFVc3pRenRSUVVkRU8xbEJSRU1zTUVKQlFXVTdPelpEUVVOUExITkNRVUZaTEVWQlFVMHNjVUpCUVZjN08zVkVRVWR1UkR0UlFYQkZReXhoUVVGaE8xbEJSR3hDTERKQ1FVRm5RaXhEUVVGRExIRkNRVUZ4UWl4RFFVRkRPMWRCUTJ4RExHRkJRV0VzUTBGeFJXeENPMUZCUVVRc2IwSkJRVU03UzBGQlFTeEJRWEpGUkN4RFFVRTBRaXgxUWtGQllTeEhRWEZGZUVNN1NVRkhSRHRSUVVGNVF5d3JRa0ZCVFR0UlFVRXZRenM3VVVGblFrRXNRMEZCUXp0UlFWaFZMR2xEUVVGWExFZEJRV3hDTzFsQlJVa3NUVUZCVFN4RFFVRkRMRU5CUVVNc1ZVRkJWU3hGUVVGRkxGbEJRVmtzUTBGQlF5eERRVUZETzFGQlEzUkRMRU5CUVVNN1VVRkpUeXcwUWtGQlRTeEhRVUZrTEZWQlFXVXNRMEZCUXp0WlFVVmFMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zTUVKQlFUQkNMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGFFUXNRMEZCUXp0UlFWcEVPMWxCUkVNc01rSkJRV2RDTzNORFFVTkRMR0ZCUVdFN2MwUkJRVU03VVVGVGFFTTdXVUZHUXl4NVFrRkJZeXhEUVVGRExFMUJRVTBzUTBGQlF6dFpRVU4wUWl3clFrRkJiMElzUTBGQlF5eE5RVUZOTEVOQlFVTTdPenM3YVVSQlNUVkNPMUZCWm1kQ0xGZEJRVmM3V1VGRUwwSXNjMEpCUVZjN1YwRkRVeXhYUVVGWExFTkJaMEl2UWp0UlFVRkVMR3RDUVVGRE8wdEJRVUVzUVVGb1FrUXNRMEZCZVVNc1owSkJRVTBzUjBGblFqbERPM05DUVdoQ2IwSXNWMEZCVnlKOVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVzdC9tb2R1bGVzL0ZpcnN0TW9kdWxlLnRzXG4vLyBtb2R1bGUgaWQgPSA0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxuaW1wb3J0IE1lc3NhZ2UgZnJvbSBcIi4vTWVzc2FnZVwiO1xyXG4vKipcclxuICogQGF1dGhvciBSYXlraWRcclxuICogQGVtYWlsIGluaXRpYWxfckBxcS5jb21cclxuICogQGNyZWF0ZSBkYXRlIDIwMTctMDktMDFcclxuICogQG1vZGlmeSBkYXRlIDIwMTctMDktMDFcclxuICpcclxuICog5qGG5p625YaF5qC46YCa55So5raI5oGvXHJcbiovXHJcbnZhciBDb21tb25NZXNzYWdlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKENvbW1vbk1lc3NhZ2UsIF9zdXBlcik7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgTWVzc2FnZS5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIOa2iOaBr+exu+Wei1xyXG4gICAgICogQHBhcmFtIHsuLi5hbnlbXX0gcGFyYW1zIOWPr+iDveeahOa2iOaBr+WPguaVsOWIl+ihqFxyXG4gICAgICogQG1lbWJlcm9mIE1lc3NhZ2VcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gQ29tbW9uTWVzc2FnZSh0eXBlKSB7XHJcbiAgICAgICAgdmFyIHBhcmFtcyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHBhcmFtc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgdHlwZSkgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5wYXJhbXMgPSBwYXJhbXM7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIENvbW1vbk1lc3NhZ2U7XHJcbn0oTWVzc2FnZSkpO1xyXG5leHBvcnQgZGVmYXVsdCBDb21tb25NZXNzYWdlO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9jb3JlL21lc3NhZ2UvQ29tbW9uTWVzc2FnZS5qc1xuLy8gbW9kdWxlIGlkID0gNDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1xuLy8gbW9kdWxlIGlkID0gNDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzO1xyXG59KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpXHJcblx0XHRnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzXG4vLyBtb2R1bGUgaWQgPSA0NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufTtcclxudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XHJcbn07XHJcbmRlZmluZShbXCJyZXF1aXJlXCIsIFwiZXhwb3J0c1wiLCBcIm9seW1wdXMtci9lbmdpbmUvc2NlbmUvU2NlbmVNZWRpYXRvclwiLCBcIm9seW1wdXMtci9lbmdpbmUvbW9kdWxlL01vZHVsZVwiLCBcIm9seW1wdXMtci9lbmdpbmUvaW5qZWN0b3IvSW5qZWN0b3JcIiwgXCJvbHltcHVzLXItZWdyZXQvZWdyZXQvaW5qZWN0b3IvSW5qZWN0b3JcIl0sIGZ1bmN0aW9uIChyZXF1aXJlLCBleHBvcnRzLCBTY2VuZU1lZGlhdG9yXzEsIE1vZHVsZV8xLCBJbmplY3Rvcl8xLCBJbmplY3Rvcl8yKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuICAgIC8qKlxyXG4gICAgICogQGF1dGhvciBSYXlraWRcclxuICAgICAqIEBlbWFpbCBpbml0aWFsX3JAcXEuY29tXHJcbiAgICAgKiBAY3JlYXRlIGRhdGUgMjAxNy0wOS0xOFxyXG4gICAgICogQG1vZGlmeSBkYXRlIDIwMTctMDktMThcclxuICAgICAqXHJcbiAgICAgKiDmtYvor5XnrKzkuozkuKrmqKHlnZdcclxuICAgICovXHJcbiAgICB2YXIgU2Vjb25kTWVkaWF0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKFNlY29uZE1lZGlhdG9yLCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIFNlY29uZE1lZGlhdG9yKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFNlY29uZE1lZGlhdG9yLnByb3RvdHlwZS5saXN0QXNzZXRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW1wicHJlbG9hZFwiXTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNlY29uZE1lZGlhdG9yLnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHRoaXMubWFwTGlzdGVuZXIodGhpcy5idG4sIGVncmV0LlRvdWNoRXZlbnQuVE9VQ0hfVEFQLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBtb2R1bGVNYW5hZ2VyLmNsb3NlKFNlY29uZE1vZHVsZSk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5kaXNwYXRjaChcIkZ1Y2tNc2dcIiwgXCJTaGl0ISEhXCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy52aWV3TW9kZWwgPSB7XHJcbiAgICAgICAgICAgICAgICBvbk1zZzogZnVuY3Rpb24gKG1zZykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOihqOi+vuW8j+mHjOS9v+eUqOWHveaVsOWPr+S7peWcqOWHveaVsOmHjOaJp+ihjOWkjeadgumAu+i+ke+8jOW5tuS4lOWFt+acieS7o+eggeaPkOekulxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG1zZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1zZyArIFwiIC0gMVwiO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1Y2s6IFwieW91XCIsXHJcbiAgICAgICAgICAgICAgICBmdWNrTGlzdDogW1wiZnVja1wiLCBcInNoaXRcIiwgXCJ5b3VcIiwgXCIhISFcIl1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy8g5rWL6K+V5raI5oGvXHJcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goXCJmdWNrXCIsIDEyMyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBfX2RlY29yYXRlKFtcclxuICAgICAgICAgICAgSW5qZWN0b3JfMS5CaW5kTWVzc2FnZShcIkZ1Y2tNc2dcIiwgeyBsYWJlbDogXCJvbk1zZygkYXJndW1lbnRzWzBdKVwiIH0pLFxyXG4gICAgICAgICAgICBJbmplY3Rvcl8xLkJpbmRGdW5jKFwiZ2V0Q3VycmVudFN0YXRlXCIsIFtcImZ1Y2tcIiwgXCJvbk1zZ1wiLCB1bmRlZmluZWRdKSxcclxuICAgICAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIGV1aS5CdXR0b24pXHJcbiAgICAgICAgXSwgU2Vjb25kTWVkaWF0b3IucHJvdG90eXBlLCBcImJ0blwiLCB2b2lkIDApO1xyXG4gICAgICAgIF9fZGVjb3JhdGUoW1xyXG4gICAgICAgICAgICBJbmplY3Rvcl8xLkJpbmRGb3IoXCJpIGluIGZ1Y2tMaXN0XCIpLFxyXG4gICAgICAgICAgICBJbmplY3Rvcl8xLkJpbmRWYWx1ZShcInR4dC50ZXh0XCIsIFwiaVwiKSxcclxuICAgICAgICAgICAgSW5qZWN0b3JfMS5CaW5kRm9yKFwibHN0XCIsIFwia2V5IGluIGZ1Y2tMaXN0XCIpLFxyXG4gICAgICAgICAgICBJbmplY3Rvcl8xLkJpbmRWYWx1ZSh7XHJcbiAgICAgICAgICAgICAgICB0eHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIiR0YXJnZXQuJGhhc2hDb2RlXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBldWkuRGF0YUdyb3VwKVxyXG4gICAgICAgIF0sIFNlY29uZE1lZGlhdG9yLnByb3RvdHlwZSwgXCJsc3RcIiwgdm9pZCAwKTtcclxuICAgICAgICBTZWNvbmRNZWRpYXRvciA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgICAgICBJbmplY3Rvcl8yLkVncmV0TWVkaWF0b3JDbGFzcyhcIkZ1Y2syU2tpblwiKVxyXG4gICAgICAgIF0sIFNlY29uZE1lZGlhdG9yKTtcclxuICAgICAgICByZXR1cm4gU2Vjb25kTWVkaWF0b3I7XHJcbiAgICB9KFNjZW5lTWVkaWF0b3JfMS5kZWZhdWx0KSk7XHJcbiAgICB2YXIgU2Vjb25kTW9kdWxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhTZWNvbmRNb2R1bGUsIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gU2Vjb25kTW9kdWxlKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFNlY29uZE1vZHVsZS5wcm90b3R5cGUub25GdWNrID0gZnVuY3Rpb24gKGEpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJtZXNzYWdlIGF0IFNlY29uZE1vZHVsZTogXCIgKyBhKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIF9fZGVjb3JhdGUoW1xyXG4gICAgICAgICAgICBJbmplY3Rvcl8xLkRlbGVnYXRlTWVkaWF0b3IsXHJcbiAgICAgICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBTZWNvbmRNZWRpYXRvcilcclxuICAgICAgICBdLCBTZWNvbmRNb2R1bGUucHJvdG90eXBlLCBcIl9tZWRpYXRvclwiLCB2b2lkIDApO1xyXG4gICAgICAgIF9fZGVjb3JhdGUoW1xyXG4gICAgICAgICAgICBJbmplY3Rvcl8xLk1lc3NhZ2VIYW5kbGVyKFwiZnVja1wiKSxcclxuICAgICAgICAgICAgSW5qZWN0b3JfMS5HbG9iYWxNZXNzYWdlSGFuZGxlcihcImZ1Y2tcIiksXHJcbiAgICAgICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBGdW5jdGlvbiksXHJcbiAgICAgICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbT2JqZWN0XSksXHJcbiAgICAgICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cmV0dXJudHlwZVwiLCB2b2lkIDApXHJcbiAgICAgICAgXSwgU2Vjb25kTW9kdWxlLnByb3RvdHlwZSwgXCJvbkZ1Y2tcIiwgbnVsbCk7XHJcbiAgICAgICAgU2Vjb25kTW9kdWxlID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgICAgIEluamVjdG9yXzEuTW9kdWxlQ2xhc3NcclxuICAgICAgICBdLCBTZWNvbmRNb2R1bGUpO1xyXG4gICAgICAgIHJldHVybiBTZWNvbmRNb2R1bGU7XHJcbiAgICB9KE1vZHVsZV8xLmRlZmF1bHQpKTtcclxuICAgIGV4cG9ydHMuZGVmYXVsdCA9IFNlY29uZE1vZHVsZTtcclxufSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVUyVmpiMjVrVFc5a2RXeGxMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaVUyVmpiMjVrVFc5a2RXeGxMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1NVRkxRVHM3T3pzN096dE5RVTlGTzBsQlIwWTdVVUZCTmtJc2EwTkJRV0U3VVVGQk1VTTdPMUZCZFVOQkxFTkJRVU03VVVGNFFsVXNiVU5CUVZVc1IwRkJha0k3V1VGRlNTeE5RVUZOTEVOQlFVTXNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRSUVVOMlFpeERRVUZETzFGQlJVMHNLMEpCUVUwc1IwRkJZanRaUVVGQkxHbENRV3RDUXp0WlFXaENSeXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRVZCUVVVc1MwRkJTeXhEUVVGRExGVkJRVlVzUTBGQlF5eFRRVUZUTEVWQlFVVTdaMEpCUTI1RUxIRkRRVUZ4UXp0blFrRkZja01zUzBGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4VFFVRlRMRVZCUVVVc1UwRkJVeXhEUVVGRExFTkJRVU03V1VGRGVFTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRTQ3hKUVVGSkxFTkJRVU1zVTBGQlV5eEhRVUZITzJkQ1FVTmlMRXRCUVVzc1JVRkJSU3hWUVVGQkxFZEJRVWM3YjBKQlEwNHNaME5CUVdkRE8yOUNRVU5vUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzI5Q1FVTnFRaXhOUVVGTkxFTkJRVU1zUjBGQlJ5eEhRVUZITEUxQlFVMHNRMEZCUXp0blFrRkRlRUlzUTBGQlF6dG5Ra0ZEUkN4SlFVRkpMRVZCUVVVc1MwRkJTenRuUWtGRFdDeFJRVUZSTEVWQlFVVXNRMEZCUXl4TlFVRk5MRVZCUVVVc1RVRkJUU3hGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVOQlFVTTdZVUZETTBNc1EwRkJRenRaUVVOR0xFOUJRVTg3V1VGRFVDeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTFCUVUwc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF6dFJRVU12UWl4RFFVRkRPMUZCYkVORU8xbEJSa01zYzBKQlFWY3NRMEZCUXl4VFFVRlRMRVZCUVVVc1JVRkJReXhMUVVGTExFVkJRVVVzYzBKQlFYTkNMRVZCUVVNc1EwRkJRenRaUVVOMlJDeHRRa0ZCVVN4RFFVRkRMR2xDUVVGcFFpeEZRVUZGTEVOQlFVTXNUVUZCVFN4RlFVRkZMRTlCUVU4c1JVRkJSU3hUUVVGVExFTkJRVU1zUTBGQlF6dHpRMEZETDBNc1IwRkJSeXhEUVVGRExFMUJRVTA3YlVSQlFVTTdVVUZUZEVJN1dVRlNReXhyUWtGQlR5eERRVUZETEdWQlFXVXNRMEZCUXp0WlFVTjRRaXh2UWtGQlV5eERRVUZETEZWQlFWVXNSVUZCUlN4SFFVRkhMRU5CUVVNN1dVRkRNVUlzYTBKQlFVOHNRMEZCUXl4TFFVRkxMRVZCUVVVc2FVSkJRV2xDTEVOQlFVTTdXVUZEYWtNc2IwSkJRVk1zUTBGQlF6dG5Ra0ZEVUN4SFFVRkhMRVZCUVVVN2IwSkJRMFFzU1VGQlNTeEZRVUZGTEcxQ1FVRnRRanRwUWtGRE5VSTdZVUZEU2l4RFFVRkRPM05EUVVOVExFZEJRVWNzUTBGQlF5eFRRVUZUTzIxRVFVRkRPMUZCWW5aQ0xHTkJRV003V1VGRWJrSXNOa0pCUVd0Q0xFTkJRVU1zVjBGQlZ5eERRVUZETzFkQlF6RkNMR05CUVdNc1EwRjFRMjVDTzFGQlFVUXNjVUpCUVVNN1MwRkJRU3hCUVhaRFJDeERRVUUyUWl4MVFrRkJZU3hIUVhWRGVrTTdTVUZIUkR0UlFVRXdReXhuUTBGQlRUdFJRVUZvUkRzN1VVRlhRU3hEUVVGRE8xRkJTbGNzTmtKQlFVMHNSMEZCWkN4VlFVRmxMRU5CUVVNN1dVRkZXaXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETERKQ1FVRXlRaXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEycEVMRU5CUVVNN1VVRlFSRHRaUVVSRExESkNRVUZuUWp0elEwRkRReXhqUVVGak8zVkVRVUZETzFGQlNXcERPMWxCUmtNc2VVSkJRV01zUTBGQlF5eE5RVUZOTEVOQlFVTTdXVUZEZEVJc0swSkJRVzlDTEVOQlFVTXNUVUZCVFN4RFFVRkRPenM3TzJ0RVFVazFRanRSUVZablFpeFpRVUZaTzFsQlJHaERMSE5DUVVGWE8xZEJRMU1zV1VGQldTeERRVmRvUXp0UlFVRkVMRzFDUVVGRE8wdEJRVUVzUVVGWVJDeERRVUV3UXl4blFrRkJUU3hIUVZjdlF6dHpRa0ZZYjBJc1dVRkJXU0o5XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L21vZHVsZXMvU2Vjb25kTW9kdWxlLnRzXG4vLyBtb2R1bGUgaWQgPSA0NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgeyBnZXRPYmplY3RIYXNocyB9IGZyb20gXCIuLi8uLi91dGlscy9PYmplY3RVdGlsXCI7XHJcbmltcG9ydCBEZXAgZnJvbSBcIi4vRGVwXCI7XHJcbmltcG9ydCBXYXRjaGVyIGZyb20gXCIuL1dhdGNoZXJcIjtcclxuLyoqXHJcbiAqIEBhdXRob3IgUmF5a2lkXHJcbiAqIEBlbWFpbCBpbml0aWFsX3JAcXEuY29tXHJcbiAqIEBjcmVhdGUgZGF0ZSAyMDE3LTExLTA2XHJcbiAqIEBtb2RpZnkgZGF0ZSAyMDE3LTExLTA2XHJcbiAqXHJcbiAqIOWPmOW8guWZqO+8jOWwhlZpZXdNb2RlbOWPmOW8guS4uuWFt+acieS+nei1luWKn+iDveeahOW9ouW8j++8jOS5n+WPr+S7peiupOS4uuaYr+e8luivkei/h+eoi1xyXG4qL1xyXG4vLyDorrDlvZXmlbDnu4TkuK3kvJrpgKDmiJDmlbDmja7mm7TmlrDnmoTmiYDmnInmlrnms5XlkI1cclxudmFyIF9hcnJNZXRob2RzID0gW1xyXG4gICAgXCJwdXNoXCIsXHJcbiAgICBcInBvcFwiLFxyXG4gICAgXCJ1bnNoaWZ0XCIsXHJcbiAgICBcInNoaWZ0XCIsXHJcbiAgICBcInNwbGljZVwiLFxyXG4gICAgXCJzb3J0XCIsXHJcbiAgICBcInJldmVyc2VcIlxyXG5dO1xyXG4vKipcclxuICog5bCG55So5oi35Lyg6L+b5p2l55qE5pWw5o2u4oCc5Y+Y5byC4oCd5oiQ5Li65YW35pyJ5oiq6I635pWw5o2u5Y+Y5pu06IO95Yqb55qE5pWw5o2uXHJcbiAqIEBwYXJhbSBkYXRhIOWOn+Wni+aVsOaNrlxyXG4gKiBAcmV0dXJucyB7YW55fSDlj5jlvILlkI7nmoTmlbDmja5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBtdXRhdGUoZGF0YSkge1xyXG4gICAgLy8g5aaC5p6c5piv566A5Y2V57G75Z6L77yM5YiZ5ZWl5Lmf5LiN5YGaXHJcbiAgICBpZiAoIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT0gXCJvYmplY3RcIilcclxuICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgIC8vIOmAkuW9kuWPmOW8guaJgOacieWGhemDqOWPmOmHj++8jOWPiuWFtl9fcHJvdG9fX+S4i+eahOWxnuaAp++8jOWboOS4umdldHRlci9zZXR0ZXLkvJrooqvlrprkuYnlnKhfX3Byb3RvX1/kuIrvvIzogIzkuI3mmK/lvZPliY3lr7nosaHkuIpcclxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSkuY29uY2F0KE9iamVjdC5rZXlzKGRhdGEuX19wcm90b19fKSk7XHJcbiAgICAvLyDljrvph41cclxuICAgIHZhciB0ZW1wID0ge307XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIGtleXNfMSA9IGtleXM7IF9pIDwga2V5c18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBrZXkgPSBrZXlzXzFbX2ldO1xyXG4gICAgICAgIGlmICghdGVtcFtrZXldKSB7XHJcbiAgICAgICAgICAgIHRlbXBba2V5XSA9IGtleTtcclxuICAgICAgICAgICAgbXV0YXRlT2JqZWN0KGRhdGEsIGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRhdGE7XHJcbn1cclxuZnVuY3Rpb24gbXV0YXRlT2JqZWN0KGRhdGEsIGtleSkge1xyXG4gICAgdmFyIGRlcEtleSA9IGdldE9iamVjdEhhc2hzKGRhdGEsIGtleSk7XHJcbiAgICAvLyDlr7nmr4/kuKrlpI3mnYLnsbvlnovlr7nosaHpg73opoHmnInkuIDkuKrlr7nlupTnmoTkvp3otZbliJfooahcclxuICAgIHZhciBkZXAgPSBkYXRhW2RlcEtleV07XHJcbiAgICBpZiAoIWRlcCkge1xyXG4gICAgICAgIGRlcCA9IG5ldyBEZXAoKTtcclxuICAgICAgICAvLyDliKTmlq3mnKzmnaXov5nkuKrlsZ7mgKfmmK/lgLzlsZ7mgKfov5jmmK9nZXR0ZXIvc2V0dGVy5bGe5oCn77yM6KaB5pyJ5LiN5ZCM55qE5pON5L2c5pa55byPXHJcbiAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGRhdGEsIGtleSkgfHwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihkYXRhLl9fcHJvdG9fXywga2V5KTtcclxuICAgICAgICBpZiAoZGVzYykge1xyXG4gICAgICAgICAgICBpZiAoZGVzYy5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDlgLzlsZ7mgKfnmoTlj5jlvILov4fnqItcclxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkYXRhLCBrZXksIHtcclxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOWmguaenFdhdGNoZXIudXBkYXRpbmfkuI3mmK9udWxs77yM6K+05piO5b2T5YmN5q2j5Zyo5omn6KGM6KGo6L6+5byP77yM6YKj5LmI6I635Y+W55qE5Y+Y6YeP6Ieq54S25piv5YW26ZyA6KaB5L6d6LWW55qEXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3YXRjaGVyID0gV2F0Y2hlci51cGRhdGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdhdGNoZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXAud2F0Y2god2F0Y2hlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOWIqeeUqOmXreWMheS/neWtmOWOn+Wni+WAvFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVzYy52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkZXNjLndyaXRhYmxlIHx8IHYgPT09IGRlc2MudmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2MudmFsdWUgPSB2O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDlpoLmnpzmmK/mlbDnu4TlsLHotbDkuJPpl6jnmoTmlbDnu4Tlj5jlvILmlrnms5XvvIzlkKbliJnpgJLlvZLlj5jlvILlr7nosaFcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodikpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdXRhdGVBcnJheSh2LCBkZXApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdXRhdGUodik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOinpuWPkemAmuefpVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXAubm90aWZ5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBnZXR0ZXIvc2V0dGVy5bGe5oCn55qE5Y+Y5byC6L+H56iLXHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGF0YSwga2V5LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRlc2MuZ2V0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDlpoLmnpxXYXRjaGVyLnVwZGF0aW5n5LiN5pivbnVsbO+8jOivtOaYjuW9k+WJjeato+WcqOaJp+ihjOihqOi+vuW8j++8jOmCo+S5iOiOt+WPlueahOWPmOmHj+iHqueEtuaYr+WFtumcgOimgeS+nei1lueahFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2F0Y2hlciA9IFdhdGNoZXIudXBkYXRpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3YXRjaGVyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVwLndhdGNoKHdhdGNoZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDov5Tlm55nZXTmlrnms5Xnu5PmnpxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlc2MuZ2V0LmNhbGwoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZGVzYy5zZXQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOiuvue9rlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjLnNldC5jYWxsKGRhdGEsIHYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDlpoLmnpzmmK/mlbDnu4TlsLHotbDkuJPpl6jnmoTmlbDnu4Tlj5jlvILmlrnms5XvvIzlkKbliJnpgJLlvZLlj5jlvILlr7nosaFcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodikpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdXRhdGVBcnJheSh2LCBkZXApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdXRhdGUodik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOinpuWPkemAmuefpVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXAubm90aWZ5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g5omT5LiA5Liq5qCH6K6w6KGo56S65bey57uP5Y+Y5byC6L+H5LqGXHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRhdGEsIGRlcEtleSwge1xyXG4gICAgICAgICAgICB2YWx1ZTogZGVwLFxyXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvLyDpgJLlvZLlrZDlsZ7mgKdcclxuICAgIG11dGF0ZShkYXRhW2tleV0pO1xyXG59XHJcbmZ1bmN0aW9uIG11dGF0ZUFycmF5KGFyciwgZGVwKSB7XHJcbiAgICAvLyDlj5jlvILlvZPliY3mlbDnu4RcclxuICAgIGFycltcIl9fcHJvdG9fX1wiXSA9IGRlZmluZVJlYWN0aXZlQXJyYXkoZGVwKTtcclxuICAgIC8vIOmBjeWOhuW9k+WJjeaVsOe7hO+8jOWwhuWGheWuueWvueixoeWFqOmDqOWPmOW8glxyXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFyci5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgIG11dGF0ZShhcnJbaV0pO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGRlZmluZVJlYWN0aXZlQXJyYXkoZGVwKSB7XHJcbiAgICB2YXIgcHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XHJcbiAgICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShwcm90byk7XHJcbiAgICAvLyDpgY3ljobmiYDmnInmlrnms5XvvIzkuIDkuKrkuIDkuKrlnLDlj5jlvIJcclxuICAgIF9hcnJNZXRob2RzLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xyXG4gICAgICAgIC8vIOWIqeeUqOmXreWMheiusOW9leS4gOS4quWOn+Wni+aWueazlVxyXG4gICAgICAgIHZhciBvcmlNZXRob2QgPSBwcm90b1ttZXRob2RdO1xyXG4gICAgICAgIC8vIOW8gOWni+WPmOW8glxyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXN1bHQsIG1ldGhvZCwge1xyXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8g6aaW5YWI6LCD55So5Y6f5aeL5pa55rOV77yM6I635Y+W6L+U5Zue5YC8XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gb3JpTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgLy8g5pWw57uE5o+S5YWl6aG5XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5zZXJ0ZWQ7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG1ldGhvZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJwdXNoXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInVuc2hpZnRcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwic3BsaWNlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydGVkID0gYXJncy5zbGljZSgyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyDnm5Hop4bmlbDnu4Tmj5LlhaXpobnvvIzogIzkuI3mmK/ph43mlrDnm5Hop4bmlbTkuKrmlbDnu4RcclxuICAgICAgICAgICAgICAgIGlmIChpbnNlcnRlZCAmJiBpbnNlcnRlZC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBtdXRhdGVBcnJheShpbnNlcnRlZCwgZGVwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIOinpuWPkeabtOaWsFxyXG4gICAgICAgICAgICAgICAgZGVwLm5vdGlmeSh7IG1ldGhvZDogYXJncyB9KTtcclxuICAgICAgICAgICAgICAgIC8vIOi/lOWbnuWAvFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICAvLyDmj5Dkvpvmm7/mjaLmlbDnu4Torr7nva7nmoTmlrnms5XvvIzlm6DkuLrnm7TmjqXorr7nva7mlbDnu4TkuIvmoIfnmoTmlrnlvI/ml6Dms5Xlj5jlvIJcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXN1bHQsIFwiJHNldFwiLCB7XHJcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUpIHtcclxuICAgICAgICAgICAgLy8g6LaF5Ye65pWw57uE6ZW/5bqm6buY6K6k6L+95Yqg5Yiw5pyA5ZCOXHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+PSB0aGlzLmxlbmd0aClcclxuICAgICAgICAgICAgICAgIGluZGV4ID0gdGhpcy5sZW5ndGg7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNwbGljZShpbmRleCwgMSwgdmFsdWUpWzBdO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgLy8g5o+Q5L6b5pu/5o2i5pWw57uE56e76Zmk55qE5pa55rOV77yM5Zug5Li655u05o6l56e76Zmk55qE5pa55byP5peg5rOV5Y+Y5byCXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzdWx0LCBcIiRyZW1vdmVcIiwge1xyXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4T2YoaXRlbSk7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2VuZ2luZS9iaW5kL011dGF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBEaWN0aW9uYXJ5IGZyb20gXCIuLi8uLi91dGlscy9EaWN0aW9uYXJ5XCI7XHJcbi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0xMS0wNlxyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0xMS0wNlxyXG4gKlxyXG4gKiDlrprkuYnkuIDkuKrkvp3otZbvvIzkuIDkuKrop4Llr5/ogIXlrp7njrBcclxuKi9cclxudmFyIERlcCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERlcCgpIHtcclxuICAgICAgICB0aGlzLl9tYXAgPSBuZXcgRGljdGlvbmFyeSgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDmt7vliqDmlbDmja7lj5jmm7TorqLpmIXogIVcclxuICAgICAqIEBwYXJhbSB3YXRjaGVyIOaVsOaNruWPmOabtOiuoumYheiAhVxyXG4gICAgICovXHJcbiAgICBEZXAucHJvdG90eXBlLndhdGNoID0gZnVuY3Rpb24gKHdhdGNoZXIpIHtcclxuICAgICAgICB0aGlzLl9tYXAuc2V0KHdhdGNoZXIsIHdhdGNoZXIpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5pWw5o2u5Y+Y5pu077yM6YCa55+l5omA5pyJ6K6i6ZiF6ICFXHJcbiAgICAgKiBAcGFyYW0gZXh0cmEg5Y+v6IO955qE6aKd5aSW5pWw5o2uXHJcbiAgICAgKi9cclxuICAgIERlcC5wcm90b3R5cGUubm90aWZ5ID0gZnVuY3Rpb24gKGV4dHJhKSB7XHJcbiAgICAgICAgdGhpcy5fbWFwLmZvckVhY2goZnVuY3Rpb24gKHdhdGNoZXIpIHtcclxuICAgICAgICAgICAgd2F0Y2hlci51cGRhdGUoZXh0cmEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBEZXA7XHJcbn0oKSk7XHJcbmV4cG9ydCBkZWZhdWx0IERlcDtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL2JpbmQvRGVwLmpzXG4vLyBtb2R1bGUgaWQgPSA0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgV2F0Y2hlciBmcm9tIFwiLi9XYXRjaGVyXCI7XHJcbmltcG9ydCB7IGdldE9iamVjdEhhc2hzIH0gZnJvbSBcIi4uLy4uL3V0aWxzL09iamVjdFV0aWxcIjtcclxuLyoqXHJcbiAqIEBhdXRob3IgUmF5a2lkXHJcbiAqIEBlbWFpbCBpbml0aWFsX3JAcXEuY29tXHJcbiAqIEBjcmVhdGUgZGF0ZSAyMDE3LTExLTA2XHJcbiAqIEBtb2RpZnkgZGF0ZSAyMDE3LTExLTA2XHJcbiAqXHJcbiAqIOS4gOS4que7keWumlxyXG4qL1xyXG52YXIgQmluZCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEJpbmQobWVkaWF0b3IpIHtcclxuICAgICAgICB0aGlzLl93YXRjaGVyRGljdCA9IHt9O1xyXG4gICAgICAgIHRoaXMuX21lZGlhdG9yID0gbWVkaWF0b3I7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQmluZC5wcm90b3R5cGUsIFwibWVkaWF0b3JcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPluW3sue7keWumueahOS4reS7i+iAheWunuS+i1xyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJlYWRvbmx5XHJcbiAgICAgICAgICogQHR5cGUge0lNZWRpYXRvcn1cclxuICAgICAgICAgKiBAbWVtYmVyb2YgQmluZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbWVkaWF0b3I7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICAvKipcclxuICAgICAqIOWIm+W7uuS4gOS4quinguWvn+iAhe+8jOWcqOaVsOWAvOWPmOabtOaXtuS8mumAmuefpeWbnuiwg+i/m+ihjOabtOaWsFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IOS9nOeUqOebruagh++8jOaMh+ihqOi+vuW8j+aJgOWcqOeahOaYvuekuuWvueixoVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cCDooajovr7lvI9cclxuICAgICAqIEBwYXJhbSB7V2F0Y2hlckNhbGxiYWNrfSBjYWxsYmFjayDorqLpmIXlmajlm57osINcclxuICAgICAqIEBwYXJhbSB7Li4uYW55W119IHNjb3BlcyDkvZznlKjln5/liJfooajvvIzpppbkuKrkvZznlKjln5/kvJrooqvlvZPlgZp0aGlz5oyH5ZCRXHJcbiAgICAgKiBAcmV0dXJucyB7SVdhdGNoZXJ9IOi/lOWbnuinguWvn+iAheacrOi6q1xyXG4gICAgICogQG1lbWJlcm9mIEJpbmRcclxuICAgICAqL1xyXG4gICAgQmluZC5wcm90b3R5cGUuY3JlYXRlV2F0Y2hlciA9IGZ1bmN0aW9uICh0YXJnZXQsIGV4cCwgY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgc2NvcGVzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAzOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgc2NvcGVzW19pIC0gM10gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIga2V5ID0gZ2V0T2JqZWN0SGFzaHMuYXBwbHkodm9pZCAwLCBbdGFyZ2V0LCBleHBdLmNvbmNhdChzY29wZXMpKTtcclxuICAgICAgICB2YXIgd2F0Y2hlciA9IHRoaXMuX3dhdGNoZXJEaWN0W2tleV07XHJcbiAgICAgICAgaWYgKCF3YXRjaGVyKVxyXG4gICAgICAgICAgICB0aGlzLl93YXRjaGVyRGljdFtrZXldID0gd2F0Y2hlciA9IG5ldyAoV2F0Y2hlci5iaW5kLmFwcGx5KFdhdGNoZXIsIFt2b2lkIDAsIHRoaXMsIHRhcmdldCwgZXhwLCBjYWxsYmFja10uY29uY2F0KHNjb3BlcykpKSgpO1xyXG4gICAgICAgIHJldHVybiB3YXRjaGVyO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBCaW5kO1xyXG59KCkpO1xyXG5leHBvcnQgZGVmYXVsdCBCaW5kO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9lbmdpbmUvYmluZC9CaW5kLmpzXG4vLyBtb2R1bGUgaWQgPSA0OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcclxuICogQGF1dGhvciBSYXlraWRcclxuICogQGVtYWlsIGluaXRpYWxfckBxcS5jb21cclxuICogQGNyZWF0ZSBkYXRlIDIwMTctMDktMTFcclxuICogQG1vZGlmeSBkYXRlIDIwMTctMDktMTFcclxuICpcclxuICog6YCa6K6v55u45YWz55qE5raI5oGvXHJcbiovXHJcbnZhciBOZXRNZXNzYWdlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTmV0TWVzc2FnZSgpIHtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5Y+R6YCB572R57uc6K+35rGC5raI5oGvXHJcbiAgICAgKlxyXG4gICAgICogQHN0YXRpY1xyXG4gICAgICogQHR5cGUge3N0cmluZ31cclxuICAgICAqIEBtZW1iZXJvZiBOZXRNZXNzYWdlXHJcbiAgICAgKi9cclxuICAgIE5ldE1lc3NhZ2UuTkVUX1JFUVVFU1QgPSBcIm5ldFJlcXVlc3RcIjtcclxuICAgIC8qKlxyXG4gICAgICog5o6l5Y+X572R57uc6L+U5Zue5raI5oGvXHJcbiAgICAgKlxyXG4gICAgICogQHN0YXRpY1xyXG4gICAgICogQHR5cGUge3N0cmluZ31cclxuICAgICAqIEBtZW1iZXJvZiBOZXRNZXNzYWdlXHJcbiAgICAgKi9cclxuICAgIE5ldE1lc3NhZ2UuTkVUX1JFU1BPTlNFID0gXCJuZXRSZXNwb25zZVwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiDnvZHnu5zor7fmsYLplJnor6/mtojmga9cclxuICAgICAqXHJcbiAgICAgKiBAc3RhdGljXHJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAgICogQG1lbWJlcm9mIE5ldE1lc3NhZ2VcclxuICAgICAqL1xyXG4gICAgTmV0TWVzc2FnZS5ORVRfRVJST1IgPSBcIm5ldEVycm9yXCI7XHJcbiAgICByZXR1cm4gTmV0TWVzc2FnZTtcclxufSgpKTtcclxuZXhwb3J0IGRlZmF1bHQgTmV0TWVzc2FnZTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL25ldC9OZXRNZXNzYWdlLmpzXG4vLyBtb2R1bGUgaWQgPSA0OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcclxuICogQGF1dGhvciBSYXlraWRcclxuICogQGVtYWlsIGluaXRpYWxfckBxcS5jb21cclxuICogQGNyZWF0ZSBkYXRlIDIwMTctMDktMDZcclxuICogQG1vZGlmeSBkYXRlIDIwMTctMDktMDZcclxuICpcclxuICog5peg5Lu75L2V5Yqo55S755qE5by55Ye6562W55Wl77yM5Y+v5bqU55So5LqO5Lu75L2V5pi+56S65bGC5a6e546wXHJcbiovXHJcbnZhciBOb25lUGFuZWxQb2xpY3kgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBOb25lUGFuZWxQb2xpY3koKSB7XHJcbiAgICB9XHJcbiAgICBOb25lUGFuZWxQb2xpY3kucHJvdG90eXBlLnBvcCA9IGZ1bmN0aW9uIChwYW5lbCwgY2FsbGJhY2ssIGZyb20pIHtcclxuICAgICAgICBzZXRUaW1lb3V0KGNhbGxiYWNrLCAwKTtcclxuICAgIH07XHJcbiAgICBOb25lUGFuZWxQb2xpY3kucHJvdG90eXBlLmRyb3AgPSBmdW5jdGlvbiAocGFuZWwsIGNhbGxiYWNrLCBmcm9tKSB7XHJcbiAgICAgICAgc2V0VGltZW91dChjYWxsYmFjaywgMCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE5vbmVQYW5lbFBvbGljeTtcclxufSgpKTtcclxuZXhwb3J0IHsgTm9uZVBhbmVsUG9saWN5IH07XHJcbi8qKiDpu5jorqTlr7zlh7rlrp7kvosgKi9cclxuZXhwb3J0IGRlZmF1bHQgbmV3IE5vbmVQYW5lbFBvbGljeSgpO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9lbmdpbmUvcGFuZWwvTm9uZVBhbmVsUG9saWN5LmpzXG4vLyBtb2R1bGUgaWQgPSA1MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcclxuICogQGF1dGhvciBSYXlraWRcclxuICogQGVtYWlsIGluaXRpYWxfckBxcS5jb21cclxuICogQGNyZWF0ZSBkYXRlIDIwMTctMDktMDZcclxuICogQG1vZGlmeSBkYXRlIDIwMTctMDktMDZcclxuICpcclxuICog5by556qX55u45YWz55qE5raI5oGvXHJcbiovXHJcbnZhciBQYW5lbE1lc3NhZ2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBQYW5lbE1lc3NhZ2UoKSB7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOaJk+W8gOW8ueeql+WJjeeahOa2iOaBr1xyXG4gICAgICpcclxuICAgICAqIEBzdGF0aWNcclxuICAgICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICAgKiBAbWVtYmVyb2YgUGFuZWxNZXNzYWdlXHJcbiAgICAgKi9cclxuICAgIFBhbmVsTWVzc2FnZS5QQU5FTF9CRUZPUkVfUE9QID0gXCJwYW5lbEJlZm9yZVBvcFwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiDmiZPlvIDlvLnnqpflkI7nmoTmtojmga9cclxuICAgICAqXHJcbiAgICAgKiBAc3RhdGljXHJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAgICogQG1lbWJlcm9mIFBhbmVsTWVzc2FnZVxyXG4gICAgICovXHJcbiAgICBQYW5lbE1lc3NhZ2UuUEFORUxfQUZURVJfUE9QID0gXCJwYW5lbEFmdGVyUG9wXCI7XHJcbiAgICAvKipcclxuICAgICAqIOWFs+mXreW8ueeql+WJjeeahOa2iOaBr1xyXG4gICAgICpcclxuICAgICAqIEBzdGF0aWNcclxuICAgICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICAgKiBAbWVtYmVyb2YgUGFuZWxNZXNzYWdlXHJcbiAgICAgKi9cclxuICAgIFBhbmVsTWVzc2FnZS5QQU5FTF9CRUZPUkVfRFJPUCA9IFwicGFuZWxCZWZvcmVEcm9wXCI7XHJcbiAgICAvKipcclxuICAgICAqIOWFs+mXreW8ueeql+WQjueahOa2iOaBr1xyXG4gICAgICpcclxuICAgICAqIEBzdGF0aWNcclxuICAgICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICAgKiBAbWVtYmVyb2YgUGFuZWxNZXNzYWdlXHJcbiAgICAgKi9cclxuICAgIFBhbmVsTWVzc2FnZS5QQU5FTF9BRlRFUl9EUk9QID0gXCJwYW5lbEFmdGVyRHJvcFwiO1xyXG4gICAgcmV0dXJuIFBhbmVsTWVzc2FnZTtcclxufSgpKTtcclxuZXhwb3J0IGRlZmF1bHQgUGFuZWxNZXNzYWdlO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9lbmdpbmUvcGFuZWwvUGFuZWxNZXNzYWdlLmpzXG4vLyBtb2R1bGUgaWQgPSA1MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcclxuICogQGF1dGhvciBSYXlraWRcclxuICogQGVtYWlsIGluaXRpYWxfckBxcS5jb21cclxuICogQGNyZWF0ZSBkYXRlIDIwMTctMDktMjFcclxuICogQG1vZGlmeSBkYXRlIDIwMTctMDktMjFcclxuICpcclxuICog6YCa55So5by556qX55qE5ZCE56eN5o6l5Y+jXHJcbiovXHJcbmV4cG9ydCB2YXIgQnV0dG9uVHlwZTtcclxuKGZ1bmN0aW9uIChCdXR0b25UeXBlKSB7XHJcbiAgICBCdXR0b25UeXBlW0J1dHRvblR5cGVbXCJub3JtYWxcIl0gPSAwXSA9IFwibm9ybWFsXCI7XHJcbiAgICBCdXR0b25UeXBlW0J1dHRvblR5cGVbXCJpbXBvcnRhbnRcIl0gPSAxXSA9IFwiaW1wb3J0YW50XCI7XHJcbn0pKEJ1dHRvblR5cGUgfHwgKEJ1dHRvblR5cGUgPSB7fSkpO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9lbmdpbmUvcGFuZWwvSVByb21wdFBhbmVsLmpzXG4vLyBtb2R1bGUgaWQgPSA1MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgeyBjb3JlIH0gZnJvbSBcIi4uLy4uL2NvcmUvQ29yZVwiO1xyXG5pbXBvcnQgQXVkaW9NZXNzYWdlIGZyb20gXCIuL0F1ZGlvTWVzc2FnZVwiO1xyXG5pbXBvcnQgeyBlbnZpcm9ubWVudCB9IGZyb20gXCIuLi9lbnYvRW52aXJvbm1lbnRcIjtcclxuLyoqXHJcbiAqIEBhdXRob3IgUmF5a2lkXHJcbiAqIEBlbWFpbCBpbml0aWFsX3JAcXEuY29tXHJcbiAqIEBjcmVhdGUgZGF0ZSAyMDE3LTEwLTMwXHJcbiAqIEBtb2RpZnkgZGF0ZSAyMDE3LTEwLTMwXHJcbiAqXHJcbiAqIOS9v+eUqEF1ZGlv5qCH562+5a6e546wSUF1ZGlv5o6l5Y+j55qE5a6e546w57G7XHJcbiovXHJcbnZhciBBdWRpb1RhZ0ltcGwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBdWRpb1RhZ0ltcGwoKSB7XHJcbiAgICAgICAgdGhpcy5fYXVkaW9DYWNoZSA9IHt9O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDliqDovb3pn7PpopFcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIOmfs+mikeWcsOWdgFxyXG4gICAgICogQG1lbWJlcm9mIEF1ZGlvVGFnSW1wbFxyXG4gICAgICovXHJcbiAgICBBdWRpb1RhZ0ltcGwucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgdG9VcmwgPSBlbnZpcm9ubWVudC50b0NETkhvc3RVUkwodXJsKTtcclxuICAgICAgICAvLyDlsJ3or5Xojrflj5bnvJPlrZjmlbDmja5cclxuICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2F1ZGlvQ2FjaGVbdG9VcmxdO1xyXG4gICAgICAgIC8vIOWmguaenOayoeaciee8k+WtmOaJjeWOu+WKoOi9vVxyXG4gICAgICAgIGlmICghZGF0YSkge1xyXG4gICAgICAgICAgICAvLyDkvb/nlKhBdWRpb+agh+etvuWKoOi9vVxyXG4gICAgICAgICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhdWRpb1wiKTtcclxuICAgICAgICAgICAgbm9kZS5zcmMgPSB0b1VybDtcclxuICAgICAgICAgICAgLy8g5L+d5a2Y5pWw5o2uXHJcbiAgICAgICAgICAgIHRoaXMuX2F1ZGlvQ2FjaGVbdG9VcmxdID0gZGF0YSA9IHsgbm9kZTogbm9kZSwgc3RhdHVzOiBBdWRpb1N0YXR1cy5MT0FESU5HLCBwbGF5UGFyYW1zOiBudWxsIH07XHJcbiAgICAgICAgICAgIC8vIOebkeWQrOWKoOi9vVxyXG4gICAgICAgICAgICBub2RlLm9ubG9hZGVkZGF0YSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vIOiusOW9leWKoOi9veWujOavlVxyXG4gICAgICAgICAgICAgICAgZGF0YS5zdGF0dXMgPSBBdWRpb1N0YXR1cy5QQVVTRUQ7XHJcbiAgICAgICAgICAgICAgICAvLyDlpoLmnpzoh6rliqjmkq3mlL7liJnmkq3mlL5cclxuICAgICAgICAgICAgICAgIGlmIChkYXRhLnBsYXlQYXJhbXMpXHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucGxheShkYXRhLnBsYXlQYXJhbXMpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBub2RlLm9uZW5kZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDmtL7lj5Hmkq3mlL7lrozmr5Xkuovku7ZcclxuICAgICAgICAgICAgICAgIGNvcmUuZGlzcGF0Y2goQXVkaW9NZXNzYWdlLkFVRElPX1BMQVlfRU5ERUQsIHVybCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5pKt5pS+6Z+z6aKR77yM5aaC5p6c6Z+z6aKR5rKh5pyJ5Yqg6L295YiZ5YWI5Yqg6L295YaN5pKt5pS+XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtBdWRpb1BsYXlQYXJhbXN9IHBhcmFtcyDpn7PpopHmkq3mlL7lj4LmlbBcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICogQG1lbWJlcm9mIEF1ZGlvVGFnSW1wbFxyXG4gICAgICovXHJcbiAgICBBdWRpb1RhZ0ltcGwucHJvdG90eXBlLnBsYXkgPSBmdW5jdGlvbiAocGFyYW1zKSB7XHJcbiAgICAgICAgdmFyIHRvVXJsID0gZW52aXJvbm1lbnQudG9DRE5Ib3N0VVJMKHBhcmFtcy51cmwpO1xyXG4gICAgICAgIC8vIOWwneivleiOt+WPlue8k+WtmOaVsOaNrlxyXG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5fYXVkaW9DYWNoZVt0b1VybF07XHJcbiAgICAgICAgaWYgKCFkYXRhKSB7XHJcbiAgICAgICAgICAgIC8vIOayoeacieWKoOi9vei/h++8jOW8gOWni+WKoOi9vemfs+mikVxyXG4gICAgICAgICAgICB0aGlzLmxvYWQocGFyYW1zLnVybCk7XHJcbiAgICAgICAgICAgIC8vIOiuvue9ruaSreaUvuWPguaVsFxyXG4gICAgICAgICAgICB0aGlzLl9hdWRpb0NhY2hlW3RvVXJsXS5wbGF5UGFyYW1zID0gcGFyYW1zO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc3dpdGNoIChkYXRhLnN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBBdWRpb1N0YXR1cy5MT0FESU5HOlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIOato+WcqOWKoOi9veS4re+8jOabv+aNouiHquWKqOaSreaUvuWPguaVsFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEucGxheVBhcmFtcyA9IHBhcmFtcztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQXVkaW9TdGF0dXMuUExBWUlORzpcclxuICAgICAgICAgICAgICAgICAgICAvLyDmraPlnKjmkq3mlL7vvIzlhbPpl63lkI7lho3mkq3mlL5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3AocGFyYW1zLnVybCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5KHBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEF1ZGlvU3RhdHVzLlBBVVNFRDpcclxuICAgICAgICAgICAgICAgICAgICAvLyDlt7Lnu4/liqDovb3lrozmr5XvvIzmmoLlgZzkuK3vvIznm7TmjqXmkq3mlL5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zLnN0b3BPdGhlcnMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcEFsbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXMubG9vcCAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm5vZGUubG9vcCA9IHBhcmFtcy5sb29wO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXMudGltZSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm5vZGUuY3VycmVudFRpbWUgPSBwYXJhbXMudGltZSAqIDAuMDAxO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOebkeWQrOaSreaUvui/m+W6plxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEubm9kZS5vbnRpbWV1cGRhdGUgPSBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOWPquacieaSreaUvueKtuaAgeWPr+S7pea0vuWPkVBST0dSRVNT5LqL5Lu2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnN0YXR1cyA9PSBBdWRpb1N0YXR1cy5QTEFZSU5HKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDmiJHku6zop4Tlrprkvb/nlKjmr6vnp5LlgLzkvZzkuLrljZXkvY1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJUaW1lID0gZGF0YS5ub2RlLmN1cnJlbnRUaW1lICogMTAwMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b3RhbFRpbWUgPSBkYXRhLm5vZGUuZHVyYXRpb24gKiAxMDAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g5rS+5Y+R5pKt5pS+6L+b5bqm5LqL5Lu2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JlLmRpc3BhdGNoKEF1ZGlvTWVzc2FnZS5BVURJT19QTEFZX1BST0dSRVNTLCBjdXJUaW1lLCB0b3RhbFRpbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAvLyDlvIDlp4vmkq3mlL5cclxuICAgICAgICAgICAgICAgICAgICBkYXRhLm5vZGUucGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOiuvue9rueKtuaAgVxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gQXVkaW9TdGF0dXMuUExBWUlORztcclxuICAgICAgICAgICAgICAgICAgICAvLyDmtL7lj5Hmkq3mlL7lvIDlp4vkuovku7ZcclxuICAgICAgICAgICAgICAgICAgICBjb3JlLmRpc3BhdGNoKEF1ZGlvTWVzc2FnZS5BVURJT19QTEFZX1NUQVJURUQsIHBhcmFtcy51cmwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEF1ZGlvVGFnSW1wbC5wcm90b3R5cGUuX2RvU3RvcCA9IGZ1bmN0aW9uICh1cmwsIHRpbWUpIHtcclxuICAgICAgICB2YXIgdG9VcmwgPSBlbnZpcm9ubWVudC50b0NETkhvc3RVUkwodXJsKTtcclxuICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2F1ZGlvQ2FjaGVbdG9VcmxdO1xyXG4gICAgICAgIGlmIChkYXRhKSB7XHJcbiAgICAgICAgICAgIGRhdGEubm9kZS5hdXRvcGxheSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBkYXRhLm5vZGUucGF1c2UoKTtcclxuICAgICAgICAgICAgLy8g6K6+572u5YGc5q2i5pe26Ze0XHJcbiAgICAgICAgICAgIGlmICh0aW1lICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICBkYXRhLm5vZGUuY3VycmVudFRpbWUgPSB0aW1lICogMC4wMDE7XHJcbiAgICAgICAgICAgIC8vIOiuvue9rueKtuaAgVxyXG4gICAgICAgICAgICBkYXRhLnN0YXR1cyA9IEF1ZGlvU3RhdHVzLlBBVVNFRDtcclxuICAgICAgICAgICAgLy8g5rS+5Y+R5pKt5pS+5YGc5q2i5LqL5Lu2XHJcbiAgICAgICAgICAgIGNvcmUuZGlzcGF0Y2goQXVkaW9NZXNzYWdlLkFVRElPX1BMQVlfU1RPUFBFRCwgdXJsKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDmmoLlgZzpn7PpopHvvIjkuI3kvJrph43nva7ov5vluqbvvIlcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIOmfs+mikVVSTFxyXG4gICAgICogQG1lbWJlcm9mIEF1ZGlvVGFnSW1wbFxyXG4gICAgICovXHJcbiAgICBBdWRpb1RhZ0ltcGwucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKHVybCkge1xyXG4gICAgICAgIHRoaXMuX2RvU3RvcCh1cmwpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5YGc5q2i6Z+z6aKR77yI5Lya6YeN572u6L+b5bqm77yJXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCDpn7PpopFVUkxcclxuICAgICAqIEBtZW1iZXJvZiBBdWRpb1RhZ0ltcGxcclxuICAgICAqL1xyXG4gICAgQXVkaW9UYWdJbXBsLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKHVybCkge1xyXG4gICAgICAgIHRoaXMuX2RvU3RvcCh1cmwsIDApO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5YGc5q2i5omA5pyJ6Z+z6aKRXHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlcm9mIEF1ZGlvVGFnSW1wbFxyXG4gICAgICovXHJcbiAgICBBdWRpb1RhZ0ltcGwucHJvdG90eXBlLnN0b3BBbGwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZm9yICh2YXIgdXJsIGluIHRoaXMuX2F1ZGlvQ2FjaGUpIHtcclxuICAgICAgICAgICAgdGhpcy5zdG9wKHVybCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog6Lez6L2s6Z+z6aKR6L+b5bqmXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCDpn7PpopFVUkxcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lIOimgei3s+i9rOWIsOeahOmfs+mikeS9jee9ru+8jOavq+enkuWAvFxyXG4gICAgICogQG1lbWJlcm9mIEF1ZGlvVGFnSW1wbFxyXG4gICAgICovXHJcbiAgICBBdWRpb1RhZ0ltcGwucHJvdG90eXBlLnNlZWsgPSBmdW5jdGlvbiAodXJsLCB0aW1lKSB7XHJcbiAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9hdWRpb0NhY2hlW3VybF07XHJcbiAgICAgICAgaWYgKGRhdGEpXHJcbiAgICAgICAgICAgIGRhdGEubm9kZS5jdXJyZW50VGltZSA9IHRpbWUgKiAwLjAwMTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQXVkaW9UYWdJbXBsO1xyXG59KCkpO1xyXG5leHBvcnQgZGVmYXVsdCBBdWRpb1RhZ0ltcGw7XHJcbnZhciBBdWRpb1N0YXR1cztcclxuKGZ1bmN0aW9uIChBdWRpb1N0YXR1cykge1xyXG4gICAgLyoqXHJcbiAgICAgKiDliqDovb3kuK1cclxuICAgICAqL1xyXG4gICAgQXVkaW9TdGF0dXNbQXVkaW9TdGF0dXNbXCJMT0FESU5HXCJdID0gMF0gPSBcIkxPQURJTkdcIjtcclxuICAgIC8qKlxyXG4gICAgICog5bey5pqC5YGcXHJcbiAgICAgKi9cclxuICAgIEF1ZGlvU3RhdHVzW0F1ZGlvU3RhdHVzW1wiUEFVU0VEXCJdID0gMV0gPSBcIlBBVVNFRFwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiDmkq3mlL7kuK1cclxuICAgICAqL1xyXG4gICAgQXVkaW9TdGF0dXNbQXVkaW9TdGF0dXNbXCJQTEFZSU5HXCJdID0gMl0gPSBcIlBMQVlJTkdcIjtcclxufSkoQXVkaW9TdGF0dXMgfHwgKEF1ZGlvU3RhdHVzID0ge30pKTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL2F1ZGlvL0F1ZGlvVGFnSW1wbC5qc1xuLy8gbW9kdWxlIGlkID0gNTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IHsgYXNzZXRzTWFuYWdlciB9IGZyb20gXCIuLi9hc3NldHMvQXNzZXRzTWFuYWdlclwiO1xyXG5pbXBvcnQgeyBjb3JlIH0gZnJvbSBcIi4uLy4uL2NvcmUvQ29yZVwiO1xyXG5pbXBvcnQgQXVkaW9NZXNzYWdlIGZyb20gXCIuL0F1ZGlvTWVzc2FnZVwiO1xyXG5pbXBvcnQgeyBlbnZpcm9ubWVudCB9IGZyb20gXCIuLi9lbnYvRW52aXJvbm1lbnRcIjtcclxuaW1wb3J0IHsgc3lzdGVtIH0gZnJvbSBcIi4uL3N5c3RlbS9TeXN0ZW1cIjtcclxuLyoqXHJcbiAqIEBhdXRob3IgUmF5a2lkXHJcbiAqIEBlbWFpbCBpbml0aWFsX3JAcXEuY29tXHJcbiAqIEBjcmVhdGUgZGF0ZSAyMDE3LTEwLTMwXHJcbiAqIEBtb2RpZnkgZGF0ZSAyMDE3LTEwLTMwXHJcbiAqXHJcbiAqIOS9v+eUqEF1ZGlvQ29udGV4dOWunueOsElBdWRpb+aOpeWPo+eahOWunueOsOexu1xyXG4qL1xyXG52YXIgQXVkaW9Db250ZXh0SW1wbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEF1ZGlvQ29udGV4dEltcGwoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLl9pbml0ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9hdWRpb0NhY2hlID0ge307XHJcbiAgICAgICAgdGhpcy5fY29udGV4dCA9IG5ldyAod2luZG93W1wiQXVkaW9Db250ZXh0XCJdIHx8IHdpbmRvd1tcIndlYmtpdEF1ZGlvQ29udGV4dFwiXSkoKTtcclxuICAgICAgICB2YXIgb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgb25Jbml0KTtcclxuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgb25Jbml0KTtcclxuICAgICAgICAgICAgLy8g55Sf5oiQ5LiA5Liq56m655qE6Z+z6aKR77yM5pKt5pS+5bm25YGc5q2i77yM55So5Lul6Kej6Zmk6ZmQ5Yi2XHJcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBfdGhpcy5fY29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcclxuICAgICAgICAgICAgc291cmNlLmJ1ZmZlciA9IF90aGlzLl9jb250ZXh0LmNyZWF0ZUJ1ZmZlcigxLCAxLCA0NDEwMCk7XHJcbiAgICAgICAgICAgIHNvdXJjZS5jb25uZWN0KF90aGlzLl9jb250ZXh0LmRlc3RpbmF0aW9uKTtcclxuICAgICAgICAgICAgc291cmNlLnN0YXJ0KCk7XHJcbiAgICAgICAgICAgIHNvdXJjZS5zdG9wKCk7XHJcbiAgICAgICAgICAgIC8vIOiuvue9ruagh+ivhuesplxyXG4gICAgICAgICAgICBfdGhpcy5faW5pdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgLy8g5aaC5p6c5b2T5YmN5pyJ5q2j5Zyo5pKt5pS+55qE6Z+z6aKR77yM5YWo6YOo5YaN5pKt5pS+5LiA5qyhXHJcbiAgICAgICAgICAgIGZvciAodmFyIHVybCBpbiBfdGhpcy5fYXVkaW9DYWNoZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBfdGhpcy5fYXVkaW9DYWNoZVt1cmxdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuc3RhdHVzID09IEF1ZGlvU3RhdHVzLlBMQVlJTkcpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDlgZzmraLmkq3mlL5cclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zdG9wKGRhdGEucGxheVBhcmFtcy51cmwpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOmHjeaWsOaSreaUvlxyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnBsYXkoZGF0YS5wbGF5UGFyYW1zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIG9uSW5pdCk7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgb25Jbml0KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5Yqg6L296Z+z6aKRXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCDpn7PpopHlnLDlnYBcclxuICAgICAqIEBtZW1iZXJvZiBBdWRpb0NvbnRleHRJbXBsXHJcbiAgICAgKi9cclxuICAgIEF1ZGlvQ29udGV4dEltcGwucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgdG9VcmwgPSBlbnZpcm9ubWVudC50b0NETkhvc3RVUkwodXJsKTtcclxuICAgICAgICAvLyDlsJ3or5Xojrflj5bnvJPlrZjmlbDmja5cclxuICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2F1ZGlvQ2FjaGVbdG9VcmxdO1xyXG4gICAgICAgIC8vIOWmguaenOayoeaciee8k+WtmOaJjeWOu+WKoOi9vVxyXG4gICAgICAgIGlmICghZGF0YSkge1xyXG4gICAgICAgICAgICAvLyDkvb/nlKhBdWRpb0NvbnRleHTliqDovb1cclxuICAgICAgICAgICAgdGhpcy5fYXVkaW9DYWNoZVt0b1VybF0gPSBkYXRhID0geyBidWZmZXI6IG51bGwsIHN0YXR1czogQXVkaW9TdGF0dXMuTE9BRElORywgcGxheVBhcmFtczogbnVsbCwgcHJvZ3Jlc3M6IG51bGwgfTtcclxuICAgICAgICAgICAgLy8g5byA5aeL5Yqg6L29XHJcbiAgICAgICAgICAgIGFzc2V0c01hbmFnZXIubG9hZEFzc2V0cyh0b1VybCwgZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2NvbnRleHQuZGVjb2RlQXVkaW9EYXRhKHJlc3VsdCwgZnVuY3Rpb24gKGJ1ZmZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmJ1ZmZlciA9IGJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g6K6+572u54q25oCBXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gQXVkaW9TdGF0dXMuUEFVU0VEO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDlpoLmnpzoh6rliqjmkq3mlL7liJnmkq3mlL5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEucGxheVBhcmFtcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnBsYXkoZGF0YS5wbGF5UGFyYW1zKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgXCJhcnJheWJ1ZmZlclwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDmkq3mlL7pn7PpopHvvIzlpoLmnpzpn7PpopHmsqHmnInliqDovb3liJnlhYjliqDovb3lho3mkq3mlL5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0F1ZGlvUGxheVBhcmFtc30gcGFyYW1zIOmfs+mikeaSreaUvuWPguaVsFxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKiBAbWVtYmVyb2YgQXVkaW9Db250ZXh0SW1wbFxyXG4gICAgICovXHJcbiAgICBBdWRpb0NvbnRleHRJbXBsLnByb3RvdHlwZS5wbGF5ID0gZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHRvVXJsID0gZW52aXJvbm1lbnQudG9DRE5Ib3N0VVJMKHBhcmFtcy51cmwpO1xyXG4gICAgICAgIC8vIOWwneivleiOt+WPlue8k+WtmOaVsOaNrlxyXG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5fYXVkaW9DYWNoZVt0b1VybF07XHJcbiAgICAgICAgaWYgKCFkYXRhKSB7XHJcbiAgICAgICAgICAgIC8vIOayoeacieWKoOi9vei/h++8jOW8gOWni+WKoOi9vemfs+mikVxyXG4gICAgICAgICAgICB0aGlzLmxvYWQocGFyYW1zLnVybCk7XHJcbiAgICAgICAgICAgIC8vIOiuvue9ruaSreaUvuWPguaVsFxyXG4gICAgICAgICAgICB0aGlzLl9hdWRpb0NhY2hlW3RvVXJsXS5wbGF5UGFyYW1zID0gcGFyYW1zO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc3dpdGNoIChkYXRhLnN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBBdWRpb1N0YXR1cy5MT0FESU5HOlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIOato+WcqOWKoOi9veS4re+8jOabv+aNouiHquWKqOaSreaUvuWPguaVsFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEucGxheVBhcmFtcyA9IHBhcmFtcztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQXVkaW9TdGF0dXMuUExBWUlORzpcclxuICAgICAgICAgICAgICAgICAgICAvLyDmraPlnKjmkq3mlL7vvIzlhbPpl63lkI7lho3mkq3mlL5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3AocGFyYW1zLnVybCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5KHBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEF1ZGlvU3RhdHVzLlBBVVNFRDpcclxuICAgICAgICAgICAgICAgICAgICAvLyDorr7nva7nirbmgIFcclxuICAgICAgICAgICAgICAgICAgICBkYXRhLnN0YXR1cyA9IEF1ZGlvU3RhdHVzLlBMQVlJTkc7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5bey57uP5Yqg6L295a6M5q+V77yM55u05o6l5pKt5pS+XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2luaXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm5vZGUgPSB0aGlzLl9jb250ZXh0LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm5vZGUuYnVmZmVyID0gZGF0YS5idWZmZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXMubG9vcCAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5ub2RlLmxvb3AgPSBwYXJhbXMubG9vcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5ub2RlLmNvbm5lY3QodGhpcy5fY29udGV4dC5kZXN0aW5hdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOebkeWQrOaSreaUvuWujOavlVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm5vZGUub25lbmRlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gX3RoaXMuX2F1ZGlvQ2FjaGVbdG9VcmxdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDlgZzmraLmkq3mlL5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zdG9wKHBhcmFtcy51cmwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOa0vuWPkeaSreaUvuWujOavleS6i+S7tlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuZGlzcGF0Y2goQXVkaW9NZXNzYWdlLkFVRElPX1BMQVlfRU5ERUQsIHBhcmFtcy51cmwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDlvIDlp4vmkq3mlL7vvIzkvJjlhYjlj5blj4LmlbDkuK3nmoTml7bpl7TvvIzmsqHmnInlsLHlj5bpu5jorqTlvIDlp4vml7bpl7RcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBsYXlUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zICYmIHBhcmFtcy50aW1lICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5VGltZSA9IHBhcmFtcy50aW1lICogMC4wMDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXlUaW1lID0gZGF0YS5wbGF5VGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGRhdGEucGxheVRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEubm9kZS5zdGFydChwbGF5VGltZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOW8gOWni+aSreaUvui/m+W6puebkea1i1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdFRpbWUgPSB0aGlzLl9jb250ZXh0LmN1cnJlbnRUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VyVGltZSA9IHBsYXlUaW1lIHx8IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucHJvZ3Jlc3MgPSBzeXN0ZW0uZW50ZXJGcmFtZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm93VGltZSA9IF90aGlzLl9jb250ZXh0LmN1cnJlbnRUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlbHRhVGltZSA9IG5vd1RpbWUgLSBsYXN0VGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RUaW1lID0gbm93VGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnN0YXR1cyA9PSBBdWRpb1N0YXR1cy5QTEFZSU5HKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyVGltZSArPSBkZWx0YVRpbWUgKiAxMDAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b3RhbFRpbWUgPSBkYXRhLm5vZGUuYnVmZmVyLmR1cmF0aW9uICogMTAwMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JlLmRpc3BhdGNoKEF1ZGlvTWVzc2FnZS5BVURJT19QTEFZX1BST0dSRVNTLCBjdXJUaW1lLCB0b3RhbFRpbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g5rS+5Y+R5pKt5pS+5byA5aeL5LqL5Lu2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcmUuZGlzcGF0Y2goQXVkaW9NZXNzYWdlLkFVRElPX1BMQVlfU1RBUlRFRCwgcGFyYW1zLnVybCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEF1ZGlvQ29udGV4dEltcGwucHJvdG90eXBlLl9kb1N0b3AgPSBmdW5jdGlvbiAodXJsLCB0aW1lKSB7XHJcbiAgICAgICAgdmFyIHRvVXJsID0gZW52aXJvbm1lbnQudG9DRE5Ib3N0VVJMKHVybCk7XHJcbiAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9hdWRpb0NhY2hlW3RvVXJsXTtcclxuICAgICAgICBpZiAoZGF0YSkge1xyXG4gICAgICAgICAgICAvLyDorr7nva7nirbmgIFcclxuICAgICAgICAgICAgZGF0YS5zdGF0dXMgPSBBdWRpb1N0YXR1cy5QQVVTRUQ7XHJcbiAgICAgICAgICAgIC8vIOWPlua2iOi/m+W6puebkea1i1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5wcm9ncmVzcylcclxuICAgICAgICAgICAgICAgIGRhdGEucHJvZ3Jlc3MuY2FuY2VsKCk7XHJcbiAgICAgICAgICAgIC8vIOe7k+adn+aSreaUvlxyXG4gICAgICAgICAgICBpZiAoZGF0YS5ub2RlKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhLm5vZGUuc3RvcCh0aW1lKTtcclxuICAgICAgICAgICAgICAgIC8vIOa0vuWPkeaSreaUvuWBnOatouS6i+S7tlxyXG4gICAgICAgICAgICAgICAgY29yZS5kaXNwYXRjaChBdWRpb01lc3NhZ2UuQVVESU9fUExBWV9TVE9QUEVELCB1cmwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5pqC5YGc6Z+z6aKR77yI5LiN5Lya6YeN572u6L+b5bqm77yJXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCDpn7PpopFVUkxcclxuICAgICAqIEBtZW1iZXJvZiBBdWRpb0NvbnRleHRJbXBsXHJcbiAgICAgKi9cclxuICAgIEF1ZGlvQ29udGV4dEltcGwucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKHVybCkge1xyXG4gICAgICAgIHRoaXMuX2RvU3RvcCh1cmwpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5YGc5q2i6Z+z6aKR77yI5Lya6YeN572u6L+b5bqm77yJXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCDpn7PpopFVUkxcclxuICAgICAqIEBtZW1iZXJvZiBBdWRpb0NvbnRleHRJbXBsXHJcbiAgICAgKi9cclxuICAgIEF1ZGlvQ29udGV4dEltcGwucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgdGhpcy5fZG9TdG9wKHVybCwgMCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDlgZzmraLmiYDmnInpn7PpopFcclxuICAgICAqXHJcbiAgICAgKiBAbWVtYmVyb2YgQXVkaW9Db250ZXh0SW1wbFxyXG4gICAgICovXHJcbiAgICBBdWRpb0NvbnRleHRJbXBsLnByb3RvdHlwZS5zdG9wQWxsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZvciAodmFyIHVybCBpbiB0aGlzLl9hdWRpb0NhY2hlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RvcCh1cmwpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOi3s+i9rOmfs+mikei/m+W6plxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwg6Z+z6aKRVVJMXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZSDopoHot7PovazliLDnmoTpn7PpopHkvY3nva7vvIzmr6vnp5LlgLxcclxuICAgICAqIEBtZW1iZXJvZiBBdWRpb0NvbnRleHRJbXBsXHJcbiAgICAgKi9cclxuICAgIEF1ZGlvQ29udGV4dEltcGwucHJvdG90eXBlLnNlZWsgPSBmdW5jdGlvbiAodXJsLCB0aW1lKSB7XHJcbiAgICAgICAgdmFyIHRvVXJsID0gZW52aXJvbm1lbnQudG9DRE5Ib3N0VVJMKHVybCk7XHJcbiAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9hdWRpb0NhY2hlW3RvVXJsXTtcclxuICAgICAgICBpZiAoZGF0YSkge1xyXG4gICAgICAgICAgICB2YXIgcGFyYW1zID0gZGF0YS5wbGF5UGFyYW1zO1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5zdGF0dXMgPT0gQXVkaW9TdGF0dXMuUExBWUlORykge1xyXG4gICAgICAgICAgICAgICAgLy8g5YGc5q2i6YeN5paw5pKt5pS+XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3AodXJsKTtcclxuICAgICAgICAgICAgICAgIHBhcmFtcy50aW1lID0gdGltZTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxheShwYXJhbXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGF0YS5wbGF5VGltZSA9IHRpbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEF1ZGlvQ29udGV4dEltcGw7XHJcbn0oKSk7XHJcbmV4cG9ydCBkZWZhdWx0IEF1ZGlvQ29udGV4dEltcGw7XHJcbnZhciBBdWRpb1N0YXR1cztcclxuKGZ1bmN0aW9uIChBdWRpb1N0YXR1cykge1xyXG4gICAgLyoqXHJcbiAgICAgKiDliqDovb3kuK1cclxuICAgICAqL1xyXG4gICAgQXVkaW9TdGF0dXNbQXVkaW9TdGF0dXNbXCJMT0FESU5HXCJdID0gMF0gPSBcIkxPQURJTkdcIjtcclxuICAgIC8qKlxyXG4gICAgICog5bey5pqC5YGcXHJcbiAgICAgKi9cclxuICAgIEF1ZGlvU3RhdHVzW0F1ZGlvU3RhdHVzW1wiUEFVU0VEXCJdID0gMV0gPSBcIlBBVVNFRFwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiDmkq3mlL7kuK1cclxuICAgICAqL1xyXG4gICAgQXVkaW9TdGF0dXNbQXVkaW9TdGF0dXNbXCJQTEFZSU5HXCJdID0gMl0gPSBcIlBMQVlJTkdcIjtcclxufSkoQXVkaW9TdGF0dXMgfHwgKEF1ZGlvU3RhdHVzID0ge30pKTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL2F1ZGlvL0F1ZGlvQ29udGV4dEltcGwuanNcbi8vIG1vZHVsZSBpZCA9IDU0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn07XHJcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xyXG59O1xyXG5pbXBvcnQgeyBjb3JlIH0gZnJvbSBcIi4uLy4uL2NvcmUvQ29yZVwiO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIi4uLy4uL2NvcmUvaW5qZWN0b3IvSW5qZWN0b3JcIjtcclxuLyoqXHJcbiAqIEBhdXRob3IgUmF5a2lkXHJcbiAqIEBlbWFpbCBpbml0aWFsX3JAcXEuY29tXHJcbiAqIEBjcmVhdGUgZGF0ZSAyMDE3LTA5LTA2XHJcbiAqIEBtb2RpZnkgZGF0ZSAyMDE3LTA5LTA2XHJcbiAqXHJcbiAqIOeUqOadpeiusOW9leeoi+W6j+i/kOihjOaXtumXtO+8jOW5tuS4lOaPkOS+m+W7tui/n+Wbnuiwg+aIlumikeeOh+Wbnuiwg+WKn+iDvVxyXG4qL1xyXG52YXIgU3lzdGVtID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU3lzdGVtKCkge1xyXG4gICAgICAgIC8vIOi/memHjOWwneivleS4gOS4i1RT55qEVHVwbGXnsbvlnovigJTigJRSYXlraWRcclxuICAgICAgICB0aGlzLl9uZXh0RnJhbWVMaXN0ID0gW107XHJcbiAgICAgICAgdGhpcy5fdGltZXIgPSAwO1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBpZiAocmVxdWVzdEFuaW1hdGlvbkZyYW1lIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcclxuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKG9uUmVxdWVzdEFuaW1hdGlvbkZyYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIOWmguaenOS4jeaUr+aMgXJlcXVlc3RBbmltYXRpb25GcmFtZeWImeaUueeUqHNldFRpbWVvdXTorqHml7bvvIzlu7bov5/ml7bpl7QxMDAwLzYw5q+r56eSXHJcbiAgICAgICAgICAgIHZhciBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3VyVGltZSA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgICAgICAvLyDotYvlgLx0aW1lclxyXG4gICAgICAgICAgICAgICAgc2VsZi5fdGltZXIgPSBjdXJUaW1lIC0gc3RhcnRUaW1lO1xyXG4gICAgICAgICAgICAgICAgLy8g6LCD55SodGlja+aWueazlVxyXG4gICAgICAgICAgICAgICAgc2VsZi50aWNrKCk7XHJcbiAgICAgICAgICAgIH0sIDEwMDAgLyA2MCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIG9uUmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRpbWVyKSB7XHJcbiAgICAgICAgICAgIC8vIOi1i+WAvHRpbWVy77yM6L+Z5Liq5pa55rOV6YeM5peg5rOV6I635Y+WdGhpc++8jOWboOatpOmcgOimgemAmui/h+azqOWFpeeahOmdmeaAgeWxnuaAp+WPluWIsOiHqui6q+WunuS+i1xyXG4gICAgICAgICAgICBzZWxmLl90aW1lciA9IHRpbWVyO1xyXG4gICAgICAgICAgICAvLyDosIPnlKh0aWNr5pa55rOVXHJcbiAgICAgICAgICAgIHNlbGYudGljaygpO1xyXG4gICAgICAgICAgICAvLyDorqHliJLkuIvkuIDmrKHmiafooYxcclxuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKG9uUmVxdWVzdEFuaW1hdGlvbkZyYW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluS7jueoi+W6j+i/kOihjOWIsOW9k+WJjeaJgOe7j+i/h+eahOavq+enkuaVsFxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IOavq+enkuaVsFxyXG4gICAgICogQG1lbWJlcm9mIFN5c3RlbVxyXG4gICAgICovXHJcbiAgICBTeXN0ZW0ucHJvdG90eXBlLmdldFRpbWVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90aW1lcjtcclxuICAgIH07XHJcbiAgICBTeXN0ZW0ucHJvdG90eXBlLnRpY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8g6LCD55So5LiL5LiA5bin5Zue6LCDXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuX25leHRGcmFtZUxpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9uZXh0RnJhbWVMaXN0LnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIGRhdGFbMF0uYXBwbHkoZGF0YVsxXSwgZGF0YVsyXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5Zyo5LiL5LiA5bin5omn6KGM5p+Q5Liq5pa55rOVXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciDluIzmnJvlnKjkuIvkuIDluKfmiafooYznmoTmn5DkuKrmlrnms5VcclxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIHRoaXPmjIflkJFcclxuICAgICAqIEBwYXJhbSB7Li4uYW55W119IGFyZ3Mg5pa55rOV5Y+C5pWw5YiX6KGoXHJcbiAgICAgKiBAcmV0dXJucyB7SUNhbmNlbGFibGV9IOWPr+WPlua2iOeahOWPpeafhFxyXG4gICAgICogQG1lbWJlcm9mIFN5c3RlbVxyXG4gICAgICovXHJcbiAgICBTeXN0ZW0ucHJvdG90eXBlLm5leHRGcmFtZSA9IGZ1bmN0aW9uIChoYW5kbGVyLCB0aGlzQXJnKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBkYXRhID0gW2hhbmRsZXIsIHRoaXNBcmcsIGFyZ3NdO1xyXG4gICAgICAgIHRoaXMuX25leHRGcmFtZUxpc3QucHVzaChkYXRhKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBjYW5jZWw6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IF90aGlzLl9uZXh0RnJhbWVMaXN0LmluZGV4T2YoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gMClcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fbmV4dEZyYW1lTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOavj+W4p+aJp+ihjOafkOS4quaWueazle+8jOebtOWIsOWPlua2iOS9jee9rlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIg5q+P5bin5omn6KGM55qE5p+Q5Liq5pa55rOVXHJcbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSB0aGlz5oyH5ZCRXHJcbiAgICAgKiBAcGFyYW0gey4uLmFueVtdfSBhcmdzIOaWueazleWPguaVsOWIl+ihqFxyXG4gICAgICogQHJldHVybnMge0lDYW5jZWxhYmxlfSDlj6/lj5bmtojnmoTlj6Xmn4RcclxuICAgICAqIEBtZW1iZXJvZiBTeXN0ZW1cclxuICAgICAqL1xyXG4gICAgU3lzdGVtLnByb3RvdHlwZS5lbnRlckZyYW1lID0gZnVuY3Rpb24gKGhhbmRsZXIsIHRoaXNBcmcpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICB2YXIgY2FuY2VsYWJsZSA9IHRoaXMubmV4dEZyYW1lLmFwcGx5KHRoaXMsIFt3cmFwSGFuZGxlciwgdGhpc0FyZ10uY29uY2F0KGFyZ3MpKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBjYW5jZWw6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGNhbmNlbGFibGUuY2FuY2VsKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGZ1bmN0aW9uIHdyYXBIYW5kbGVyKCkge1xyXG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIOiwg+eUqOWbnuiwg1xyXG4gICAgICAgICAgICBoYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgICAgICAvLyDmiafooYzkuIvkuIDluKdcclxuICAgICAgICAgICAgY2FuY2VsYWJsZSA9IHNlbGYubmV4dEZyYW1lLmFwcGx5KHNlbGYsIFt3cmFwSGFuZGxlciwgdGhpc10uY29uY2F0KGFyZ3MpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDorr7nva7lu7bov5/lm57osINcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb24g5bu26L+f5q+r56eS5YC8XHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIOWbnuiwg+WHveaVsFxyXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gdGhpc+aMh+WQkVxyXG4gICAgICogQHBhcmFtIHsuLi5hbnlbXX0gYXJncyDopoHkvKDpgJLnmoTlj4LmlbBcclxuICAgICAqIEByZXR1cm5zIHtJQ2FuY2VsYWJsZX0g5Y+v5Y+W5raI55qE5Y+l5p+EXHJcbiAgICAgKiBAbWVtYmVyb2YgU3lzdGVtXHJcbiAgICAgKi9cclxuICAgIFN5c3RlbS5wcm90b3R5cGUuc2V0VGltZW91dCA9IGZ1bmN0aW9uIChkdXJhdGlvbiwgaGFuZGxlciwgdGhpc0FyZykge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAzOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaSAtIDNdID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHN0YXJ0VGltZXIgPSB0aGlzLl90aW1lcjtcclxuICAgICAgICAvLyDlkK/liqjorqHml7blmahcclxuICAgICAgICB2YXIgbmV4dEZyYW1lID0gdGhpcy5uZXh0RnJhbWUodGljaywgdGhpcyk7XHJcbiAgICAgICAgZnVuY3Rpb24gdGljaygpIHtcclxuICAgICAgICAgICAgdmFyIGRlbHRhID0gdGhpcy5fdGltZXIgLSBzdGFydFRpbWVyO1xyXG4gICAgICAgICAgICBpZiAoZGVsdGEgPj0gZHVyYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIG5leHRGcmFtZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbmV4dEZyYW1lID0gdGhpcy5uZXh0RnJhbWUodGljaywgdGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY2FuY2VsOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBuZXh0RnJhbWUgJiYgbmV4dEZyYW1lLmNhbmNlbCgpO1xyXG4gICAgICAgICAgICAgICAgbmV4dEZyYW1lID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDorr7nva7lu7bml7bpl7TpmpRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb24g5bu26L+f5q+r56eS5YC8XHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIOWbnuiwg+WHveaVsFxyXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gdGhpc+aMh+WQkVxyXG4gICAgICogQHBhcmFtIHsuLi5hbnlbXX0gYXJncyDopoHkvKDpgJLnmoTlj4LmlbBcclxuICAgICAqIEByZXR1cm5zIHtJQ2FuY2VsYWJsZX0g5Y+v5Y+W5raI55qE5Y+l5p+EXHJcbiAgICAgKiBAbWVtYmVyb2YgU3lzdGVtXHJcbiAgICAgKi9cclxuICAgIFN5c3RlbS5wcm90b3R5cGUuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbiAoZHVyYXRpb24sIGhhbmRsZXIsIHRoaXNBcmcpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMzsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAzXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB0aW1lb3V0ID0gdGhpcy5zZXRUaW1lb3V0KGR1cmF0aW9uLCBvblRpbWVvdXQsIHRoaXMpO1xyXG4gICAgICAgIGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcclxuICAgICAgICAgICAgLy8g6Kem5Y+R5Zue6LCDXHJcbiAgICAgICAgICAgIGhhbmRsZXIuYXBwbHkodGhpc0FyZywgYXJncyk7XHJcbiAgICAgICAgICAgIC8vIOe7p+e7reS4i+S4gOasoVxyXG4gICAgICAgICAgICB0aW1lb3V0ID0gdGhpcy5zZXRUaW1lb3V0KGR1cmF0aW9uLCBvblRpbWVvdXQsIHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBjYW5jZWw6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHRpbWVvdXQgJiYgdGltZW91dC5jYW5jZWwoKTtcclxuICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICBTeXN0ZW0gPSBfX2RlY29yYXRlKFtcclxuICAgICAgICBJbmplY3RhYmxlLFxyXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbXSlcclxuICAgIF0sIFN5c3RlbSk7XHJcbiAgICByZXR1cm4gU3lzdGVtO1xyXG59KCkpO1xyXG5leHBvcnQgZGVmYXVsdCBTeXN0ZW07XHJcbi8qKiDlho3pop3lpJblr7zlh7rkuIDkuKrljZXkvosgKi9cclxuZXhwb3J0IHZhciBzeXN0ZW0gPSBjb3JlLmdldEluamVjdChTeXN0ZW0pO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9lbmdpbmUvc3lzdGVtL1N5c3RlbS5qc1xuLy8gbW9kdWxlIGlkID0gNTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufTtcclxuaW1wb3J0IHsgY29yZSB9IGZyb20gXCIuLi8uLi9jb3JlL0NvcmVcIjtcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCIuLi8uLi9jb3JlL2luamVjdG9yL0luamVjdG9yXCI7XHJcbmltcG9ydCBub25lIGZyb20gXCIuL05vbmVTY2VuZVBvbGljeVwiO1xyXG5pbXBvcnQgU2NlbmVNZXNzYWdlIGZyb20gXCIuL1NjZW5lTWVzc2FnZVwiO1xyXG5pbXBvcnQgeyB3YWl0LCBub3RpZnkgfSBmcm9tIFwiLi4vLi4vdXRpbHMvU3luY1V0aWxcIjtcclxuLyoqXHJcbiAqIEBhdXRob3IgUmF5a2lkXHJcbiAqIEBlbWFpbCBpbml0aWFsX3JAcXEuY29tXHJcbiAqIEBjcmVhdGUgZGF0ZSAyMDE3LTA5LTA4XHJcbiAqIEBtb2RpZnkgZGF0ZSAyMDE3LTA5LTA4XHJcbiAqXHJcbiAqIOW8ueeql+euoeeQhuWZqO+8jOWMheWQq+WIh+aNouWcuuaZr+OAgXB1c2jlnLrmma/jgIFwb3DlnLrmma/lip/og71cclxuKi9cclxudmFyIFNZTkNfTkFNRSA9IFwiU2NlbmVNYW5hZ2VyX3N5bmNcIjtcclxudmFyIENoYW5nZVR5cGU7XHJcbihmdW5jdGlvbiAoQ2hhbmdlVHlwZSkge1xyXG4gICAgQ2hhbmdlVHlwZVtDaGFuZ2VUeXBlW1wiU3dpdGNoXCJdID0gMF0gPSBcIlN3aXRjaFwiO1xyXG4gICAgQ2hhbmdlVHlwZVtDaGFuZ2VUeXBlW1wiUHVzaFwiXSA9IDFdID0gXCJQdXNoXCI7XHJcbiAgICBDaGFuZ2VUeXBlW0NoYW5nZVR5cGVbXCJQb3BcIl0gPSAyXSA9IFwiUG9wXCI7XHJcbn0pKENoYW5nZVR5cGUgfHwgKENoYW5nZVR5cGUgPSB7fSkpO1xyXG52YXIgU2NlbmVNYW5hZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU2NlbmVNYW5hZ2VyKCkge1xyXG4gICAgICAgIHRoaXMuX3NjZW5lU3RhY2sgPSBbXTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTY2VuZU1hbmFnZXIucHJvdG90eXBlLCBcImN1cnJlbnRTY2VuZVwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6I635Y+W5b2T5YmN5Zy65pmvXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcmVhZG9ubHlcclxuICAgICAgICAgKiBAdHlwZSB7SVNjZW5lfVxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBTY2VuZU1hbmFnZXJcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NjZW5lU3RhY2tbMF07XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2NlbmVNYW5hZ2VyLnByb3RvdHlwZSwgXCJhY3RpdmVDb3VudFwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6I635Y+W5rS75Yqo5Zy65pmv5Liq5pWwXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcmVhZG9ubHlcclxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICAgICAqIEBtZW1iZXJvZiBTY2VuZU1hbmFnZXJcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NjZW5lU3RhY2subGVuZ3RoO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5blnLrmma/mmK/lkKblt7Lnu4/lvIDlkK9cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0lTY2VuZX0gc2NlbmUg5Zy65pmv5a+56LGhXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0g5piv5ZCm5bey57uP5byA5ZCvXHJcbiAgICAgKiBAbWVtYmVyb2YgU2NlbmVNYW5hZ2VyXHJcbiAgICAgKi9cclxuICAgIFNjZW5lTWFuYWdlci5wcm90b3R5cGUuaXNPcGVuZWQgPSBmdW5jdGlvbiAoc2NlbmUpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuX3NjZW5lU3RhY2suaW5kZXhPZihzY2VuZSkgPj0gMCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDliIfmjaLlnLrmma/vvIzmm7/mjaLlvZPliY3lnLrmma/vvIzlvZPliY3lnLrmma/kvJrooqvplIDmr4FcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0lTY2VuZX0gc2NlbmUg6KaB5YiH5o2i5Yiw55qE5Zy65pmvXHJcbiAgICAgKiBAcGFyYW0geyp9IFtkYXRhXSDopoHmkLrluKbnu5nkuIvkuIDkuKrlnLrmma/nmoTmlbDmja5cclxuICAgICAqIEByZXR1cm5zIHtJU2NlbmV9IOWcuuaZr+acrOS9k1xyXG4gICAgICogQG1lbWJlcm9mIFNjZW5lTWFuYWdlclxyXG4gICAgICovXHJcbiAgICBTY2VuZU1hbmFnZXIucHJvdG90eXBlLnN3aXRjaCA9IGZ1bmN0aW9uIChzY2VuZSwgZGF0YSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgLy8g6Z2e56m65Yik5patXHJcbiAgICAgICAgaWYgKHNjZW5lID09IG51bGwpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAvLyDlpoLmnpzliIflhaXnmoTmmK/nrKzkuIDkuKrlnLrmma/vvIzliJnmlLnnlKhwdXNo5pON5L2cXHJcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlQ291bnQgPT0gMClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHVzaChzY2VuZSwgZGF0YSk7XHJcbiAgICAgICAgLy8g5ZCM5q2l5omn6KGMXHJcbiAgICAgICAgd2FpdChTWU5DX05BTUUsIHRoaXMuZG9DaGFuZ2UsIHRoaXMsIHRoaXMuY3VycmVudFNjZW5lLCBzY2VuZSwgZGF0YSwgc2NlbmUucG9saWN5IHx8IHNjZW5lLmJyaWRnZS5kZWZhdWx0U2NlbmVQb2xpY3kgfHwgbm9uZSwgQ2hhbmdlVHlwZS5Td2l0Y2gsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGxhc3RTY2VuZSA9IF90aGlzLl9zY2VuZVN0YWNrWzBdO1xyXG4gICAgICAgICAgICAvLyDmlbDmja7lhYjooYxcclxuICAgICAgICAgICAgX3RoaXMuX3NjZW5lU3RhY2tbMF0gPSBzY2VuZTtcclxuICAgICAgICAgICAgLy8g6LCD55So5o6l5Y+jXHJcbiAgICAgICAgICAgIGxhc3RTY2VuZSAmJiBsYXN0U2NlbmUuX19jbG9zZShkYXRhKTtcclxuICAgICAgICAgICAgc2NlbmUuX19vcGVuKGRhdGEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBzY2VuZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOaOqOWFpeWcuuaZr++8jOW9k+WJjeWcuuaZr+S4jeS8mumUgOavge+8jOiAjOaYr+i/m+WFpeWcuuaZr+agiOS/neWtmO+8jOS7peWQjuWPr+S7pemAmui/h3BvcFNjZW5l6YeN5paw5bGV546wXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtJU2NlbmV9IHNjZW5lIOimgeaOqOWFpeeahOWcuuaZr1xyXG4gICAgICogQHBhcmFtIHsqfSBbZGF0YV0g6KaB5pC65bim57uZ5LiL5LiA5Liq5Zy65pmv55qE5pWw5o2uXHJcbiAgICAgKiBAcmV0dXJucyB7SVNjZW5lfSDlnLrmma/mnKzkvZNcclxuICAgICAqIEBtZW1iZXJvZiBTY2VuZU1hbmFnZXJcclxuICAgICAqL1xyXG4gICAgU2NlbmVNYW5hZ2VyLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKHNjZW5lLCBkYXRhKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvLyDpnZ7nqbrliKTmlq1cclxuICAgICAgICBpZiAoc2NlbmUgPT0gbnVsbClcclxuICAgICAgICAgICAgcmV0dXJuIHNjZW5lO1xyXG4gICAgICAgIC8vIOWQjOatpeaJp+ihjFxyXG4gICAgICAgIHdhaXQoU1lOQ19OQU1FLCB0aGlzLmRvQ2hhbmdlLCB0aGlzLCB0aGlzLmN1cnJlbnRTY2VuZSwgc2NlbmUsIGRhdGEsIHNjZW5lLnBvbGljeSB8fCBzY2VuZS5icmlkZ2UuZGVmYXVsdFNjZW5lUG9saWN5IHx8IG5vbmUsIENoYW5nZVR5cGUuUHVzaCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyDmlbDmja7lhYjooYxcclxuICAgICAgICAgICAgX3RoaXMuX3NjZW5lU3RhY2sudW5zaGlmdChzY2VuZSk7XHJcbiAgICAgICAgICAgIC8vIOiwg+eUqOaOpeWPo1xyXG4gICAgICAgICAgICBzY2VuZS5fX29wZW4oZGF0YSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHNjZW5lO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5by55Ye65Zy65pmv77yM5b2T5YmN5Zy65pmv5Lya6KKr6ZSA5q+B77yM5b2T5YmN5L2N5LqO5qCI6aG255qE5Zy65pmv5Lya6YeN5paw5pi+56S6XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtJU2NlbmV9IHNjZW5lIOimgeWIh+aNouWHuueahOWcuuaZr++8jOWmguaenOS8oOWFpeeahOWcuuaZr+S4jeaYr+W9k+WJjeWcuuaZr+WImeS7heenu+mZpOaMh+WumuWcuuaZr++8jOS4jeS8mui/m+ihjOWIh+aNouaTjeS9nFxyXG4gICAgICogQHBhcmFtIHsqfSBbZGF0YV0g6KaB5pC65bim57uZ5LiL5LiA5Liq5Zy65pmv55qE5pWw5o2uXHJcbiAgICAgKiBAcmV0dXJucyB7SVNjZW5lfSDlnLrmma/mnKzkvZNcclxuICAgICAqIEBtZW1iZXJvZiBTY2VuZU1hbmFnZXJcclxuICAgICAqL1xyXG4gICAgU2NlbmVNYW5hZ2VyLnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbiAoc2NlbmUsIGRhdGEpIHtcclxuICAgICAgICAvLyDpnZ7nqbrliKTmlq1cclxuICAgICAgICBpZiAoc2NlbmUgPT0gbnVsbClcclxuICAgICAgICAgICAgcmV0dXJuIHNjZW5lO1xyXG4gICAgICAgIC8vIOWQjOatpeaJp+ihjFxyXG4gICAgICAgIHdhaXQoU1lOQ19OQU1FLCB0aGlzLmRvUG9wLCB0aGlzLCBzY2VuZSwgZGF0YSk7XHJcbiAgICAgICAgcmV0dXJuIHNjZW5lO1xyXG4gICAgfTtcclxuICAgIFNjZW5lTWFuYWdlci5wcm90b3R5cGUuZG9Qb3AgPSBmdW5jdGlvbiAoc2NlbmUsIGRhdGEpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIC8vIOWmguaenOayoeaciei2s+Wkn+eahOWcuuaZr+WCqOWkh+WImeS7gOS5iOmDveS4jeWBmlxyXG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZUNvdW50IDw9IDEpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCLlnLrmma/moIjkuK3nmoTlnLrmma/mlbDph4/kuI3otrPvvIzml6Dms5XmiafooYxwb3Dmk43kvZxcIik7XHJcbiAgICAgICAgICAgIC8vIOWujOaIkOatpemqpFxyXG4gICAgICAgICAgICBub3RpZnkoU1lOQ19OQU1FKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDpqozor4HmmK/lkKbmmK/lvZPliY3lnLrmma/vvIzkuI3mmK/liJnnm7TmjqXnp7vpmaTvvIzkuI3kvb/nlKhQb2xpY3lcclxuICAgICAgICB2YXIgdG8gPSB0aGlzLl9zY2VuZVN0YWNrWzFdO1xyXG4gICAgICAgIHZhciBwb2xpY3kgPSBzY2VuZS5wb2xpY3kgfHwgc2NlbmUuYnJpZGdlLmRlZmF1bHRTY2VuZVBvbGljeSB8fCBub25lO1xyXG4gICAgICAgIGlmICh0aGlzLl9zY2VuZVN0YWNrLmluZGV4T2Yoc2NlbmUpICE9IDApIHtcclxuICAgICAgICAgICAgdG8gPSBudWxsO1xyXG4gICAgICAgICAgICBwb2xpY3kgPSBub25lO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDmiafooYzliIfmjaJcclxuICAgICAgICB0aGlzLmRvQ2hhbmdlKHNjZW5lLCB0bywgZGF0YSwgcG9saWN5LCBDaGFuZ2VUeXBlLlBvcCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyDmlbDmja7lhYjooYxcclxuICAgICAgICAgICAgX3RoaXMuX3NjZW5lU3RhY2suc3BsaWNlKF90aGlzLl9zY2VuZVN0YWNrLmluZGV4T2Yoc2NlbmUpLCAxKTtcclxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIOiwg+eUqOaOpeWPo1xyXG4gICAgICAgICAgICBzY2VuZS5fX2Nsb3NlKGRhdGEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFNjZW5lTWFuYWdlci5wcm90b3R5cGUuZG9DaGFuZ2UgPSBmdW5jdGlvbiAoZnJvbSwgdG8sIGRhdGEsIHBvbGljeSwgdHlwZSwgYmVnaW4sIGNvbXBsZXRlKSB7XHJcbiAgICAgICAgLy8g5aaC5p6cZnJvbeWSjHRv5pyJ5LiA5Liq5Li6bnVsbOWImXBvbGljeeS4um5vbmVcclxuICAgICAgICBpZiAoIWZyb20gfHwgIXRvKVxyXG4gICAgICAgICAgICBwb2xpY3kgPSBub25lO1xyXG4gICAgICAgIC8vIHRv5oyH5a6a55qE5Zy65pmv5b+F6aG76KaB5pi+56S6XHJcbiAgICAgICAgaWYgKHRvKVxyXG4gICAgICAgICAgICB0by5icmlkZ2UuaHRtbFdyYXBwZXIuc3R5bGUuZGlzcGxheSA9IFwiXCI7XHJcbiAgICAgICAgLy8g5aaC5p6c6KaB5Lqk5pu/55qE5Lik5Liq5Zy65pmv5LiN5piv5ZCM5LiA5Liq57G75Z6L55qE5Zy65pmv77yM5YiZ5YiH5o2iSFRNTFdyYXBwZXLmmL7npLrvvIzkuJRQb2xpY3nkuZ/ph4fnlKjml6DliIfmjaLnrZbnlaVcclxuICAgICAgICBpZiAoZnJvbSAmJiB0byAmJiB0by5icmlkZ2UudHlwZSAhPSBmcm9tLmJyaWRnZS50eXBlKSB7XHJcbiAgICAgICAgICAgIGZyb20uYnJpZGdlLmh0bWxXcmFwcGVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgcG9saWN5ID0gbm9uZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g6LCD55So5Zue6LCDXHJcbiAgICAgICAgYmVnaW4gJiYgYmVnaW4oKTtcclxuICAgICAgICAvLyDojrflj5bmjqXlj6PlvJXnlKhcclxuICAgICAgICB2YXIgcHJlcGFyZUZ1bmM7XHJcbiAgICAgICAgdmFyIGRvRnVuYztcclxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBDaGFuZ2VUeXBlLlN3aXRjaDpcclxuICAgICAgICAgICAgICAgIHByZXBhcmVGdW5jID0gcG9saWN5LnByZXBhcmVTd2l0Y2g7XHJcbiAgICAgICAgICAgICAgICBkb0Z1bmMgPSBwb2xpY3kuc3dpdGNoO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ2hhbmdlVHlwZS5QdXNoOlxyXG4gICAgICAgICAgICAgICAgcHJlcGFyZUZ1bmMgPSBwb2xpY3kucHJlcGFyZVB1c2ggfHwgcG9saWN5LnByZXBhcmVTd2l0Y2g7XHJcbiAgICAgICAgICAgICAgICBkb0Z1bmMgPSBwb2xpY3kucHVzaCB8fCBwb2xpY3kuc3dpdGNoO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ2hhbmdlVHlwZS5Qb3A6XHJcbiAgICAgICAgICAgICAgICBwcmVwYXJlRnVuYyA9IHBvbGljeS5wcmVwYXJlUG9wIHx8IHBvbGljeS5wcmVwYXJlU3dpdGNoO1xyXG4gICAgICAgICAgICAgICAgZG9GdW5jID0gcG9saWN5LnBvcCB8fCBwb2xpY3kuc3dpdGNoO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOWJjee9ruWkhOeQhlxyXG4gICAgICAgIHRvICYmIGZyb20gJiYgZnJvbS5vbkJlZm9yZU91dCh0bywgZGF0YSk7XHJcbiAgICAgICAgdG8gJiYgdG8ub25CZWZvcmVJbihmcm9tLCBkYXRhKTtcclxuICAgICAgICAvLyDmtL7lj5Hkuovku7ZcclxuICAgICAgICB0byAmJiBjb3JlLmRpc3BhdGNoKFNjZW5lTWVzc2FnZS5TQ0VORV9CRUZPUkVfQ0hBTkdFLCB0bywgZnJvbSk7XHJcbiAgICAgICAgLy8g6LCD55So5YeG5aSH5o6l5Y+jXHJcbiAgICAgICAgcHJlcGFyZUZ1bmMgJiYgcHJlcGFyZUZ1bmMuY2FsbChwb2xpY3ksIGZyb20sIHRvKTtcclxuICAgICAgICAvLyDmt7vliqDmmL7npLpcclxuICAgICAgICB0byAmJiB0by5icmlkZ2UuYWRkQ2hpbGQodG8uYnJpZGdlLnNjZW5lTGF5ZXIsIHRvLnNraW4pO1xyXG4gICAgICAgIC8vIOiwg+eUqOWIh+aNouaOpeWPo1xyXG4gICAgICAgIGRvRnVuYy5jYWxsKHBvbGljeSwgZnJvbSwgdG8sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy8g56e76Zmk5pi+56S6XHJcbiAgICAgICAgICAgIHRvICYmIGZyb20gJiYgZnJvbS5icmlkZ2UucmVtb3ZlQ2hpbGQoZnJvbS5icmlkZ2Uuc2NlbmVMYXllciwgZnJvbS5za2luKTtcclxuICAgICAgICAgICAgLy8g6LCD55So5Zue6LCDXHJcbiAgICAgICAgICAgIGNvbXBsZXRlICYmIGNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgIC8vIOWQjue9ruWkhOeQhlxyXG4gICAgICAgICAgICB0byAmJiBmcm9tICYmIGZyb20ub25BZnRlck91dCh0bywgZGF0YSk7XHJcbiAgICAgICAgICAgIHRvICYmIHRvLm9uQWZ0ZXJJbihmcm9tLCBkYXRhKTtcclxuICAgICAgICAgICAgLy8g5rS+5Y+R5LqL5Lu2XHJcbiAgICAgICAgICAgIHRvICYmIGNvcmUuZGlzcGF0Y2goU2NlbmVNZXNzYWdlLlNDRU5FX0FGVEVSX0NIQU5HRSwgdG8sIGZyb20pO1xyXG4gICAgICAgICAgICAvLyDlrozmiJDmraXpqqRcclxuICAgICAgICAgICAgbm90aWZ5KFNZTkNfTkFNRSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgU2NlbmVNYW5hZ2VyID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgSW5qZWN0YWJsZVxyXG4gICAgXSwgU2NlbmVNYW5hZ2VyKTtcclxuICAgIHJldHVybiBTY2VuZU1hbmFnZXI7XHJcbn0oKSk7XHJcbmV4cG9ydCBkZWZhdWx0IFNjZW5lTWFuYWdlcjtcclxuLyoqIOWGjemineWkluWvvOWHuuS4gOS4quWNleS+iyAqL1xyXG5leHBvcnQgdmFyIHNjZW5lTWFuYWdlciA9IGNvcmUuZ2V0SW5qZWN0KFNjZW5lTWFuYWdlcik7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2VuZ2luZS9zY2VuZS9TY2VuZU1hbmFnZXIuanNcbi8vIG1vZHVsZSBpZCA9IDU2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0wOS0wOFxyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0wOS0wOFxyXG4gKlxyXG4gKiDml6Dku7vkvZXliqjnlLvnmoTlnLrmma/nrZbnlaXvvIzlj6/lupTnlKjkuo7ku7vkvZXmmL7npLrlsYLlrp7njrBcclxuKi9cclxudmFyIE5vbmVTY2VuZVBvbGljeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE5vbmVTY2VuZVBvbGljeSgpIHtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5YeG5aSH5YiH5o2i5Zy65pmv5pe26LCD5bqmXHJcbiAgICAgKiBAcGFyYW0gZnJvbSDliIflh7rnmoTlnLrmma9cclxuICAgICAqIEBwYXJhbSB0byDliIflhaXnmoTlnLrmma9cclxuICAgICAqL1xyXG4gICAgTm9uZVNjZW5lUG9saWN5LnByb3RvdHlwZS5wcmVwYXJlU3dpdGNoID0gZnVuY3Rpb24gKGZyb20sIHRvKSB7XHJcbiAgICAgICAgLy8g6L+Z5Liq562W55Wl6YeM5ZWl5Lmf5LiN55So5YeG5aSHXHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDliIfmjaLlnLrmma/ml7bosIPluqZcclxuICAgICAqIEBwYXJhbSBmcm9tIOWIh+WHuueahOWcuuaZr1xyXG4gICAgICogQHBhcmFtIHRvIOWIh+WFpeeahOWcuuaZr1xyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIOWIh+aNouWujOavleeahOWbnuiwg+aWueazlVxyXG4gICAgICovXHJcbiAgICBOb25lU2NlbmVQb2xpY3kucHJvdG90eXBlLnN3aXRjaCA9IGZ1bmN0aW9uIChmcm9tLCB0bywgY2FsbGJhY2spIHtcclxuICAgICAgICAvLyDnm7TmjqXlu7bov5/liLDkuIvkuIDluKflm57osIPvvIjkuI3og73lkIzmraXlm57osIPvvIzlkKbliJnlj6/og73kvJrlh7rpl67popjvvIlcclxuICAgICAgICBzZXRUaW1lb3V0KGNhbGxiYWNrLCAwKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTm9uZVNjZW5lUG9saWN5O1xyXG59KCkpO1xyXG5leHBvcnQgeyBOb25lU2NlbmVQb2xpY3kgfTtcclxuLyoqIOm7mOiupOWvvOWHuuWunuS+iyAqL1xyXG5leHBvcnQgZGVmYXVsdCBuZXcgTm9uZVNjZW5lUG9saWN5KCk7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2VuZ2luZS9zY2VuZS9Ob25lU2NlbmVQb2xpY3kuanNcbi8vIG1vZHVsZSBpZCA9IDU3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0wOS0wOFxyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0wOS0wOFxyXG4gKlxyXG4gKiDlnLrmma/nm7jlhbPnmoTmtojmga9cclxuKi9cclxudmFyIFNjZW5lTWVzc2FnZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNjZW5lTWVzc2FnZSgpIHtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5YiH5o2i5Zy65pmv5YmN55qE5raI5oGvXHJcbiAgICAgKlxyXG4gICAgICogQHN0YXRpY1xyXG4gICAgICogQHR5cGUge3N0cmluZ31cclxuICAgICAqIEBtZW1iZXJvZiBTY2VuZU1lc3NhZ2VcclxuICAgICAqL1xyXG4gICAgU2NlbmVNZXNzYWdlLlNDRU5FX0JFRk9SRV9DSEFOR0UgPSBcInNjZW5lQmVmb3JlQ2hhbmdlXCI7XHJcbiAgICAvKipcclxuICAgICAqIOWIh+aNouWcuuaZr+WQjueahOa2iOaBr1xyXG4gICAgICpcclxuICAgICAqIEBzdGF0aWNcclxuICAgICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICAgKiBAbWVtYmVyb2YgU2NlbmVNZXNzYWdlXHJcbiAgICAgKi9cclxuICAgIFNjZW5lTWVzc2FnZS5TQ0VORV9BRlRFUl9DSEFOR0UgPSBcInNjZW5lQWZ0ZXJDaGFuZ2VcIjtcclxuICAgIHJldHVybiBTY2VuZU1lc3NhZ2U7XHJcbn0oKSk7XHJcbmV4cG9ydCBkZWZhdWx0IFNjZW5lTWVzc2FnZTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL3NjZW5lL1NjZW5lTWVzc2FnZS5qc1xuLy8gbW9kdWxlIGlkID0gNThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXHJcbiAqIEBhdXRob3IgUmF5a2lkXHJcbiAqIEBlbWFpbCBpbml0aWFsX3JAcXEuY29tXHJcbiAqIEBjcmVhdGUgZGF0ZSAyMDE3LTA5LTA4XHJcbiAqIEBtb2RpZnkgZGF0ZSAyMDE3LTA5LTA4XHJcbiAqXHJcbiAqIOWQjOatpeW3peWFt+mbhu+8jOeUqOS6juWvueWkmuS4qlxyXG4qL1xyXG52YXIgX2NhY2hlID0ge307XHJcbi8qKlxyXG4gKiDliKTmlq3mmK/lkKbmraPlnKjov5vooYzmk43kvZxcclxuICpcclxuICogQGV4cG9ydFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSDpmJ/liJflkI1cclxuICogQHJldHVybnMge2Jvb2xlYW59IOmYn+WIl+aYr+WQpuato+WcqOaTjeS9nFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzT3BlcmF0aW5nKG5hbWUpIHtcclxuICAgIHZhciBjdHggPSBfY2FjaGVbbmFtZV07XHJcbiAgICByZXR1cm4gKGN0eCAhPSBudWxsICYmIGN0eC5vcGVyYXRpbmcpO1xyXG59XHJcbi8qKlxyXG4gKiDlvIDlp4vlkIzmraXmk43kvZzvvIzmiYDmnInkvKDpgJLkuobnm7jlkIxuYW1l55qE5pON5L2c5Lya6KKr5Lul6Zif5YiX5pa55byP6aG65bqP5omn6KGMXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQHBhcmFtIG5hbWUg5LiA5Liq6Zif5YiX55qE5ZCN5a2XXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIOimgeaJp+ihjOeahOaWueazlVxyXG4gKiBAcGFyYW0geyp9IFt0aGlzQXJnXSDmlrnms5V0aGlz5a+56LGhXHJcbiAqIEBwYXJhbSB7Li4uYW55W119IFthcmdzXSDmlrnms5Xlj4LmlbBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB3YWl0KG5hbWUsIGZuLCB0aGlzQXJnKSB7XHJcbiAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAzOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhcmdzW19pIC0gM10gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgdmFyIGN0eCA9IF9jYWNoZVtuYW1lXTtcclxuICAgIGlmIChjdHggPT0gbnVsbCkge1xyXG4gICAgICAgIF9jYWNoZVtuYW1lXSA9IGN0eCA9IHsgb3BlcmF0aW5nOiBmYWxzZSwgZGF0YXM6IFtdIH07XHJcbiAgICB9XHJcbiAgICBpZiAoY3R4Lm9wZXJhdGluZykge1xyXG4gICAgICAgIC8vIOmYn+WIl+ato+WcqOaJp+ihjO+8jOaOqOWFpee8k+WtmFxyXG4gICAgICAgIGN0eC5kYXRhcy5wdXNoKHsgZm46IGZuLCB0aGlzQXJnOiB0aGlzQXJnLCBhcmdzOiBhcmdzIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8g6Zif5YiX5rKh5pyJ5Zyo5omn6KGM77yM55u05o6l5omn6KGMXHJcbiAgICAgICAgY3R4Lm9wZXJhdGluZyA9IHRydWU7XHJcbiAgICAgICAgZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIOWujOaIkOS4gOatpeaTjeS9nOW5tuWUpOmGkuWQjue7reaTjeS9nFxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIOmYn+WIl+WQjeWtl1xyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBub3RpZnkobmFtZSkge1xyXG4gICAgdmFyIGN0eCA9IF9jYWNoZVtuYW1lXTtcclxuICAgIGlmIChjdHggPT0gbnVsbCB8fCBjdHguZGF0YXMubGVuZ3RoIDw9IDApIHtcclxuICAgICAgICAvLyDpmJ/liJfmiafooYzlrozkuobvvIznm7TmjqXnu5PmnZ9cclxuICAgICAgICBjdHgub3BlcmF0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdmFyIGRhdGEgPSBjdHguZGF0YXMuc2hpZnQoKTtcclxuICAgIGRhdGEuZm4uYXBwbHkoZGF0YS50aGlzQXJnLCBkYXRhLmFyZ3MpO1xyXG59XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL3V0aWxzL1N5bmNVdGlsLmpzXG4vLyBtb2R1bGUgaWQgPSA1OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgeyBsaXN0ZW5Db25zdHJ1Y3QgfSBmcm9tIFwib2x5bXB1cy1yL3V0aWxzL0NvbnN0cnVjdFV0aWxcIjtcclxuaW1wb3J0IHsgTWVkaWF0b3JDbGFzcyB9IGZyb20gXCJvbHltcHVzLXIvZW5naW5lL2luamVjdG9yL0luamVjdG9yXCI7XHJcbmltcG9ydCB7IGJyaWRnZU1hbmFnZXIgfSBmcm9tIFwib2x5bXB1cy1yL2VuZ2luZS9icmlkZ2UvQnJpZGdlTWFuYWdlclwiO1xyXG5pbXBvcnQgeyB3cmFwU2tpbiB9IGZyb20gXCIuLi91dGlscy9Ta2luVXRpbFwiO1xyXG5pbXBvcnQgRWdyZXRCcmlkZ2UgZnJvbSBcIi4uLy4uL0VncmV0QnJpZGdlXCI7XHJcbi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0xMC0wOVxyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0xMC0wOVxyXG4gKlxyXG4gKiDotJ/otKPms6jlhaXnmoTmqKHlnZdcclxuKi9cclxuZXhwb3J0IGZ1bmN0aW9uIEVncmV0U2tpbihza2luKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGNscykge1xyXG4gICAgICAgIC8vIOebkeWQrOexu+Wei+WunuS+i+WMlu+8jOi9rOaNouearuiCpOagvOW8j1xyXG4gICAgICAgIGxpc3RlbkNvbnN0cnVjdChjbHMsIGZ1bmN0aW9uIChtZWRpYXRvcikgeyByZXR1cm4gd3JhcFNraW4obWVkaWF0b3IsIHNraW4pOyB9KTtcclxuICAgIH07XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIEVncmV0TWVkaWF0b3JDbGFzcyh0YXJnZXQpIHtcclxuICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xyXG4gICAgICAgIC8vIOiwg+eUqE1lZGlhdG9yQ2xhc3Pmlrnms5VcclxuICAgICAgICB2YXIgY2xzID0gTWVkaWF0b3JDbGFzcyh0YXJnZXQpO1xyXG4gICAgICAgIC8vIOebkeWQrOexu+Wei+WunuS+i+WMlu+8jOi1i+WAvOihqOeOsOWxguahpVxyXG4gICAgICAgIGxpc3RlbkNvbnN0cnVjdChjbHMsIGZ1bmN0aW9uIChtZWRpYXRvcikgeyByZXR1cm4gbWVkaWF0b3IuYnJpZGdlID0gYnJpZGdlTWFuYWdlci5nZXRCcmlkZ2UoRWdyZXRCcmlkZ2UuVFlQRSk7IH0pO1xyXG4gICAgICAgIC8vIOi/lOWbnue7k+aenOexu+Wei1xyXG4gICAgICAgIHJldHVybiBjbHM7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNscykge1xyXG4gICAgICAgICAgICAvLyDosIPnlKhNZWRpYXRvckNsYXNz5pa55rOVXHJcbiAgICAgICAgICAgIGNscyA9IE1lZGlhdG9yQ2xhc3MoY2xzKTtcclxuICAgICAgICAgICAgLy8g55uR5ZCs57G75Z6L5a6e5L6L5YyW77yM6L2s5o2i55qu6IKk5qC85byPXHJcbiAgICAgICAgICAgIGxpc3RlbkNvbnN0cnVjdChjbHMsIGZ1bmN0aW9uIChtZWRpYXRvcikgeyByZXR1cm4gd3JhcFNraW4obWVkaWF0b3IsIHRhcmdldCk7IH0pO1xyXG4gICAgICAgICAgICAvLyDov5Tlm57nu5PmnpznsbvlnotcclxuICAgICAgICAgICAgcmV0dXJuIGNscztcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yLWVncmV0L2VncmV0L2luamVjdG9yL0luamVjdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSA2MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgU2NlbmVNZWRpYXRvciBmcm9tIFwib2x5bXB1cy1yL2VuZ2luZS9zY2VuZS9TY2VuZU1lZGlhdG9yXCI7XHJcbi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0xMC0wOVxyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0xMC0wOVxyXG4gKlxyXG4gKiBFZ3JldOearuiCpOW3peWFt+mbhlxyXG4qL1xyXG5leHBvcnQgZnVuY3Rpb24gd3JhcFNraW4obWVkaWF0b3IsIHNraW4pIHtcclxuICAgIHZhciBjb21wID0gbmV3IGV1aS5Db21wb25lbnQoKTtcclxuICAgIG1lZGlhdG9yLnNraW4gPSBjb21wO1xyXG4gICAgLy8g56+h5pS5bWVkaWF0b3LnmoRvbk9wZW7mlrnms5XvvIzlhYjkuo5vbk9wZW7lsIbnmq7ogqTpmYTkuIrljrtcclxuICAgIHZhciBvcmlGdW5jID0gbWVkaWF0b3IuaGFzT3duUHJvcGVydHkoXCJvbk9wZW5cIikgPyBtZWRpYXRvci5vbk9wZW4gOiBudWxsO1xyXG4gICAgbWVkaWF0b3Iub25PcGVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb21wLnNraW5OYW1lID0gc2tpbjtcclxuICAgICAgICAvLyDlnLrmma/pnIDopoHmi4nkvLjliLDkuI5zdGFnZeWQjOWuvemrmFxyXG4gICAgICAgIGlmIChtZWRpYXRvciBpbnN0YW5jZW9mIFNjZW5lTWVkaWF0b3IpIHtcclxuICAgICAgICAgICAgLy8g5YWI6K6+572u5LiA5qyh5Zy65pmv5bC65a+4XHJcbiAgICAgICAgICAgIG9uU3RhZ2VSZXNpemUoKTtcclxuICAgICAgICAgICAgLy8g55uR5ZCs6Iie5Y+w5bC65a+45Y+Y5pu05LqL5Lu2XHJcbiAgICAgICAgICAgIG1lZGlhdG9yLm1hcExpc3RlbmVyKG1lZGlhdG9yLmJyaWRnZS5zdGFnZSwgZWdyZXQuRXZlbnQuUkVTSVpFLCBvblN0YWdlUmVzaXplKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g6L2s5Y+RdWnlvJXnlKhcclxuICAgICAgICBmb3IgKHZhciBfYSA9IDAsIF9iID0gY29tcC5za2luLnNraW5QYXJ0czsgX2EgPCBfYi5sZW5ndGg7IF9hKyspIHtcclxuICAgICAgICAgICAgdmFyIG5hbWUgPSBfYltfYV07XHJcbiAgICAgICAgICAgIG1lZGlhdG9yW25hbWVdID0gY29tcFtuYW1lXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g5oGi5aSN5Y6f5aeL5pa55rOVXHJcbiAgICAgICAgaWYgKG9yaUZ1bmMpXHJcbiAgICAgICAgICAgIG1lZGlhdG9yLm9uT3BlbiA9IG9yaUZ1bmM7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBkZWxldGUgbWVkaWF0b3Iub25PcGVuO1xyXG4gICAgICAgIC8vIOiwg+eUqOWOn+Wni+aWueazlVxyXG4gICAgICAgIG1lZGlhdG9yLm9uT3Blbi5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gY29tcDtcclxuICAgIGZ1bmN0aW9uIG9uU3RhZ2VSZXNpemUoKSB7XHJcbiAgICAgICAgY29tcC53aWR0aCA9IG1lZGlhdG9yLmJyaWRnZS5zdGFnZS5zdGFnZVdpZHRoO1xyXG4gICAgICAgIGNvbXAuaGVpZ2h0ID0gbWVkaWF0b3IuYnJpZGdlLnN0YWdlLnN0YWdlSGVpZ2h0O1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yLWVncmV0L2VncmV0L3V0aWxzL1NraW5VdGlsLmpzXG4vLyBtb2R1bGUgaWQgPSA2MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcclxuICogQGF1dGhvciBSYXlraWRcclxuICogQGVtYWlsIGluaXRpYWxfckBxcS5jb21cclxuICogQGNyZWF0ZSBkYXRlIDIwMTctMDktMTlcclxuICogQG1vZGlmeSBkYXRlIDIwMTctMDktMTlcclxuICpcclxuICog5riy5p+T5qih5byP5p6a5Li+XHJcbiovXHJcbnZhciBSZW5kZXJNb2RlO1xyXG4oZnVuY3Rpb24gKFJlbmRlck1vZGUpIHtcclxuICAgIFJlbmRlck1vZGVbUmVuZGVyTW9kZVtcIkFVVE9cIl0gPSAwXSA9IFwiQVVUT1wiO1xyXG4gICAgUmVuZGVyTW9kZVtSZW5kZXJNb2RlW1wiQ0FOVkFTXCJdID0gMV0gPSBcIkNBTlZBU1wiO1xyXG4gICAgUmVuZGVyTW9kZVtSZW5kZXJNb2RlW1wiV0VCR0xcIl0gPSAyXSA9IFwiV0VCR0xcIjtcclxufSkoUmVuZGVyTW9kZSB8fCAoUmVuZGVyTW9kZSA9IHt9KSk7XHJcbmV4cG9ydCBkZWZhdWx0IFJlbmRlck1vZGU7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yLWVncmV0L2VncmV0L1JlbmRlck1vZGUuanNcbi8vIG1vZHVsZSBpZCA9IDYyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG5pbXBvcnQgeyBlbnZpcm9ubWVudCB9IGZyb20gXCJvbHltcHVzLXIvZW5naW5lL2Vudi9FbnZpcm9ubWVudFwiO1xyXG5pbXBvcnQgeyBwYW5lbE1hbmFnZXIgfSBmcm9tIFwib2x5bXB1cy1yL2VuZ2luZS9wYW5lbC9QYW5lbE1hbmFnZXJcIjtcclxuaW1wb3J0IHsgcGxhdGZvcm1NYW5hZ2VyIH0gZnJvbSBcIm9seW1wdXMtci9lbmdpbmUvcGxhdGZvcm0vUGxhdGZvcm1NYW5hZ2VyXCI7XHJcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwib2x5bXB1cy1yL2VuZ2luZS92ZXJzaW9uL1ZlcnNpb25cIjtcclxudmFyIFJlc291cmNlVmVyc2lvbkNvbnRyb2xsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoUmVzb3VyY2VWZXJzaW9uQ29udHJvbGxlciwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFJlc291cmNlVmVyc2lvbkNvbnRyb2xsZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgUmVzb3VyY2VWZXJzaW9uQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0VmlydHVhbFVybCA9IGZ1bmN0aW9uICh1cmwpIHtcclxuICAgICAgICAvLyDmt7vliqBpbWdEb21haW5cclxuICAgICAgICB1cmwgPSBlbnZpcm9ubWVudC50b0NETkhvc3RVUkwodXJsKTtcclxuICAgICAgICAvLyDmt7vliqDniYjmnKzlj7fvvIzmnInlk4jluIzlgLzlsLHnlKjlk4jluIzlgLzliqDovb3vvIzmsqHmnInlsLHnlKjnvJbor5HniYjmnKzlj7fliqDovb1cclxuICAgICAgICB1cmwgPSB2ZXJzaW9uLndyYXBIYXNoVXJsKHVybCk7XHJcbiAgICAgICAgLy8g6L+U5ZuedXJsXHJcbiAgICAgICAgcmV0dXJuIHVybDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUmVzb3VyY2VWZXJzaW9uQ29udHJvbGxlcjtcclxufShSRVMuVmVyc2lvbkNvbnRyb2xsZXIpKTtcclxuZXhwb3J0IHsgUmVzb3VyY2VWZXJzaW9uQ29udHJvbGxlciB9O1xyXG4vLyDov5nph4znm7TmjqXms6jlhozkuIDkuItcclxuUkVTLnJlZ2lzdGVyVmVyc2lvbkNvbnRyb2xsZXIobmV3IFJlc291cmNlVmVyc2lvbkNvbnRyb2xsZXIoKSk7XHJcbnZhciBBc3NldHNMb2FkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBc3NldHNMb2FkZXIoaGFuZGxlcikge1xyXG4gICAgICAgIHRoaXMuX3JldHJ5RGljdCA9IHt9O1xyXG4gICAgICAgIHRoaXMuX2hhbmRsZXIgPSBoYW5kbGVyO1xyXG4gICAgfVxyXG4gICAgQXNzZXRzTG9hZGVyLnByb3RvdHlwZS5sb2FkR3JvdXBzID0gZnVuY3Rpb24gKGdyb3Vwcykge1xyXG4gICAgICAgIC8vIOiwg+eUqOWbnuiwg1xyXG4gICAgICAgIHRoaXMuX2hhbmRsZXIuc3RhcnQgJiYgdGhpcy5faGFuZGxlci5zdGFydCgpO1xyXG4gICAgICAgIC8vIOe7hOWQjeWmguaenOaYr+epuuWtl+espuS4suWImeS8muWvvOiHtEVncmV05LuA5LmI6YO95LiN5bmy77yM5omA5Lul6KaB56e76Zmk56m65a2X56ym5Liy55qE57uE5ZCNXHJcbiAgICAgICAgZ3JvdXBzID0gZ3JvdXBzICYmIGdyb3Vwcy5maWx0ZXIoZnVuY3Rpb24gKGdyb3VwKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZ3JvdXAgPT0gXCJzdHJpbmdcIilcclxuICAgICAgICAgICAgICAgIHJldHVybiAoZ3JvdXAgIT0gXCJcIik7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHJldHVybiAoZ3JvdXAubmFtZSAhPSBcIlwiKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyDlvIDlp4vliqDovb1cclxuICAgICAgICB2YXIgZ3JvdXBEaWN0ID0ge307XHJcbiAgICAgICAgdmFyIHBnc0RpY3Q7XHJcbiAgICAgICAgdmFyIGxlbiA9IGdyb3VwcyA/IGdyb3Vwcy5sZW5ndGggOiAwO1xyXG4gICAgICAgIGlmIChsZW4gPT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVyLmNvbXBsZXRlICYmIHRoaXMuX2hhbmRsZXIuY29tcGxldGUoZ3JvdXBEaWN0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIFJFUy5hZGRFdmVudExpc3RlbmVyKFJFUy5SZXNvdXJjZUV2ZW50LkdST1VQX1BST0dSRVNTLCBvblByb2dyZXNzLCB0aGlzKTtcclxuICAgICAgICAgICAgUkVTLmFkZEV2ZW50TGlzdGVuZXIoUkVTLlJlc291cmNlRXZlbnQuR1JPVVBfQ09NUExFVEUsIG9uT25lQ29tcGxldGUsIHRoaXMpO1xyXG4gICAgICAgICAgICBSRVMuYWRkRXZlbnRMaXN0ZW5lcihSRVMuUmVzb3VyY2VFdmVudC5HUk9VUF9MT0FEX0VSUk9SLCBvbk9uZUVycm9yLCB0aGlzKTtcclxuICAgICAgICAgICAgZ3JvdXBzID0gZ3JvdXBzLmNvbmNhdCgpO1xyXG4gICAgICAgICAgICBwZ3NEaWN0ID0ge307XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgaW4gZ3JvdXBzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZ3JvdXAgPSBncm91cHNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGdyb3VwID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBwZ3NEaWN0W2dyb3VwXSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgUkVTLmxvYWRHcm91cChncm91cCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwZ3NEaWN0W2dyb3VwLm5hbWVdID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBSRVMubG9hZEdyb3VwKGdyb3VwLm5hbWUsIGdyb3VwLnByaW9yaXR5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBvblByb2dyZXNzKGV2dCkge1xyXG4gICAgICAgICAgICAvLyDloavlhYXotYTmupDlrZflhbhcclxuICAgICAgICAgICAgdmFyIGl0ZW1EaWN0ID0gZ3JvdXBEaWN0W2V2dC5ncm91cE5hbWVdO1xyXG4gICAgICAgICAgICBpZiAoIWl0ZW1EaWN0KVxyXG4gICAgICAgICAgICAgICAgZ3JvdXBEaWN0W2V2dC5ncm91cE5hbWVdID0gaXRlbURpY3QgPSB7fTtcclxuICAgICAgICAgICAgaXRlbURpY3RbZXZ0LnJlc0l0ZW0ubmFtZV0gPSBldnQucmVzSXRlbTtcclxuICAgICAgICAgICAgLy8g6K6h566X5oC76L+b5bqmXHJcbiAgICAgICAgICAgIHBnc0RpY3RbZXZ0Lmdyb3VwTmFtZV0gPSBldnQuaXRlbXNMb2FkZWQgLyBldnQuaXRlbXNUb3RhbDtcclxuICAgICAgICAgICAgdmFyIHBncyA9IDA7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBwZ3NEaWN0KSB7XHJcbiAgICAgICAgICAgICAgICBwZ3MgKz0gcGdzRGljdFtrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHBncyAvPSBsZW47XHJcbiAgICAgICAgICAgIC8vIOWbnuiwg1xyXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVyLnByb2dyZXNzICYmIHRoaXMuX2hhbmRsZXIucHJvZ3Jlc3MoZXZ0LnJlc0l0ZW0sIHBncyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIG9uT25lQ29tcGxldGUoZXZ0KSB7XHJcbiAgICAgICAgICAgIC8vIOiwg+eUqOWNleS4gOWujOavleWbnuiwg1xyXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVyLm9uZUNvbXBsZXRlICYmIHRoaXMuX2hhbmRsZXIub25lQ29tcGxldGUoZ3JvdXBEaWN0W2V2dC5ncm91cE5hbWVdKTtcclxuICAgICAgICAgICAgLy8g5rWL6K+V5piv5ZCm5YWo6YOo5a6M5q+VXHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGdyb3Vwcy5pbmRleE9mKGV2dC5ncm91cE5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8g56e76Zmk5Yqg6L2957uE5ZCNXHJcbiAgICAgICAgICAgICAgICBncm91cHMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgIC8vIOWIpOaWreaYr+WQpuWFqOmDqOWujOaIkFxyXG4gICAgICAgICAgICAgICAgaWYgKGdyb3Vwcy5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOenu+mZpOS6i+S7tuebkeWQrFxyXG4gICAgICAgICAgICAgICAgICAgIFJFUy5yZW1vdmVFdmVudExpc3RlbmVyKFJFUy5SZXNvdXJjZUV2ZW50LkdST1VQX1BST0dSRVNTLCBvblByb2dyZXNzLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICBSRVMucmVtb3ZlRXZlbnRMaXN0ZW5lcihSRVMuUmVzb3VyY2VFdmVudC5HUk9VUF9DT01QTEVURSwgb25PbmVDb21wbGV0ZSwgdGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgUkVTLnJlbW92ZUV2ZW50TGlzdGVuZXIoUkVTLlJlc291cmNlRXZlbnQuR1JPVVBfTE9BRF9FUlJPUiwgb25PbmVFcnJvciwgdGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g6LCD55So5Zue6LCDXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlci5jb21wbGV0ZSAmJiB0aGlzLl9oYW5kbGVyLmNvbXBsZXRlKGdyb3VwRGljdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gb25PbmVFcnJvcihldnQpIHtcclxuICAgICAgICAgICAgdmFyIGdyb3VwTmFtZSA9IGV2dC5ncm91cE5hbWU7XHJcbiAgICAgICAgICAgIHZhciByZXRyeVRpbWVzID0gdGhpcy5fcmV0cnlEaWN0W2dyb3VwTmFtZV07XHJcbiAgICAgICAgICAgIGlmIChyZXRyeVRpbWVzID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICByZXRyeVRpbWVzID0gMDtcclxuICAgICAgICAgICAgaWYgKHJldHJ5VGltZXMgPCAzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXRyeURpY3RbZ3JvdXBOYW1lXSA9ICsrcmV0cnlUaW1lcztcclxuICAgICAgICAgICAgICAgIC8vIOaJk+WNsOaXpeW/l1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwi5Yqg6L295aSx6LSl77yM6YeN6K+V56ysXCIgKyByZXRyeVRpbWVzICsgXCLmrKE6IFwiICsgZ3JvdXBOYW1lKTtcclxuICAgICAgICAgICAgICAgIC8vIOayoeWIsOacgOWkp+mHjeivleasoeaVsO+8jOWwhuS4unVybOa3u+WKoOS4gOS4qumaj+acuuaXtumXtOaIs+mHjeaWsOWKoOWbnuWKoOi9vemYn+WIl1xyXG4gICAgICAgICAgICAgICAgUkVTLmxvYWRHcm91cChldnQuZ3JvdXBOYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIOaJk+WNsOaXpeW/l1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwi5Yqg6L295aSx6LSlM+asoe+8jOato+WcqOWwneivleWIh+aNokNETi4uLlwiKTtcclxuICAgICAgICAgICAgICAgIC8vIOWwneivleWIh+aNokNETlxyXG4gICAgICAgICAgICAgICAgdmFyIGFsbERvbmUgPSBlbnZpcm9ubWVudC5uZXh0Q0ROKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWFsbERvbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDph43mlrDliqDovb1cclxuICAgICAgICAgICAgICAgICAgICBSRVMubG9hZEdyb3VwKGV2dC5ncm91cE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g6LCD55So5qih5p2/5pa55rOVXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlci5vbmVFcnJvciAmJiB0aGlzLl9oYW5kbGVyLm9uZUVycm9yKGV2dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5YiH5o2iQ0RO5aSx6LSl5LqG77yM5by55Ye65o+Q56S677yM5L2/55So5oi35Y+v5Lul5omL5Yqo5Yi35paw6aG16Z2iXHJcbiAgICAgICAgICAgICAgICAgICAgcGFuZWxNYW5hZ2VyLmNvbmZpcm0oXCLotYTmupDnu4TliqDovb3lpLHotKVbXCIgKyBncm91cE5hbWUgKyBcIl3vvIzngrnlh7vnoa7lrprliLfmlrDpobXpnaJcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF0Zm9ybU1hbmFnZXIucmVsb2FkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEFzc2V0c0xvYWRlcjtcclxufSgpKTtcclxuZXhwb3J0IGRlZmF1bHQgQXNzZXRzTG9hZGVyO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci1lZ3JldC9lZ3JldC9Bc3NldHNMb2FkZXIuanNcbi8vIG1vZHVsZSBpZCA9IDYzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn07XHJcbmltcG9ydCB7IGNvcmUgfSBmcm9tIFwiLi4vLi4vY29yZS9Db3JlXCI7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiLi4vLi4vY29yZS9pbmplY3Rvci9JbmplY3RvclwiO1xyXG5pbXBvcnQgV2ViUGxhdGZvcm0gZnJvbSBcIi4vV2ViUGxhdGZvcm1cIjtcclxuLyoqXHJcbiAqIEBhdXRob3IgUmF5a2lkXHJcbiAqIEBlbWFpbCBpbml0aWFsX3JAcXEuY29tXHJcbiAqIEBjcmVhdGUgZGF0ZSAyMDE3LTA5LTIxXHJcbiAqIEBtb2RpZnkgZGF0ZSAyMDE3LTA5LTIxXHJcbiAqXHJcbiAqIOW5s+WPsOaOpeWPo+euoeeQhuWZqO+8jOmAmui/h+ahpeaOpeaooeW8j+e7n+S4gOS4jeWQjOW5s+WPsOeahOS4jeWQjOaOpeWPo++8jOS7juiAjOWunueOsOWvueahhuaetuWFtuS7luaooeWdl+mAj+aYjuWMllxyXG4qL1xyXG52YXIgUGxhdGZvcm1NYW5hZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUGxhdGZvcm1NYW5hZ2VyKCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOW5s+WPsOaOpeWPo+WunueOsOWvueixoe+8jOm7mOiupOaYr+aZrumAmue9kemhteW5s+WPsO+8jOS5n+WPr+S7peagueaNrumcgOimgeWumuWItlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHR5cGUge0lQbGF0Zm9ybX1cclxuICAgICAgICAgKiBAbWVtYmVyb2YgUGxhdGZvcm1NYW5hZ2VyXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5wbGF0Zm9ybSA9IG5ldyBXZWJQbGF0Zm9ybSgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDliLfmlrDlvZPliY3pobXpnaJcclxuICAgICAqXHJcbiAgICAgKiBAbWVtYmVyb2YgUGxhdGZvcm1NYW5hZ2VyXHJcbiAgICAgKi9cclxuICAgIFBsYXRmb3JtTWFuYWdlci5wcm90b3R5cGUucmVsb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMucGxhdGZvcm0ucmVsb2FkKCk7XHJcbiAgICB9O1xyXG4gICAgUGxhdGZvcm1NYW5hZ2VyID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgSW5qZWN0YWJsZVxyXG4gICAgXSwgUGxhdGZvcm1NYW5hZ2VyKTtcclxuICAgIHJldHVybiBQbGF0Zm9ybU1hbmFnZXI7XHJcbn0oKSk7XHJcbmV4cG9ydCBkZWZhdWx0IFBsYXRmb3JtTWFuYWdlcjtcclxuLyoqIOWGjemineWkluWvvOWHuuS4gOS4quWNleS+iyAqL1xyXG5leHBvcnQgdmFyIHBsYXRmb3JtTWFuYWdlciA9IGNvcmUuZ2V0SW5qZWN0KFBsYXRmb3JtTWFuYWdlcik7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2VuZ2luZS9wbGF0Zm9ybS9QbGF0Zm9ybU1hbmFnZXIuanNcbi8vIG1vZHVsZSBpZCA9IDY0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0wOS0yMVxyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0wOS0yMVxyXG4gKlxyXG4gKiDnvZHpobXlubPlj7DmjqXlj6Plrp7njrDnsbvvvIzkuZ/mmK/lubPlj7DmjqXlj6PnmoTpu5jorqTnsbtcclxuKi9cclxudmFyIFdlYlBsYXRmb3JtID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gV2ViUGxhdGZvcm0oKSB7XHJcbiAgICB9XHJcbiAgICBXZWJQbGF0Zm9ybS5wcm90b3R5cGUucmVsb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQodHJ1ZSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFdlYlBsYXRmb3JtO1xyXG59KCkpO1xyXG5leHBvcnQgZGVmYXVsdCBXZWJQbGF0Zm9ybTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXIvZW5naW5lL3BsYXRmb3JtL1dlYlBsYXRmb3JtLmpzXG4vLyBtb2R1bGUgaWQgPSA2NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgeyB0d2VlbkZyb20sIHR3ZWVuVG8gfSBmcm9tIFwiLi4vdXRpbHMvVHdlZW5VdGlsXCI7XHJcbi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0wOS0yMlxyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0wOS0yMlxyXG4gKlxyXG4gKiDlm57lvLnmlYjmnpxcclxuKi9cclxudmFyIEJhY2tQYW5lbFBvbGljeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEJhY2tQYW5lbFBvbGljeSgpIHtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5pi+56S65pe26LCD55SoXHJcbiAgICAgKiBAcGFyYW0gcGFuZWwg5by55Ye65qGG5a+56LGhXHJcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sg5a6M5oiQ5Zue6LCD77yM5b+F6aG76LCD55SoXHJcbiAgICAgKiBAcGFyYW0gZnJvbSDliqjnlLvotbflp4vngrlcclxuICAgICAqL1xyXG4gICAgQmFja1BhbmVsUG9saWN5LnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbiAocGFuZWwsIGNhbGxiYWNrLCBmcm9tKSB7XHJcbiAgICAgICAgLy8g5byA5aeL5Yqo55S75by55Ye6XHJcbiAgICAgICAgdmFyIGVudGl0eSA9IHBhbmVsLnNraW47XHJcbiAgICAgICAgZWdyZXQuVHdlZW4ucmVtb3ZlVHdlZW5zKGVudGl0eSk7XHJcbiAgICAgICAgLy8g5oGi5aSN5L2T56evXHJcbiAgICAgICAgZW50aXR5LnNjYWxlWCA9IDE7XHJcbiAgICAgICAgZW50aXR5LnNjYWxlWSA9IDE7XHJcbiAgICAgICAgdmFyIGZyb21YID0gMDtcclxuICAgICAgICB2YXIgZnJvbVkgPSAwO1xyXG4gICAgICAgIGlmIChmcm9tICE9IG51bGwpIHtcclxuICAgICAgICAgICAgZnJvbVggPSBmcm9tLng7XHJcbiAgICAgICAgICAgIGZyb21ZID0gZnJvbS55O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZnJvbVggPSBlbnRpdHkuc3RhZ2Uuc3RhZ2VXaWR0aCAqIDAuNTtcclxuICAgICAgICAgICAgZnJvbVkgPSBlbnRpdHkuc3RhZ2Uuc3RhZ2VIZWlnaHQgKiAwLjU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOabtOaWsOW8ueWHuuWQjuS9jee9rlxyXG4gICAgICAgIGVudGl0eS54ID0gZnJvbVggLSBlbnRpdHkud2lkdGggKiAwLjU7XHJcbiAgICAgICAgZW50aXR5LnkgPSBmcm9tWSAtIGVudGl0eS5oZWlnaHQgKiAwLjU7XHJcbiAgICAgICAgLy8g5byA5aeL57yT5YqoXHJcbiAgICAgICAgdHdlZW5Gcm9tKGVudGl0eSwge1xyXG4gICAgICAgICAgICB4OiBmcm9tWCxcclxuICAgICAgICAgICAgeTogZnJvbVksXHJcbiAgICAgICAgICAgIHNjYWxlWDogMCxcclxuICAgICAgICAgICAgc2NhbGVZOiAwXHJcbiAgICAgICAgfSwgMzAwLCBlZ3JldC5FYXNlLmJhY2tPdXQpLmNhbGwoY2FsbGJhY2spO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5YWz6Zet5pe26LCD55SoXHJcbiAgICAgKiBAcGFyYW0gcG9wdXAg5by55Ye65qGG5a+56LGhXHJcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sg5a6M5oiQ5Zue6LCD77yM5b+F6aG76LCD55SoXHJcbiAgICAgKiBAcGFyYW0gdG8g5Yqo55S75a6M57uT54K5XHJcbiAgICAgKi9cclxuICAgIEJhY2tQYW5lbFBvbGljeS5wcm90b3R5cGUuZHJvcCA9IGZ1bmN0aW9uIChwYW5lbCwgY2FsbGJhY2ssIHRvKSB7XHJcbiAgICAgICAgLy8g5byA5aeL5Yqo55S75YWz6ZetXHJcbiAgICAgICAgdmFyIGVudGl0eSA9IHBhbmVsLnNraW47XHJcbiAgICAgICAgZWdyZXQuVHdlZW4ucmVtb3ZlVHdlZW5zKGVudGl0eSk7XHJcbiAgICAgICAgdmFyIHRvWCA9IDA7XHJcbiAgICAgICAgdmFyIHRvWSA9IDA7XHJcbiAgICAgICAgaWYgKHRvICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdG9YID0gdG8ueDtcclxuICAgICAgICAgICAgdG9ZID0gdG8ueTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRvWCA9IGVudGl0eS54ICsgZW50aXR5LndpZHRoICogMC41O1xyXG4gICAgICAgICAgICB0b1kgPSBlbnRpdHkueSArIGVudGl0eS5oZWlnaHQgKiAwLjU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHR3ZWVuVG8oZW50aXR5LCB7XHJcbiAgICAgICAgICAgIHg6IHRvWCxcclxuICAgICAgICAgICAgeTogdG9ZLFxyXG4gICAgICAgICAgICBzY2FsZVg6IDAsXHJcbiAgICAgICAgICAgIHNjYWxlWTogMFxyXG4gICAgICAgIH0sIDMwMCwgZWdyZXQuRWFzZS5iYWNrSW4pLmNhbGwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyDmgaLlpI3kvZPnp69cclxuICAgICAgICAgICAgZW50aXR5LnNjYWxlWCA9IDE7XHJcbiAgICAgICAgICAgIGVudGl0eS5zY2FsZVkgPSAxO1xyXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEJhY2tQYW5lbFBvbGljeTtcclxufSgpKTtcclxuZXhwb3J0IGRlZmF1bHQgQmFja1BhbmVsUG9saWN5O1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci1lZ3JldC9lZ3JldC9wYW5lbC9CYWNrUGFuZWxQb2xpY3kuanNcbi8vIG1vZHVsZSBpZCA9IDY2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0wOS0yMlxyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0wOS0yMlxyXG4gKlxyXG4gKiBFZ3JldOe8k+WKqOW3peWFt+mbhu+8jOeUqOadpeW8peihpUVncmV055qEVHdlZW7nmoTkuI3otrNcclxuKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHR3ZWVuVG8odGFyZ2V0LCBwcm9wcywgZHVyYXRpb24sIGVhc2UpIHtcclxuICAgIHJldHVybiBlZ3JldC5Ud2Vlbi5nZXQodGFyZ2V0KS50byhwcm9wcywgZHVyYXRpb24sIGVhc2UpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiB0d2VlbkZyb20odGFyZ2V0LCBwcm9wcywgZHVyYXRpb24sIGVhc2UpIHtcclxuICAgIC8vIOWvueaNouWPguaVsOeKtuaAgVxyXG4gICAgdmFyIHRvUHJvcHMgPSB7fTtcclxuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xyXG4gICAgICAgIHRvUHJvcHNba2V5XSA9IHRhcmdldFtrZXldO1xyXG4gICAgICAgIHRhcmdldFtrZXldID0gcHJvcHNba2V5XTtcclxuICAgIH1cclxuICAgIC8vIOW8gOWni+e8k+WKqFxyXG4gICAgcmV0dXJuIGVncmV0LlR3ZWVuLmdldCh0YXJnZXQpLnRvKHRvUHJvcHMsIGR1cmF0aW9uLCBlYXNlKTtcclxufVxyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci1lZ3JldC9lZ3JldC91dGlscy9Ud2VlblV0aWwuanNcbi8vIG1vZHVsZSBpZCA9IDY3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0wOS0yMlxyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0wOS0yMlxyXG4gKlxyXG4gKiDmt6HlhaXmt6Hlh7rlnLrmma/liIfmjaLnrZbnlaVcclxuKi9cclxudmFyIEZhZGVTY2VuZVBvbGljeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZhZGVTY2VuZVBvbGljeSgpIHtcclxuICAgICAgICB0aGlzLl90ZW1wU25hcHNob3QgPSBuZXcgZWdyZXQuQml0bWFwKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOWHhuWkh+WIh+aNouWcuuaZr+aXtuiwg+W6plxyXG4gICAgICogQHBhcmFtIGZyb20g5YiH5Ye655qE5Zy65pmvXHJcbiAgICAgKiBAcGFyYW0gdG8g5YiH5YWl55qE5Zy65pmvXHJcbiAgICAgKi9cclxuICAgIEZhZGVTY2VuZVBvbGljeS5wcm90b3R5cGUucHJlcGFyZVN3aXRjaCA9IGZ1bmN0aW9uIChmcm9tLCB0bykge1xyXG4gICAgICAgIGlmIChmcm9tICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdmFyIHJvb3QgPSBmcm9tLmJyaWRnZS5yb290O1xyXG4gICAgICAgICAgICAvLyDmiKrlj5blvZPliY3lsY/luZVcclxuICAgICAgICAgICAgdmFyIHRleHR1cmUgPSBuZXcgZWdyZXQuUmVuZGVyVGV4dHVyZSgpO1xyXG4gICAgICAgICAgICB0ZXh0dXJlLmRyYXdUb1RleHR1cmUocm9vdCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3RlbXBTbmFwc2hvdC50ZXh0dXJlID0gdGV4dHVyZTtcclxuICAgICAgICAgICAgdGhpcy5fdGVtcFNuYXBzaG90LmFscGhhID0gMTtcclxuICAgICAgICAgICAgcm9vdC5hZGRDaGlsZCh0aGlzLl90ZW1wU25hcHNob3QpO1xyXG4gICAgICAgICAgICAvLyDnp7vpmaRmcm9tXHJcbiAgICAgICAgICAgIHZhciBmcm9tRGlzcGxheSA9IGZyb20uc2tpbjtcclxuICAgICAgICAgICAgaWYgKGZyb21EaXNwbGF5LnBhcmVudCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBmcm9tRGlzcGxheS5wYXJlbnQucmVtb3ZlQ2hpbGQoZnJvbURpc3BsYXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5YiH5o2i5Zy65pmv5pe26LCD5bqmXHJcbiAgICAgKiBAcGFyYW0gZnJvbSDliIflh7rnmoTlnLrmma9cclxuICAgICAqIEBwYXJhbSB0byDliIflhaXnmoTlnLrmma9cclxuICAgICAqIEBwYXJhbSBjYWxsYmFjayDliIfmjaLlrozmr5XnmoTlm57osIPmlrnms5VcclxuICAgICAqL1xyXG4gICAgRmFkZVNjZW5lUG9saWN5LnByb3RvdHlwZS5zd2l0Y2ggPSBmdW5jdGlvbiAoZnJvbSwgdG8sIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKGZyb20gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyDlvIDlp4vmt6Hlh7pcclxuICAgICAgICAgICAgZWdyZXQuVHdlZW4ucmVtb3ZlVHdlZW5zKHRoaXMuX3RlbXBTbmFwc2hvdCk7XHJcbiAgICAgICAgICAgIGVncmV0LlR3ZWVuLmdldCh0aGlzLl90ZW1wU25hcHNob3QpLnRvKHtcclxuICAgICAgICAgICAgICAgIGFscGhhOiAwXHJcbiAgICAgICAgICAgIH0sIDMwMCkuY2FsbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDnp7vpmaTmiKrlsY9cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl90ZW1wU25hcHNob3QucGFyZW50ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZW1wU25hcHNob3QucGFyZW50LnJlbW92ZUNoaWxkKHRoaXMuX3RlbXBTbmFwc2hvdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyDlm57mlLbotYTmupBcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl90ZW1wU25hcHNob3QudGV4dHVyZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVtcFNuYXBzaG90LnRleHR1cmUuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RlbXBTbmFwc2hvdC50ZXh0dXJlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIOiwg+eUqOWbnuiwg1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyDnp7vpmaTmiKrlsY9cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3RlbXBTbmFwc2hvdC5wYXJlbnQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdGVtcFNuYXBzaG90LnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzLl90ZW1wU25hcHNob3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIOiwg+eUqOWbnuiwg1xyXG4gICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gRmFkZVNjZW5lUG9saWN5O1xyXG59KCkpO1xyXG5leHBvcnQgZGVmYXVsdCBGYWRlU2NlbmVQb2xpY3k7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yLWVncmV0L2VncmV0L3NjZW5lL0ZhZGVTY2VuZVBvbGljeS5qc1xuLy8gbW9kdWxlIGlkID0gNjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IHsgYnJpZGdlTWFuYWdlciB9IGZyb20gXCJvbHltcHVzLXIvZW5naW5lL2JyaWRnZS9CcmlkZ2VNYW5hZ2VyXCI7XHJcbmltcG9ydCBEaWN0aW9uYXJ5IGZyb20gXCJvbHltcHVzLXIvdXRpbHMvRGljdGlvbmFyeVwiO1xyXG5pbXBvcnQgRWdyZXRCcmlkZ2UgZnJvbSBcIi4uLy4uL0VncmV0QnJpZGdlXCI7XHJcbi8qKlxyXG4gKiBAYXV0aG9yIFJheWtpZFxyXG4gKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gKiBAY3JlYXRlIGRhdGUgMjAxNy0xMC0yNVxyXG4gKiBAbW9kaWZ5IGRhdGUgMjAxNy0xMC0yNVxyXG4gKlxyXG4gKiBFZ3JldOmBrue9qeWunueOsFxyXG4qL1xyXG52YXIgTWFza0VudGl0eUltcGwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBNYXNrRW50aXR5SW1wbChwYXJhbXMpIHtcclxuICAgICAgICB0aGlzLl9tYXNrQWxwaGEgPSAwLjU7XHJcbiAgICAgICAgdGhpcy5fbG9hZGluZ0FscGhhID0gMC41O1xyXG4gICAgICAgIHRoaXMuX21vZGFsUGFuZWxBbHBoYSA9IDAuNTtcclxuICAgICAgICB0aGlzLl9zaG93aW5nTWFzayA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX3Nob3dpbmdMb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHBhcmFtcyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21hc2tBbHBoYSA9IChwYXJhbXMubWFza0FscGhhICE9IG51bGwgPyBwYXJhbXMubWFza0FscGhhIDogMC41KTtcclxuICAgICAgICAgICAgdGhpcy5fbG9hZGluZ0FscGhhID0gKHBhcmFtcy5sb2FkaW5nQWxwaGEgIT0gbnVsbCA/IHBhcmFtcy5sb2FkaW5nQWxwaGEgOiAwLjUpO1xyXG4gICAgICAgICAgICB0aGlzLl9tb2RhbFBhbmVsQWxwaGEgPSAocGFyYW1zLm1vZGFsUGFuZWxBbHBoYSAhPSBudWxsID8gcGFyYW1zLm1vZGFsUGFuZWxBbHBoYSA6IDAuNSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2xvYWRpbmdTa2luRmFjdG9yeSA9IHBhcmFtcy5sb2FkaW5nU2tpbkZhY3Rvcnk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubWFza0RhdGEgPSBwYXJhbXMgfHwge307XHJcbiAgICAgICAgdGhpcy5fbWFzayA9IG5ldyBlZ3JldC5TaGFwZSgpO1xyXG4gICAgICAgIHRoaXMuX21hc2sudG91Y2hFbmFibGVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9sb2FkaW5nTWFzayA9IG5ldyBlZ3JldC5TaGFwZSgpO1xyXG4gICAgICAgIHRoaXMuX2xvYWRpbmdNYXNrLnRvdWNoRW5hYmxlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5fbW9kYWxQYW5lbERpY3QgPSBuZXcgRGljdGlvbmFyeSgpO1xyXG4gICAgICAgIHRoaXMuX21vZGFsUGFuZWxMaXN0ID0gW107XHJcbiAgICAgICAgdGhpcy5fbW9kYWxQYW5lbE1hc2sgPSBuZXcgZWdyZXQuU2hhcGUoKTtcclxuICAgICAgICB0aGlzLl9tb2RhbFBhbmVsTWFzay50b3VjaEVuYWJsZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1hc2tFbnRpdHlJbXBsLnByb3RvdHlwZSwgXCJsb2FkaW5nU2tpblwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIOWIneWni+WMluearuiCpFxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2xvYWRpbmdTa2luICYmIHRoaXMuX2xvYWRpbmdTa2luRmFjdG9yeSlcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRpbmdTa2luID0gdGhpcy5fbG9hZGluZ1NraW5GYWN0b3J5KCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb2FkaW5nU2tpbjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIC8qKlxyXG4gICAgICog5pi+56S66YGu572pXHJcbiAgICAgKi9cclxuICAgIE1hc2tFbnRpdHlJbXBsLnByb3RvdHlwZS5zaG93TWFzayA9IGZ1bmN0aW9uIChhbHBoYSkge1xyXG4gICAgICAgIGlmICh0aGlzLl9zaG93aW5nTWFzaylcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuX3Nob3dpbmdNYXNrID0gdHJ1ZTtcclxuICAgICAgICAvLyDmmL7npLpcclxuICAgICAgICB2YXIgYnJpZGdlID0gYnJpZGdlTWFuYWdlci5nZXRCcmlkZ2UoRWdyZXRCcmlkZ2UuVFlQRSk7XHJcbiAgICAgICAgLy8g57uY5Yi26YGu572pXHJcbiAgICAgICAgaWYgKGFscGhhID09IG51bGwpXHJcbiAgICAgICAgICAgIGFscGhhID0gdGhpcy5fbWFza0FscGhhO1xyXG4gICAgICAgIHRoaXMuX21hc2suZ3JhcGhpY3MuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLl9tYXNrLmdyYXBoaWNzLmJlZ2luRmlsbCgwLCBhbHBoYSk7XHJcbiAgICAgICAgdGhpcy5fbWFzay5ncmFwaGljcy5kcmF3UmVjdCgwLCAwLCBicmlkZ2Uucm9vdC5zdGFnZS5zdGFnZVdpZHRoLCBicmlkZ2Uucm9vdC5zdGFnZS5zdGFnZUhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5fbWFzay5ncmFwaGljcy5lbmRGaWxsKCk7XHJcbiAgICAgICAgLy8g5re75Yqg5pi+56S6XHJcbiAgICAgICAgYnJpZGdlLm1hc2tMYXllci5hZGRDaGlsZCh0aGlzLl9tYXNrKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOmakOiXj+mBrue9qVxyXG4gICAgICovXHJcbiAgICBNYXNrRW50aXR5SW1wbC5wcm90b3R5cGUuaGlkZU1hc2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9zaG93aW5nTWFzaylcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuX3Nob3dpbmdNYXNrID0gZmFsc2U7XHJcbiAgICAgICAgLy8g6ZqQ6JePXHJcbiAgICAgICAgaWYgKHRoaXMuX21hc2sucGFyZW50ICE9IG51bGwpXHJcbiAgICAgICAgICAgIHRoaXMuX21hc2sucGFyZW50LnJlbW92ZUNoaWxkKHRoaXMuX21hc2spO1xyXG4gICAgfTtcclxuICAgIC8qKuW9k+WJjeaYr+WQpuWcqOaYvuekuumBrue9qSovXHJcbiAgICBNYXNrRW50aXR5SW1wbC5wcm90b3R5cGUuaXNTaG93aW5nTWFzayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2hvd2luZ01hc2s7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiDmmL7npLrliqDovb3lm75cclxuICAgICAqL1xyXG4gICAgTWFza0VudGl0eUltcGwucHJvdG90eXBlLnNob3dMb2FkaW5nID0gZnVuY3Rpb24gKGFscGhhKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3Nob3dpbmdMb2FkaW5nKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgdGhpcy5fc2hvd2luZ0xvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgIC8vIOaYvuekulxyXG4gICAgICAgIHZhciBicmlkZ2UgPSBicmlkZ2VNYW5hZ2VyLmdldEJyaWRnZShFZ3JldEJyaWRnZS5UWVBFKTtcclxuICAgICAgICAvLyDnu5jliLbpga7nvalcclxuICAgICAgICBpZiAoYWxwaGEgPT0gbnVsbClcclxuICAgICAgICAgICAgYWxwaGEgPSB0aGlzLl9sb2FkaW5nQWxwaGE7XHJcbiAgICAgICAgdGhpcy5fbG9hZGluZ01hc2suZ3JhcGhpY3MuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLl9sb2FkaW5nTWFzay5ncmFwaGljcy5iZWdpbkZpbGwoMCwgYWxwaGEpO1xyXG4gICAgICAgIHRoaXMuX2xvYWRpbmdNYXNrLmdyYXBoaWNzLmRyYXdSZWN0KDAsIDAsIGJyaWRnZS5yb290LnN0YWdlLnN0YWdlV2lkdGgsIGJyaWRnZS5yb290LnN0YWdlLnN0YWdlSGVpZ2h0KTtcclxuICAgICAgICB0aGlzLl9sb2FkaW5nTWFzay5ncmFwaGljcy5lbmRGaWxsKCk7XHJcbiAgICAgICAgLy8g5re75Yqg5pi+56S6XHJcbiAgICAgICAgYnJpZGdlLm1hc2tMYXllci5hZGRDaGlsZCh0aGlzLl9sb2FkaW5nTWFzayk7XHJcbiAgICAgICAgLy8g5re75YqgbG9hZGluZ+earuiCpFxyXG4gICAgICAgIGlmICh0aGlzLmxvYWRpbmdTa2luKVxyXG4gICAgICAgICAgICBicmlkZ2UubWFza0xheWVyLmFkZENoaWxkKHRoaXMubG9hZGluZ1NraW4pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog6ZqQ6JeP5Yqg6L295Zu+XHJcbiAgICAgKi9cclxuICAgIE1hc2tFbnRpdHlJbXBsLnByb3RvdHlwZS5oaWRlTG9hZGluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX3Nob3dpbmdMb2FkaW5nKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgdGhpcy5fc2hvd2luZ0xvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAvLyDpmpDol49cclxuICAgICAgICBpZiAodGhpcy5fbG9hZGluZ01hc2sucGFyZW50ICE9IG51bGwpXHJcbiAgICAgICAgICAgIHRoaXMuX2xvYWRpbmdNYXNrLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzLl9sb2FkaW5nTWFzayk7XHJcbiAgICAgICAgaWYgKHRoaXMubG9hZGluZ1NraW4gIT0gbnVsbCAmJiB0aGlzLmxvYWRpbmdTa2luLnBhcmVudCAhPSBudWxsKVxyXG4gICAgICAgICAgICB0aGlzLmxvYWRpbmdTa2luLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzLl9sb2FkaW5nU2tpbik7XHJcbiAgICB9O1xyXG4gICAgLyoq5b2T5YmN5piv5ZCm5Zyo5pi+56S6bG9hZGluZyovXHJcbiAgICBNYXNrRW50aXR5SW1wbC5wcm90b3R5cGUuaXNTaG93aW5nTG9hZGluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2hvd2luZ0xvYWRpbmc7XHJcbiAgICB9O1xyXG4gICAgLyoqIOaYvuekuuaooeaAgeeql+WPo+mBrue9qSAqL1xyXG4gICAgTWFza0VudGl0eUltcGwucHJvdG90eXBlLnNob3dNb2RhbE1hc2sgPSBmdW5jdGlvbiAocGFuZWwsIGFscGhhKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNTaG93aW5nTW9kYWxNYXNrKHBhbmVsKSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuX21vZGFsUGFuZWxEaWN0LnNldChwYW5lbCwgcGFuZWwpO1xyXG4gICAgICAgIHRoaXMuX21vZGFsUGFuZWxMaXN0LnB1c2gocGFuZWwpO1xyXG4gICAgICAgIC8vIOaYvuekulxyXG4gICAgICAgIHZhciBicmlkZ2UgPSBicmlkZ2VNYW5hZ2VyLmdldEJyaWRnZShFZ3JldEJyaWRnZS5UWVBFKTtcclxuICAgICAgICAvLyDnu5jliLbpga7nvalcclxuICAgICAgICBpZiAoYWxwaGEgPT0gbnVsbClcclxuICAgICAgICAgICAgYWxwaGEgPSB0aGlzLl9tb2RhbFBhbmVsQWxwaGE7XHJcbiAgICAgICAgdGhpcy5fbW9kYWxQYW5lbE1hc2suZ3JhcGhpY3MuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLl9tb2RhbFBhbmVsTWFzay5ncmFwaGljcy5iZWdpbkZpbGwoMCwgYWxwaGEpO1xyXG4gICAgICAgIHRoaXMuX21vZGFsUGFuZWxNYXNrLmdyYXBoaWNzLmRyYXdSZWN0KDAsIDAsIGJyaWRnZS5yb290LnN0YWdlLnN0YWdlV2lkdGgsIGJyaWRnZS5yb290LnN0YWdlLnN0YWdlSGVpZ2h0KTtcclxuICAgICAgICB0aGlzLl9tb2RhbFBhbmVsTWFzay5ncmFwaGljcy5lbmRGaWxsKCk7XHJcbiAgICAgICAgLy8g5re75Yqg5pi+56S6XHJcbiAgICAgICAgdmFyIGVudGl0eSA9IHBhbmVsLnNraW47XHJcbiAgICAgICAgdmFyIHBhcmVudCA9IGVudGl0eS5wYXJlbnQ7XHJcbiAgICAgICAgaWYgKHBhcmVudCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9tb2RhbFBhbmVsTWFzay5wYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21vZGFsUGFuZWxNYXNrLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzLl9tb2RhbFBhbmVsTWFzayk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gcGFyZW50LmdldENoaWxkSW5kZXgoZW50aXR5KTtcclxuICAgICAgICAgICAgcGFyZW50LmFkZENoaWxkQXQodGhpcy5fbW9kYWxQYW5lbE1hc2ssIGluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIOmakOiXj+aooeaAgeeql+WPo+mBrue9qSAqL1xyXG4gICAgTWFza0VudGl0eUltcGwucHJvdG90eXBlLmhpZGVNb2RhbE1hc2sgPSBmdW5jdGlvbiAocGFuZWwpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNTaG93aW5nTW9kYWxNYXNrKHBhbmVsKSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuX21vZGFsUGFuZWxEaWN0LmRlbGV0ZShwYW5lbCk7XHJcbiAgICAgICAgdGhpcy5fbW9kYWxQYW5lbExpc3Quc3BsaWNlKHRoaXMuX21vZGFsUGFuZWxMaXN0LmluZGV4T2YocGFuZWwpLCAxKTtcclxuICAgICAgICAvLyDliKTmlq3mmK/lkKbov5jpnIDopoFNYXNrXHJcbiAgICAgICAgaWYgKHRoaXMuX21vZGFsUGFuZWxMaXN0Lmxlbmd0aCA8PSAwKSB7XHJcbiAgICAgICAgICAgIC8vIOmakOiXj1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fbW9kYWxQYW5lbE1hc2sucGFyZW50ICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tb2RhbFBhbmVsTWFzay5wYXJlbnQucmVtb3ZlQ2hpbGQodGhpcy5fbW9kYWxQYW5lbE1hc2spO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8g56e75YqoTWFza1xyXG4gICAgICAgICAgICB2YXIgZW50aXR5ID0gdGhpcy5fbW9kYWxQYW5lbExpc3RbdGhpcy5fbW9kYWxQYW5lbExpc3QubGVuZ3RoIC0gMV0uc2tpbjtcclxuICAgICAgICAgICAgdmFyIHBhcmVudCA9IGVudGl0eS5wYXJlbnQ7XHJcbiAgICAgICAgICAgIGlmIChwYXJlbnQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX21vZGFsUGFuZWxNYXNrLnBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21vZGFsUGFuZWxNYXNrLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzLl9tb2RhbFBhbmVsTWFzayk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBwYXJlbnQuZ2V0Q2hpbGRJbmRleChlbnRpdHkpO1xyXG4gICAgICAgICAgICAgICAgcGFyZW50LmFkZENoaWxkQXQodGhpcy5fbW9kYWxQYW5lbE1hc2ssIGluZGV4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiog5b2T5YmN5piv5ZCm5Zyo5pi+56S65qih5oCB56qX5Y+j6YGu572pICovXHJcbiAgICBNYXNrRW50aXR5SW1wbC5wcm90b3R5cGUuaXNTaG93aW5nTW9kYWxNYXNrID0gZnVuY3Rpb24gKHBhbmVsKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLl9tb2RhbFBhbmVsRGljdC5nZXQocGFuZWwpICE9IG51bGwpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBNYXNrRW50aXR5SW1wbDtcclxufSgpKTtcclxuZXhwb3J0IGRlZmF1bHQgTWFza0VudGl0eUltcGw7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yLWVncmV0L2VncmV0L21hc2svTWFza0VudGl0eS5qc1xuLy8gbW9kdWxlIGlkID0gNjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXHJcbiAqIEBhdXRob3IgUmF5a2lkXHJcbiAqIEBlbWFpbCBpbml0aWFsX3JAcXEuY29tXHJcbiAqIEBjcmVhdGUgZGF0ZSAyMDE3LTEwLTE3XHJcbiAqIEBtb2RpZnkgZGF0ZSAyMDE3LTEwLTE3XHJcbiAqXHJcbiAqIFVJ5bel5YW36ZuGXHJcbiovXHJcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG4vKipcclxuICog5YyF6KOFRVVJ55qERGF0YUdyb3Vw57uE5Lu277yM5L2/55So5Lyg5YWl55qE5aSE55CG5Ye95pWw5aSE55CG5q+P5Liq5riy5p+T5Zmo5pu05paw55qE6YC76L6RXHJcbiAqXHJcbiAqIEBleHBvcnRcclxuICogQHBhcmFtIHtldWkuRGF0YUdyb3VwfSBncm91cCDooqvljIXoo4XnmoREYXRhR3JvdXDnu4Tku7ZcclxuICogQHBhcmFtIHsoZGF0YT86YW55LCByZW5kZXJlcj86YW55KT0+dm9pZH0gcmVuZGVyZXJIYW5kbGVyIOa4suafk+WZqOWkhOeQhuWHveaVsO+8jOavj+asoeaVsOaNruabtOaWsOaXtuS8muiiq+iwg+eUqO+8jOWkhOeQhuWNleS4qua4suafk+WZqOeahOa4suafk+mAu+i+kVxyXG4gKiBAcGFyYW0geyhkYXRhcz86ZXVpLklDb2xsZWN0aW9uLCBncm91cD86ZXVpLkRhdGFHcm91cCk9PnZvaWR9IFt1cGRhdGVIYW5kbGVyXSDmlbDmja7mm7TmlrDlpITnkIblh73mlbDvvIzmr4/mrKHmmL7npLrmm7TmlrDml7bkvJrooqvosIPnlKjvvIzlpITnkIbliJfooajmmL7npLrmm7TmlrDlkI7nmoTmuLLmn5PpgLvovpFcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB3cmFwRVVJTGlzdChncm91cCwgcmVuZGVyZXJIYW5kbGVyLCB1cGRhdGVIYW5kbGVyKSB7XHJcbiAgICBncm91cC5pdGVtUmVuZGVyZXIgPSBJdGVtUmVuZGVyZXIuYmluZChudWxsLCBncm91cC5pdGVtUmVuZGVyZXJTa2luTmFtZSwgcmVuZGVyZXJIYW5kbGVyKTtcclxuICAgIGlmICh1cGRhdGVIYW5kbGVyKSB7XHJcbiAgICAgICAgLy8g55uR5ZCsZ3JvdXDlsLrlr7jmmK/lkKbmlLnlj5hcclxuICAgICAgICB2YXIgZW50ZXJGcmFtZUhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChncm91cC5jb250ZW50V2lkdGggPiAwIHx8IGdyb3VwLmNvbnRlbnRIZWlnaHQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDnp7vpmaTkuovku7bnm5HlkKxcclxuICAgICAgICAgICAgICAgIGdyb3VwLnJlbW92ZUV2ZW50TGlzdGVuZXIoZWdyZXQuRXZlbnQuRU5URVJfRlJBTUUsIGVudGVyRnJhbWVIYW5kbGVyLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgIC8vIOiwg+eUqOWbnuiwg1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlSGFuZGxlcihncm91cC5kYXRhUHJvdmlkZXIsIGdyb3VwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZ3JvdXAuYWRkRXZlbnRMaXN0ZW5lcihlZ3JldC5FdmVudC5FTlRFUl9GUkFNRSwgZW50ZXJGcmFtZUhhbmRsZXIsIHRoaXMpO1xyXG4gICAgfVxyXG59XHJcbnZhciBJdGVtUmVuZGVyZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoSXRlbVJlbmRlcmVyLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gSXRlbVJlbmRlcmVyKHNraW5OYW1lLCByZW5kZXJlckhhbmRsZXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLnNraW5OYW1lID0gc2tpbk5hbWU7XHJcbiAgICAgICAgX3RoaXMuX3JlbmRlcmVySGFuZGxlciA9IHJlbmRlcmVySGFuZGxlcjtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBJdGVtUmVuZGVyZXIucHJvdG90eXBlLmRhdGFDaGFuZ2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGF0YUNoYW5nZWQuY2FsbCh0aGlzKTtcclxuICAgICAgICB0aGlzLl9yZW5kZXJlckhhbmRsZXIodGhpcy5kYXRhLCB0aGlzKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gSXRlbVJlbmRlcmVyO1xyXG59KGV1aS5JdGVtUmVuZGVyZXIpKTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25vZGVfbW9kdWxlcy9vbHltcHVzLXItZWdyZXQvZWdyZXQvdXRpbHMvVUlVdGlsLmpzXG4vLyBtb2R1bGUgaWQgPSA3MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxuZGVmaW5lKFtcInJlcXVpcmVcIiwgXCJleHBvcnRzXCIsIFwib2x5bXB1cy1yL2VuZ2luZS9uZXQvRGF0YVR5cGVcIl0sIGZ1bmN0aW9uIChyZXF1aXJlLCBleHBvcnRzLCBEYXRhVHlwZV8xKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuICAgIC8qKlxyXG4gICAgICogQGF1dGhvciBUZW1wbGF0ZUdlbmVyYXRvclxyXG4gICAgICogQGVtYWlsIGluaXRpYWxfckBxcS5jb21cclxuICAgICAqIEBtb2RpZnkgZGF0ZSAxMC85LzIwMTdcclxuICAgICAqXHJcbiAgICAgKiDmtYvor5VcclxuICAgICovXHJcbiAgICB2YXIgVGVzdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoVGVzdCwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBUZXN0KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFRlc3QucHJvdG90eXBlLmRvUGFyc2UgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICBpZiAoZGF0YSA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB0aGlzLnRlc3QgPSBkYXRhLnRlc3Q7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBUZXN0LnByb3RvdHlwZS5wYWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdGVzdDogdGhpcy50ZXN0XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gVGVzdDtcclxuICAgIH0oRGF0YVR5cGVfMS5kZWZhdWx0KSk7XHJcbiAgICBleHBvcnRzLmRlZmF1bHQgPSBUZXN0O1xyXG59KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pVkdWemRDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWxSbGMzUXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3T3p0SlFVVkJPenM3T3pzN1RVRk5SVHRKUVVOR08xRkJRV3RETEhkQ1FVRlJPMUZCUVRGRE96dFJRWE5DUVN4RFFVRkRPMUZCV21Fc2MwSkJRVThzUjBGQmFrSXNWVUZCYTBJc1NVRkJVVHRaUVVWMFFpeEZRVUZGTEVOQlFVRXNRMEZCUXl4SlFVRkpMRWxCUVVrc1NVRkJTU3hEUVVGRE8yZENRVUZETEUxQlFVMHNRMEZCUXp0WlFVTjRRaXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNN1VVRkRNVUlzUTBGQlF6dFJRVVZOTEcxQ1FVRkpMRWRCUVZnN1dVRkZTU3hOUVVGTkxFTkJRVU03WjBKQlEwZ3NTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhKUVVGSk8yRkJRMnhDTEVOQlFVTTdVVUZEVGl4RFFVRkRPMUZCUTB3c1YwRkJRenRKUVVGRUxFTkJRVU1zUVVGMFFrUXNRMEZCYTBNc2EwSkJRVkVzUjBGelFucERJbjA9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25ldC90eXBlL1Rlc3QudHNcbi8vIG1vZHVsZSBpZCA9IDcxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG5kZWZpbmUoW1wicmVxdWlyZVwiLCBcImV4cG9ydHNcIiwgXCIuLi9yZXNwb25zZS9UZXN0UmVzcG9uc2VcIiwgXCJvbHltcHVzLXIvZW5naW5lL25ldC9SZXF1ZXN0RGF0YVwiLCBcIm9seW1wdXMtci9lbmdpbmUvbmV0L3BvbGljaWVzL0hUVFBSZXF1ZXN0UG9saWN5XCJdLCBmdW5jdGlvbiAocmVxdWlyZSwgZXhwb3J0cywgVGVzdFJlc3BvbnNlXzEsIFJlcXVlc3REYXRhXzEsIEhUVFBSZXF1ZXN0UG9saWN5XzEpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAYXV0aG9yIFRlbXBsYXRlR2VuZXJhdG9yXHJcbiAgICAgKiBAZW1haWwgaW5pdGlhbF9yQHFxLmNvbVxyXG4gICAgICogQG1vZGlmeSBkYXRlIDEwLzkvMjAxN1xyXG4gICAgICpcclxuICAgICAqIOa1i+ivlVxyXG4gICAgKi9cclxuICAgIHZhciBUZXN0UmVxdWVzdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoVGVzdFJlcXVlc3QsIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gVGVzdFJlcXVlc3QoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgICAgICAgICBfdGhpcy5fX3BvbGljeSA9IEhUVFBSZXF1ZXN0UG9saWN5XzEuZGVmYXVsdDtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGVzdFJlcXVlc3QucHJvdG90eXBlLCBcIl9fcGFyYW1zXCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiVGVzdFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IFwiL3Rlc3RcIixcclxuICAgICAgICAgICAgICAgICAgICBwcm90b2NvbDogXCJodHRwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2U6IFRlc3RSZXNwb25zZV8xLmRlZmF1bHQsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXN0OiB0aGlzLnRlc3QgLy8gc3RyaW5nIC0g5rWL6K+VXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgO1xyXG4gICAgICAgIHJldHVybiBUZXN0UmVxdWVzdDtcclxuICAgIH0oUmVxdWVzdERhdGFfMS5kZWZhdWx0KSk7XHJcbiAgICBleHBvcnRzLmRlZmF1bHQgPSBUZXN0UmVxdWVzdDtcclxufSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVZHVnpkRkpsY1hWbGMzUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKVVpYTjBVbVZ4ZFdWemRDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096czdPenM3TzBsQlMwRTdPenM3T3p0TlFVMUZPMGxCUTBZN1VVRkJlVU1zSzBKQlFWYzdVVUZCY0VRN1dVRkJRU3h4UlVGMVFrTTdXVUZFVlN4alFVRlJMRWRCUVd0Q0xESkNRVUZOTEVOQlFVTTdPMUZCUXpWRExFTkJRVU03VVVGaVJ5eHpRa0ZCVnl4cFEwRkJVVHRwUWtGQmJrSTdaMEpCUlVrc1RVRkJUU3hEUVVGRE8yOUNRVU5JTEVsQlFVa3NSVUZCUlN4TlFVRk5PMjlDUVVOeVFpeEpRVUZKTEVWQlFVVXNUMEZCVHp0dlFrRkRTaXhSUVVGUkxFVkJRVVVzVFVGQlRUdHZRa0ZEYUVJc1VVRkJVU3hGUVVGRkxITkNRVUZaTzI5Q1FVTjBRaXhKUVVGSkxFVkJRVVU3ZDBKQlEwWXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVUVzWTBGQll6dHhRa0ZEYUVNN2FVSkJRMG9zUTBGQlF6dFpRVU5PTEVOQlFVTTdPenRYUVVGQk8xRkJRVUVzUTBGQlF6dFJRVVZPTEd0Q1FVRkRPMGxCUVVRc1EwRkJReXhCUVhaQ1JDeERRVUY1UXl4eFFrRkJWeXhIUVhWQ2JrUWlmUT09XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90ZXN0L25ldC9yZXF1ZXN0L1Rlc3RSZXF1ZXN0LnRzXG4vLyBtb2R1bGUgaWQgPSA3MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgeyBsb2FkIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL0hUVFBVdGlsXCI7XHJcbmltcG9ydCB7IGVudmlyb25tZW50IH0gZnJvbSBcIi4uLy4uL2Vudi9FbnZpcm9ubWVudFwiO1xyXG5pbXBvcnQgeyBuZXRNYW5hZ2VyIH0gZnJvbSBcIi4uL05ldE1hbmFnZXJcIjtcclxuaW1wb3J0IHsgZXh0ZW5kT2JqZWN0IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL09iamVjdFV0aWxcIjtcclxuLyoqXHJcbiAqIEBhdXRob3IgUmF5a2lkXHJcbiAqIEBlbWFpbCBpbml0aWFsX3JAcXEuY29tXHJcbiAqIEBjcmVhdGUgZGF0ZSAyMDE3LTA5LTExXHJcbiAqIEBtb2RpZnkgZGF0ZSAyMDE3LTA5LTExXHJcbiAqXHJcbiAqIEhUVFDor7fmsYLnrZbnlaVcclxuKi9cclxudmFyIEhUVFBSZXF1ZXN0UG9saWN5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSFRUUFJlcXVlc3RQb2xpY3koKSB7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOWPkemAgeivt+axgumAu+i+kVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7UmVxdWVzdERhdGF9IHJlcXVlc3Qg6K+35rGC5pWw5o2uXHJcbiAgICAgKiBAbWVtYmVyb2YgSFRUUFJlcXVlc3RQb2xpY3lcclxuICAgICAqL1xyXG4gICAgSFRUUFJlcXVlc3RQb2xpY3kucHJvdG90eXBlLnNlbmRSZXF1ZXN0ID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcclxuICAgICAgICAvLyDlj5bliLDlj4LmlbBcclxuICAgICAgICB2YXIgcGFyYW1zID0gcmVxdWVzdC5fX3BhcmFtcztcclxuICAgICAgICAvLyDkv67mlLnmlbDmja5cclxuICAgICAgICB2YXIgaHR0cFBhcmFtcyA9IGV4dGVuZE9iamVjdCh7XHJcbiAgICAgICAgICAgIHVybDogZW52aXJvbm1lbnQudG9Ib3N0VVJMKHBhcmFtcy5wYXRoLCBwYXJhbXMuaG9zdEluZGV4KSxcclxuICAgICAgICAgICAgb25SZXNwb25zZTogZnVuY3Rpb24gKHJlc3VsdCkgeyByZXR1cm4gbmV0TWFuYWdlci5fX29uUmVzcG9uc2UocmVxdWVzdC5fX3BhcmFtcy5yZXNwb25zZS50eXBlLCByZXN1bHQsIHJlcXVlc3QpOyB9LFxyXG4gICAgICAgICAgICBvbkVycm9yOiBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBuZXRNYW5hZ2VyLl9fb25FcnJvcihlcnIsIHJlcXVlc3QpOyB9LFxyXG4gICAgICAgICAgICBoZWFkZXJEaWN0OiB7fVxyXG4gICAgICAgIH0sIHBhcmFtcyk7XHJcbiAgICAgICAgLy8gYWpheOivt+axgumDvee7n+S4gOiuvue9rndpdGhDcmVkZW50aWFsc1xyXG4gICAgICAgIGh0dHBQYXJhbXMuaGVhZGVyRGljdFtcIndpdGhDcmVkZW50aWFsc1wiXSA9IFwidHJ1ZVwiO1xyXG4gICAgICAgIC8vIOWPkemAgVxyXG4gICAgICAgIGxvYWQoaHR0cFBhcmFtcyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEhUVFBSZXF1ZXN0UG9saWN5O1xyXG59KCkpO1xyXG5leHBvcnQgeyBIVFRQUmVxdWVzdFBvbGljeSB9O1xyXG4vKiog5YaN6aKd5aSW5a+85Ye65LiA5Liq5a6e5L6LICovXHJcbmV4cG9ydCBkZWZhdWx0IG5ldyBIVFRQUmVxdWVzdFBvbGljeSgpO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Rlc3Qvbm9kZV9tb2R1bGVzL29seW1wdXMtci9lbmdpbmUvbmV0L3BvbGljaWVzL0hUVFBSZXF1ZXN0UG9saWN5LmpzXG4vLyBtb2R1bGUgaWQgPSA3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxuZGVmaW5lKFtcInJlcXVpcmVcIiwgXCJleHBvcnRzXCIsIFwib2x5bXB1cy1yL2NvcmUvaW5qZWN0b3IvSW5qZWN0b3JcIiwgXCJvbHltcHVzLXIvZW5naW5lL2Vudi9IYXNoXCIsIFwib2x5bXB1cy1yL2VuZ2luZS9pbmplY3Rvci9JbmplY3RvclwiXSwgZnVuY3Rpb24gKHJlcXVpcmUsIGV4cG9ydHMsIEluamVjdG9yXzEsIEhhc2hfMSwgSW5qZWN0b3JfMikge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbiAgICB2YXIgSUZ1Y2tNb2RlbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmdW5jdGlvbiBJRnVja01vZGVsKCkge1xyXG4gICAgICAgIH1cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSUZ1Y2tNb2RlbC5wcm90b3R5cGUsIFwiZnVja1wiLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBJRnVja01vZGVsO1xyXG4gICAgfSgpKTtcclxuICAgIGV4cG9ydHMuSUZ1Y2tNb2RlbCA9IElGdWNrTW9kZWw7XHJcbiAgICB2YXIgRnVja01vZGVsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIEZ1Y2tNb2RlbCgpIHtcclxuICAgICAgICAgICAgdGhpcy5fZnVjayA9IFwiRnVja1wiO1xyXG4gICAgICAgICAgICB0aGlzLnNoaXQgPSBcIlNoaXRcIjtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJGdWNrIE1vZGVsIENvbnN0cnVjdGVkIVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZ1Y2tNb2RlbC5wcm90b3R5cGUsIFwiZnVja1wiLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Z1Y2s7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mdWNrID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIEZ1Y2tNb2RlbC5wcm90b3R5cGUuZnVja1lvdSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiT3llIVwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgX19kZWNvcmF0ZShbXHJcbiAgICAgICAgICAgIEluamVjdG9yXzEuSW5qZWN0LFxyXG4gICAgICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgSGFzaF8xLmRlZmF1bHQpXHJcbiAgICAgICAgXSwgRnVja01vZGVsLnByb3RvdHlwZSwgXCJoYXNoXCIsIHZvaWQgMCk7XHJcbiAgICAgICAgRnVja01vZGVsID0gX19kZWNvcmF0ZShbXHJcbiAgICAgICAgICAgIEluamVjdG9yXzIuTW9kZWxDbGFzcygxLCBJRnVja01vZGVsKSxcclxuICAgICAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtdKVxyXG4gICAgICAgIF0sIEZ1Y2tNb2RlbCk7XHJcbiAgICAgICAgcmV0dXJuIEZ1Y2tNb2RlbDtcclxuICAgIH0oKSk7XHJcbiAgICBleHBvcnRzLmRlZmF1bHQgPSBGdWNrTW9kZWw7XHJcbn0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lSblZqYTAxdlpHVnNMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaVJuVmphMDF2WkdWc0xuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdPenRKUVVsQk8xRkJRVUU3VVVGTlFTeERRVUZETzFGQlNrY3NjMEpCUVZjc05FSkJRVWs3YVVKQlFXWTdaMEpCUlVrc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF6dFpRVU5vUWl4RFFVRkRPenM3VjBGQlFUdFJRVU5NTEdsQ1FVRkRPMGxCUVVRc1EwRkJReXhCUVU1RUxFbEJUVU03U1VGT1dTeG5RMEZCVlR0SlFWTjJRanRSUVdsQ1NUdFpRVnBSTEZWQlFVc3NSMEZCVlN4TlFVRk5MRU5CUVVNN1dVRlZka0lzVTBGQlNTeEhRVUZWTEUxQlFVMHNRMEZCUXp0WlFVbDRRaXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEhsQ1FVRjVRaXhEUVVGRExFTkJRVU03VVVGRE0wTXNRMEZCUXp0UlFXUkVMSE5DUVVGWExESkNRVUZKTzJsQ1FVRm1PMmRDUVVWSkxFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRPMWxCUTNSQ0xFTkJRVU03YVVKQlEwUXNWVUZCWjBJc1MwRkJXVHRuUWtGRmVFSXNTVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU03V1VGRGRrSXNRMEZCUXpzN08xZEJTa0U3VVVGaFRTd3lRa0ZCVHl4SFFVRmtPMWxCUlVrc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF6dFJRVU5zUWl4RFFVRkRPMUZCZEVKRU8xbEJSRU1zYVVKQlFVMDdjME5CUTAwc1kwRkJTVHNyUTBGQlF6dFJRVWhFTEZOQlFWTTdXVUZFTjBJc2NVSkJRVlVzUTBGQlF5eERRVUZETEVWQlFVVXNWVUZCVlN4RFFVRkRPenRYUVVOTUxGTkJRVk1zUTBFd1FqZENPMUZCUVVRc1owSkJRVU03UzBGQlFTeEJRVEZDUkN4SlFUQkNRenR6UWtFeFFtOUNMRk5CUVZNaWZRPT1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Rlc3QvbW9kZWxzL0Z1Y2tNb2RlbC50c1xuLy8gbW9kdWxlIGlkID0gNzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IHsgbGlzdGVuQ29uc3RydWN0IH0gZnJvbSBcIm9seW1wdXMtci91dGlscy9Db25zdHJ1Y3RVdGlsXCI7XHJcbmltcG9ydCB7IE1lZGlhdG9yQ2xhc3MgfSBmcm9tIFwib2x5bXB1cy1yL2VuZ2luZS9pbmplY3Rvci9JbmplY3RvclwiO1xyXG5pbXBvcnQgeyBicmlkZ2VNYW5hZ2VyIH0gZnJvbSBcIm9seW1wdXMtci9lbmdpbmUvYnJpZGdlL0JyaWRnZU1hbmFnZXJcIjtcclxuaW1wb3J0IHsgd3JhcFNraW4gfSBmcm9tIFwiLi4vdXRpbHMvU2tpblV0aWxcIjtcclxuaW1wb3J0IERPTUJyaWRnZSBmcm9tIFwiLi4vLi4vRE9NQnJpZGdlXCI7XHJcbmV4cG9ydCBmdW5jdGlvbiBET01NZWRpYXRvckNsYXNzKCkge1xyXG4gICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgaWYgKGFyZ3NbMF0gaW5zdGFuY2VvZiBGdW5jdGlvbikge1xyXG4gICAgICAgIC8vIOiwg+eUqE1lZGlhdG9yQ2xhc3Pmlrnms5VcclxuICAgICAgICB2YXIgY2xzID0gTWVkaWF0b3JDbGFzcyhhcmdzWzBdKTtcclxuICAgICAgICAvLyDnm5HlkKznsbvlnovlrp7kvovljJbvvIzotYvlgLzooajnjrDlsYLmoaVcclxuICAgICAgICBsaXN0ZW5Db25zdHJ1Y3QoY2xzLCBmdW5jdGlvbiAobWVkaWF0b3IpIHsgcmV0dXJuIG1lZGlhdG9yLmJyaWRnZSA9IGJyaWRnZU1hbmFnZXIuZ2V0QnJpZGdlKERPTUJyaWRnZS5UWVBFKTsgfSk7XHJcbiAgICAgICAgLy8g6L+U5Zue57uT5p6c57G75Z6LXHJcbiAgICAgICAgcmV0dXJuIGNscztcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoY2xzKSB7XHJcbiAgICAgICAgICAgIC8vIOiwg+eUqE1lZGlhdG9yQ2xhc3Pmlrnms5VcclxuICAgICAgICAgICAgY2xzID0gTWVkaWF0b3JDbGFzcyhjbHMpO1xyXG4gICAgICAgICAgICAvLyDnm5HlkKznsbvlnovlrp7kvovljJbvvIzovazmjaLnmq7ogqTmoLzlvI9cclxuICAgICAgICAgICAgbGlzdGVuQ29uc3RydWN0KGNscywgZnVuY3Rpb24gKG1lZGlhdG9yKSB7IHJldHVybiB3cmFwU2tpbihtZWRpYXRvciwgYXJncyk7IH0pO1xyXG4gICAgICAgICAgICAvLyDov5Tlm57nu5PmnpznsbvlnotcclxuICAgICAgICAgICAgcmV0dXJuIGNscztcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yLWRvbS9kb20vaW5qZWN0b3IvSW5qZWN0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDc1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCB7IGJyaWRnZU1hbmFnZXIgfSBmcm9tIFwib2x5bXB1cy1yL2VuZ2luZS9icmlkZ2UvQnJpZGdlTWFuYWdlclwiO1xyXG5pbXBvcnQgRE9NQnJpZGdlIGZyb20gXCIuLi8uLi9ET01CcmlkZ2VcIjtcclxuLyoqXHJcbiAqIEBhdXRob3IgUmF5a2lkXHJcbiAqIEBlbWFpbCBpbml0aWFsX3JAcXEuY29tXHJcbiAqIEBjcmVhdGUgZGF0ZSAyMDE3LTEwLTI1XHJcbiAqIEBtb2RpZnkgZGF0ZSAyMDE3LTEwLTI1XHJcbiAqXHJcbiAqIERPTemBrue9qeWunueOsFxyXG4qL1xyXG52YXIgTWFza0VudGl0eUltcGwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBNYXNrRW50aXR5SW1wbChwYXJhbXMpIHtcclxuICAgICAgICB0aGlzLl9zaG93aW5nID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHBhcmFtcykge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtcy5sb2FkaW5nU2tpbiA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGVtcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgICAgICAgICB0ZW1wLmlubmVySFRNTCA9IHBhcmFtcy5sb2FkaW5nU2tpbjtcclxuICAgICAgICAgICAgICAgIHBhcmFtcy5sb2FkaW5nU2tpbiA9IHRlbXA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5sb2FkaW5nU2tpbiA9IHBhcmFtcy5sb2FkaW5nU2tpbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5tYXNrRGF0YSA9IHBhcmFtcyB8fCB7fTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5pi+56S66YGu572pXHJcbiAgICAgKi9cclxuICAgIE1hc2tFbnRpdHlJbXBsLnByb3RvdHlwZS5zaG93TWFzayA9IGZ1bmN0aW9uIChhbHBoYSkge1xyXG4gICAgICAgIC8vIERPTeahhuaetuS4jemcgOimgemBrue9qe+8jOWFqOmDqOS+nei1lkNTU+WunueOsFxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog6ZqQ6JeP6YGu572pXHJcbiAgICAgKi9cclxuICAgIE1hc2tFbnRpdHlJbXBsLnByb3RvdHlwZS5oaWRlTWFzayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBET03moYbmnrbkuI3pnIDopoHpga7nvanvvIzlhajpg6jkvp3otZZDU1Plrp7njrBcclxuICAgIH07XHJcbiAgICAvKirlvZPliY3mmK/lkKblnKjmmL7npLrpga7nvakqL1xyXG4gICAgTWFza0VudGl0eUltcGwucHJvdG90eXBlLmlzU2hvd2luZ01hc2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gRE9N5qGG5p625LiN6ZyA6KaB6YGu572p77yM5YWo6YOo5L6d6LWWQ1NT5a6e546wXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog5pi+56S65Yqg6L295Zu+XHJcbiAgICAgKi9cclxuICAgIE1hc2tFbnRpdHlJbXBsLnByb3RvdHlwZS5zaG93TG9hZGluZyA9IGZ1bmN0aW9uIChhbHBoYSkge1xyXG4gICAgICAgIGlmICh0aGlzLmxvYWRpbmdTa2luID09IG51bGwgfHwgdGhpcy5fc2hvd2luZylcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuX3Nob3dpbmcgPSB0cnVlO1xyXG4gICAgICAgIC8vIOaYvuekulxyXG4gICAgICAgIHZhciBicmlkZ2UgPSBicmlkZ2VNYW5hZ2VyLmdldEJyaWRnZShET01CcmlkZ2UuVFlQRSk7XHJcbiAgICAgICAgYnJpZGdlLmFkZENoaWxkKGJyaWRnZS5tYXNrTGF5ZXIsIHRoaXMubG9hZGluZ1NraW4pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog6ZqQ6JeP5Yqg6L295Zu+XHJcbiAgICAgKi9cclxuICAgIE1hc2tFbnRpdHlJbXBsLnByb3RvdHlwZS5oaWRlTG9hZGluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5sb2FkaW5nU2tpbiA9PSBudWxsIHx8ICF0aGlzLl9zaG93aW5nKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgdGhpcy5fc2hvd2luZyA9IGZhbHNlO1xyXG4gICAgICAgIC8vIOmakOiXj1xyXG4gICAgICAgIHZhciBicmlkZ2UgPSBicmlkZ2VNYW5hZ2VyLmdldEJyaWRnZShET01CcmlkZ2UuVFlQRSk7XHJcbiAgICAgICAgYnJpZGdlLnJlbW92ZUNoaWxkKGJyaWRnZS5tYXNrTGF5ZXIsIHRoaXMubG9hZGluZ1NraW4pO1xyXG4gICAgfTtcclxuICAgIC8qKuW9k+WJjeaYr+WQpuWcqOaYvuekumxvYWRpbmcqL1xyXG4gICAgTWFza0VudGl0eUltcGwucHJvdG90eXBlLmlzU2hvd2luZ0xvYWRpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Nob3dpbmc7XHJcbiAgICB9O1xyXG4gICAgLyoqIOaYvuekuuaooeaAgeeql+WPo+mBrue9qSAqL1xyXG4gICAgTWFza0VudGl0eUltcGwucHJvdG90eXBlLnNob3dNb2RhbE1hc2sgPSBmdW5jdGlvbiAocGFuZWwsIGFscGhhKSB7XHJcbiAgICAgICAgLy8gRE9N5qGG5p625LiN6ZyA6KaB5qih5oCB56qX5Y+j6YGu572p77yM5YWo6YOo5L6d6LWWQ1NT5a6e546wXHJcbiAgICB9O1xyXG4gICAgLyoqIOmakOiXj+aooeaAgeeql+WPo+mBrue9qSAqL1xyXG4gICAgTWFza0VudGl0eUltcGwucHJvdG90eXBlLmhpZGVNb2RhbE1hc2sgPSBmdW5jdGlvbiAocGFuZWwpIHtcclxuICAgICAgICAvLyBET03moYbmnrbkuI3pnIDopoHmqKHmgIHnqpflj6Ppga7nvanvvIzlhajpg6jkvp3otZZDU1Plrp7njrBcclxuICAgIH07XHJcbiAgICAvKiog5b2T5YmN5piv5ZCm5Zyo5pi+56S65qih5oCB56qX5Y+j6YGu572pICovXHJcbiAgICBNYXNrRW50aXR5SW1wbC5wcm90b3R5cGUuaXNTaG93aW5nTW9kYWxNYXNrID0gZnVuY3Rpb24gKHBhbmVsKSB7XHJcbiAgICAgICAgLy8gRE9N5qGG5p625LiN6ZyA6KaB5qih5oCB56qX5Y+j6YGu572p77yM5YWo6YOo5L6d6LWWQ1NT5a6e546wXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBNYXNrRW50aXR5SW1wbDtcclxufSgpKTtcclxuZXhwb3J0IGRlZmF1bHQgTWFza0VudGl0eUltcGw7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yLWRvbS9kb20vbWFzay9NYXNrRW50aXR5LmpzXG4vLyBtb2R1bGUgaWQgPSA3NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgeyBlbmdpbmUgfSBmcm9tIFwiLi9lbmdpbmUvRW5naW5lXCI7XHJcbmV4cG9ydCB7IGNvcmUgfSBmcm9tIFwiLi9jb3JlL0NvcmVcIjtcclxuLyoqXHJcbiAqIEBhdXRob3IgUmF5a2lkXHJcbiAqIEBlbWFpbCBpbml0aWFsX3JAcXEuY29tXHJcbiAqIEBjcmVhdGUgZGF0ZSAyMDE3LTA5LTE4XHJcbiAqIEBtb2RpZnkgZGF0ZSAyMDE3LTA5LTE4XHJcbiAqXHJcbiAqIE9seW1wdXPmoYbmnrbkvr/mjbflkK/liqjkuI7moYbmnrblpJbop4LmqKHlnZdcclxuKi9cclxudmFyIE9seW1wdXMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBPbHltcHVzKCkge1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDlkK/liqhPbHltcHVz5qGG5p62XHJcbiAgICAgKlxyXG4gICAgICogQHN0YXRpY1xyXG4gICAgICogQHBhcmFtIHtJSW5pdFBhcmFtc30gcGFyYW1zIOWQr+WKqOWPguaVsFxyXG4gICAgICogQG1lbWJlcm9mIE9seW1wdXNcclxuICAgICAqL1xyXG4gICAgT2x5bXB1cy5zdGFydHVwID0gZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgICAgIC8vIOWIneWni+WMluW8leaTjuaooeWdl1xyXG4gICAgICAgIGVuZ2luZS5pbml0aWFsaXplKHBhcmFtcyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE9seW1wdXM7XHJcbn0oKSk7XHJcbmV4cG9ydCBkZWZhdWx0IE9seW1wdXM7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL09seW1wdXMuanNcbi8vIG1vZHVsZSBpZCA9IDc3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn07XHJcbmltcG9ydCB7IGNvcmUgfSBmcm9tIFwiLi4vY29yZS9Db3JlXCI7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiLi4vY29yZS9pbmplY3Rvci9JbmplY3RvclwiO1xyXG5pbXBvcnQgeyBicmlkZ2VNYW5hZ2VyIH0gZnJvbSBcIi4vYnJpZGdlL0JyaWRnZU1hbmFnZXJcIjtcclxuaW1wb3J0IEJyaWRnZU1lc3NhZ2UgZnJvbSBcIi4vYnJpZGdlL0JyaWRnZU1lc3NhZ2VcIjtcclxuaW1wb3J0IHsgbW9kdWxlTWFuYWdlciB9IGZyb20gXCIuL21vZHVsZS9Nb2R1bGVNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IGFzc2V0c01hbmFnZXIgfSBmcm9tIFwiLi9hc3NldHMvQXNzZXRzTWFuYWdlclwiO1xyXG5pbXBvcnQgeyBlbnZpcm9ubWVudCB9IGZyb20gXCIuL2Vudi9FbnZpcm9ubWVudFwiO1xyXG5pbXBvcnQgeyBoYXNoIH0gZnJvbSBcIi4vZW52L0hhc2hcIjtcclxuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL3ZlcnNpb24vVmVyc2lvblwiO1xyXG5pbXBvcnQgTW9kdWxlTWVzc2FnZSBmcm9tIFwiLi9tb2R1bGUvTW9kdWxlTWVzc2FnZVwiO1xyXG4vKipcclxuICogQGF1dGhvciBSYXlraWRcclxuICogQGVtYWlsIGluaXRpYWxfckBxcS5jb21cclxuICogQGNyZWF0ZSBkYXRlIDIwMTctMDktMDZcclxuICogQG1vZGlmeSBkYXRlIDIwMTctMDktMDZcclxuICpcclxuICogRW5naW5l5qih57uE5piv5byA5Y+R5qGG5p6255qE5byV5pOO6YOo5YiG77yM5YyF5ous5Lia5Yqh5qih5Z2X57O757uf44CB5bqU55So56iL5bqP5ZCv5Yqo5ZKM5Yid5aeL5YyW44CB5by556qX5ZKM5Zy65pmv566h55CG5Zmo562J5LiO6aG555uu5byA5Y+R55u45YWz55qE6YC76L6R6YO95Zyo6L+Z5Liq5qih57uE5LitXHJcbiAqIOi/meS4quaooee7hOeahOmAu+i+kemDvemrmOW6pumbhuaIkOWcqOWtkOaooee7hOS4reS6hu+8jOWboOatpOS5n+WPquaYr+aUtumbhuebuOWFs+WtkOaooee7hFxyXG4qL1xyXG52YXIgRW5naW5lID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRW5naW5lKCkge1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDliJ3lp4vljJZFbmdpbmVcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0lJbml0UGFyYW1zfSBwYXJhbXMg5Yid5aeL5YyW5Y+C5pWwXHJcbiAgICAgKiBAbWVtYmVyb2YgRW5naW5lXHJcbiAgICAgKi9cclxuICAgIEVuZ2luZS5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgLy8g6LCD55So6L+b5bqm5Zue6LCD77yM5Yid5aeL5YyW5Li6MCVcclxuICAgICAgICBwYXJhbXMub25Jbml0UHJvZ3Jlc3MgJiYgcGFyYW1zLm9uSW5pdFByb2dyZXNzKDAsIEluaXRTdGVwLlJlYWR5VG9Jbml0KTtcclxuICAgICAgICAvLyDmiafooYzliJ3lp4vljJZcclxuICAgICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PSBcImxvYWRpbmdcIilcclxuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInJlYWR5c3RhdGVjaGFuZ2VcIiwgZG9Jbml0aWFsaXplKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIGRvSW5pdGlhbGl6ZSgpO1xyXG4gICAgICAgIGZ1bmN0aW9uIGRvSW5pdGlhbGl6ZSgpIHtcclxuICAgICAgICAgICAgLy8g6LCD55So6L+b5bqm5Zue6LCD77yM5byA5aeL5Yid5aeL5YyW5Li6MTAlXHJcbiAgICAgICAgICAgIHBhcmFtcy5vbkluaXRQcm9ncmVzcyAmJiBwYXJhbXMub25Jbml0UHJvZ3Jlc3MoMC4xLCBJbml0U3RlcC5TdGFydEluaXQpO1xyXG4gICAgICAgICAgICAvLyDnp7vpmaTkuovku7ZcclxuICAgICAgICAgICAgaWYgKHRoaXMgPT0gZG9jdW1lbnQpXHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVhZHlzdGF0ZWNoYW5nZVwiLCBkb0luaXRpYWxpemUpO1xyXG4gICAgICAgICAgICAvLyDopoHliKTmlq1kb2N1bWVudOaYr+WQpuWIneWni+WMluWujOavlVxyXG4gICAgICAgICAgICBzZWxmLl9pbml0UGFyYW1zID0gcGFyYW1zO1xyXG4gICAgICAgICAgICAvLyDliqDovb3pobVcclxuICAgICAgICAgICAgc2VsZi5fbG9hZEVsZW1lbnQgPSAodHlwZW9mIHBhcmFtcy5sb2FkRWxlbWVudCA9PSBcInN0cmluZ1wiID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihwYXJhbXMubG9hZEVsZW1lbnQpIDogcGFyYW1zLmxvYWRFbGVtZW50KTtcclxuICAgICAgICAgICAgLy8g55uR5ZCs6ZSZ6K+v5LqL5Lu2XHJcbiAgICAgICAgICAgIGlmIChwYXJhbXMub25FcnJvcilcclxuICAgICAgICAgICAgICAgIHNlbGYubGlzdGVuRXJyb3IocGFyYW1zLm9uRXJyb3IpO1xyXG4gICAgICAgICAgICAvLyDliJ3lp4vljJbnjq/looPlj4LmlbBcclxuICAgICAgICAgICAgZW52aXJvbm1lbnQuaW5pdGlhbGl6ZShwYXJhbXMuZW52LCBwYXJhbXMuaG9zdHNEaWN0LCBwYXJhbXMuY2Ruc0RpY3QpO1xyXG4gICAgICAgICAgICAvLyDliJ3lp4vljJbniYjmnKzlj7flt6XlhbdcclxuICAgICAgICAgICAgdmVyc2lvbi5pbml0aWFsaXplKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vIOiwg+eUqOi/m+W6puWbnuiwg++8jOeJiOacrOWPt+WIneWni+WMluWujOavleS4ujIwJVxyXG4gICAgICAgICAgICAgICAgcGFyYW1zLm9uSW5pdFByb2dyZXNzICYmIHBhcmFtcy5vbkluaXRQcm9ncmVzcygwLjIsIEluaXRTdGVwLlZlcnNpb25Jbml0ZWQpO1xyXG4gICAgICAgICAgICAgICAgLy8g55uR5ZCsQnJpZGdl5Yid5aeL5YyW5a6M5q+V5LqL5Lu277yM5pi+56S656ys5LiA5Liq5qih5Z2XXHJcbiAgICAgICAgICAgICAgICBjb3JlLmxpc3RlbihCcmlkZ2VNZXNzYWdlLkJSSURHRV9BTExfSU5JVCwgc2VsZi5vbkFsbEJyaWRnZXNJbml0LCBzZWxmKTtcclxuICAgICAgICAgICAgICAgIC8vIOazqOWGjOW5tuWIneWni+WMluihqOeOsOWxguahpeWunuS+i1xyXG4gICAgICAgICAgICAgICAgYnJpZGdlTWFuYWdlci5yZWdpc3RlckJyaWRnZS5hcHBseShicmlkZ2VNYW5hZ2VyLCBwYXJhbXMuYnJpZGdlcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIOa3u+WKoOmUmeivr+ebkeWQrOWHveaVsFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7KGV2dD86RXJyb3JFdmVudCk9PnZvaWR9IGhhbmRsZXIg6ZSZ6K+v55uR5ZCs5Ye95pWwXHJcbiAgICAgKiBAbWVtYmVyb2YgRW5naW5lXHJcbiAgICAgKi9cclxuICAgIEVuZ2luZS5wcm90b3R5cGUubGlzdGVuRXJyb3IgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xyXG4gICAgICAgIGlmIChoYW5kbGVyKVxyXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIGhhbmRsZXIpO1xyXG4gICAgfTtcclxuICAgIEVuZ2luZS5wcm90b3R5cGUub25BbGxCcmlkZ2VzSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIC8vIOiwg+eUqOi/m+W6puWbnuiwg++8jOihqOeOsOWxguahpeWIneWni+WMluWujOavleS4ujMwJVxyXG4gICAgICAgIHRoaXMuX2luaXRQYXJhbXMub25Jbml0UHJvZ3Jlc3MgJiYgdGhpcy5faW5pdFBhcmFtcy5vbkluaXRQcm9ncmVzcygwLjMsIEluaXRTdGVwLkJyaWRnZXNJbml0ZWQpO1xyXG4gICAgICAgIC8vIOazqOmUgOebkeWQrFxyXG4gICAgICAgIGNvcmUudW5saXN0ZW4oQnJpZGdlTWVzc2FnZS5CUklER0VfQUxMX0lOSVQsIHRoaXMub25BbGxCcmlkZ2VzSW5pdCwgdGhpcyk7XHJcbiAgICAgICAgLy8g5Yid5aeL5YyW5o+S5Lu2XHJcbiAgICAgICAgaWYgKHRoaXMuX2luaXRQYXJhbXMucGx1Z2lucykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5faW5pdFBhcmFtcy5wbHVnaW5zOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBsdWdpbiA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgIHBsdWdpbi5pbml0UGx1Z2luKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g5rOo5YaM55+t5ZCN56ewXHJcbiAgICAgICAgYXNzZXRzTWFuYWdlci5jb25maWdQYXRoKHRoaXMuX2luaXRQYXJhbXMucGF0aERpY3QpO1xyXG4gICAgICAgIC8vIOW8gOWni+mihOWKoOi9vei/h+eoi1xyXG4gICAgICAgIHZhciBwcmVsb2FkcyA9IHRoaXMuX2luaXRQYXJhbXMucHJlbG9hZHM7XHJcbiAgICAgICAgaWYgKHByZWxvYWRzKSB7XHJcbiAgICAgICAgICAgIC8vIOWOu+WKoOi9vVxyXG4gICAgICAgICAgICB2YXIgY3VySW5kZXggPSAwO1xyXG4gICAgICAgICAgICB2YXIgdG90YWxDb3VudCA9IHByZWxvYWRzLmxlbmd0aDtcclxuICAgICAgICAgICAgYXNzZXRzTWFuYWdlci5sb2FkQXNzZXRzKHByZWxvYWRzLCB0aGlzLm9uUHJlbG9hZE9LLmJpbmQodGhpcyksIG51bGwsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJJbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgLy8g6LCD55So6L+b5bqm5Zue6LCD77yM5q+P5Liq6aKE5Yqg6L295paH5Lu25bmz5YiGMzAlLTkwJeeahOi/m+W6plxyXG4gICAgICAgICAgICAgICAgdmFyIHByb2dyZXNzID0gMC4zICsgMC42ICogY3VySW5kZXggLyB0b3RhbENvdW50O1xyXG4gICAgICAgICAgICAgICAgLy8g5L+d55WZMuS9jeWwj+aVsFxyXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3MgPSBNYXRoLnJvdW5kKHByb2dyZXNzICogMTAwKSAqIDAuMDE7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5faW5pdFBhcmFtcy5vbkluaXRQcm9ncmVzcyAmJiBfdGhpcy5faW5pdFBhcmFtcy5vbkluaXRQcm9ncmVzcyhwcm9ncmVzcywgSW5pdFN0ZXAuUHJlbG9hZCwga2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8g5rKh5pyJ6aKE5Yqg6L2977yM55u05o6l5a6M5oiQXHJcbiAgICAgICAgICAgIHRoaXMub25QcmVsb2FkT0soKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRW5naW5lLnByb3RvdHlwZS5vblByZWxvYWRPSyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyDosIPnlKjov5vluqblm57osIPvvIzmiZPlvIDpppbkuKrmqKHlnZfkuLo5MCVcclxuICAgICAgICB0aGlzLl9pbml0UGFyYW1zLm9uSW5pdFByb2dyZXNzICYmIHRoaXMuX2luaXRQYXJhbXMub25Jbml0UHJvZ3Jlc3MoMC45LCBJbml0U3RlcC5PcGVuRmlyc3RNb2R1bGUpO1xyXG4gICAgICAgIC8vIOiwg+eUqOWIneWni+WMluWujOaIkOWbnuiwg1xyXG4gICAgICAgIHRoaXMuX2luaXRQYXJhbXMub25Jbml0ZWQgJiYgdGhpcy5faW5pdFBhcmFtcy5vbkluaXRlZCgpO1xyXG4gICAgICAgIC8vIOebkeWQrOmmluS4quaooeWdl+W8gOWQr1xyXG4gICAgICAgIGNvcmUubGlzdGVuKE1vZHVsZU1lc3NhZ2UuTU9EVUxFX0NIQU5HRSwgdGhpcy5vbk1vZHVsZUNoYW5nZSwgdGhpcyk7XHJcbiAgICAgICAgLy8g5omT5byA6aaW5Liq5qih5Z2XXHJcbiAgICAgICAgbW9kdWxlTWFuYWdlci5vcGVuKHRoaXMuX2luaXRQYXJhbXMuZmlyc3RNb2R1bGUpO1xyXG4gICAgICAgIC8vIOWmguaenOacieWTiOW4jOaooeWdl+WImeaJk+W8gOS5i1xyXG4gICAgICAgIGlmIChoYXNoLm1vZHVsZU5hbWUpXHJcbiAgICAgICAgICAgIG1vZHVsZU1hbmFnZXIub3BlbihoYXNoLm1vZHVsZU5hbWUsIGhhc2gucGFyYW1zLCBoYXNoLmRpcmVjdCk7XHJcbiAgICB9O1xyXG4gICAgRW5naW5lLnByb3RvdHlwZS5vbk1vZHVsZUNoYW5nZSA9IGZ1bmN0aW9uIChmcm9tKSB7XHJcbiAgICAgICAgLy8g6LCD55So6L+b5bqm5Zue6LCD77yM5YWo6YOo6L+H56iL5a6M5q+V77yMMTAwJVxyXG4gICAgICAgIHRoaXMuX2luaXRQYXJhbXMub25Jbml0UHJvZ3Jlc3MgJiYgdGhpcy5faW5pdFBhcmFtcy5vbkluaXRQcm9ncmVzcygxLCBJbml0U3RlcC5Jbml0ZWQpO1xyXG4gICAgICAgIC8vIOazqOmUgOebkeWQrFxyXG4gICAgICAgIGNvcmUudW5saXN0ZW4oTW9kdWxlTWVzc2FnZS5NT0RVTEVfQ0hBTkdFLCB0aGlzLm9uTW9kdWxlQ2hhbmdlLCB0aGlzKTtcclxuICAgICAgICAvLyDnp7vpmaRsb2FkRWxlbWVudOaYvuekulxyXG4gICAgICAgIGlmICh0aGlzLl9sb2FkRWxlbWVudCkge1xyXG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy5fbG9hZEVsZW1lbnQucGFyZW50RWxlbWVudDtcclxuICAgICAgICAgICAgcGFyZW50ICYmIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzLl9sb2FkRWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEVuZ2luZSA9IF9fZGVjb3JhdGUoW1xyXG4gICAgICAgIEluamVjdGFibGVcclxuICAgIF0sIEVuZ2luZSk7XHJcbiAgICByZXR1cm4gRW5naW5lO1xyXG59KCkpO1xyXG5leHBvcnQgZGVmYXVsdCBFbmdpbmU7XHJcbi8qKiDlho3pop3lpJblr7zlh7rkuIDkuKrljZXkvosgKi9cclxuZXhwb3J0IHZhciBlbmdpbmUgPSBjb3JlLmdldEluamVjdChFbmdpbmUpO1xyXG5leHBvcnQgdmFyIEluaXRTdGVwO1xyXG4oZnVuY3Rpb24gKEluaXRTdGVwKSB7XHJcbiAgICAvKiog5qGG5p625bey5YeG5aSH5aW95Yid5aeL5YyWICovXHJcbiAgICBJbml0U3RlcFtJbml0U3RlcFtcIlJlYWR5VG9Jbml0XCJdID0gMF0gPSBcIlJlYWR5VG9Jbml0XCI7XHJcbiAgICAvKiog5byA5aeL5omn6KGM5Yid5aeL5YyWICovXHJcbiAgICBJbml0U3RlcFtJbml0U3RlcFtcIlN0YXJ0SW5pdFwiXSA9IDFdID0gXCJTdGFydEluaXRcIjtcclxuICAgIC8qKiDniYjmnKzlj7fns7vnu5/liJ3lp4vljJblrozmr5UgKi9cclxuICAgIEluaXRTdGVwW0luaXRTdGVwW1wiVmVyc2lvbkluaXRlZFwiXSA9IDJdID0gXCJWZXJzaW9uSW5pdGVkXCI7XHJcbiAgICAvKiog6KGo546w5bGC5qGl5Yid5aeL5YyW5a6M5q+VICovXHJcbiAgICBJbml0U3RlcFtJbml0U3RlcFtcIkJyaWRnZXNJbml0ZWRcIl0gPSAzXSA9IFwiQnJpZGdlc0luaXRlZFwiO1xyXG4gICAgLyoqIOmihOWKoOi9ve+8jOWPr+iDveS8muinpuWPkeWkmuasoe+8jOavj+asoeS8oOmAkuS4pOS4quWPguaVsO+8mumihOWKoOi9veaWh+S7tuWQjeaIlui3r+W+hOOAgemihOWKoOi9veaWh+S7tuWGheWuuSAqL1xyXG4gICAgSW5pdFN0ZXBbSW5pdFN0ZXBbXCJQcmVsb2FkXCJdID0gNF0gPSBcIlByZWxvYWRcIjtcclxuICAgIC8qKiDlvIDlp4vmiZPlvIDpppbkuKrmqKHlnZcgKi9cclxuICAgIEluaXRTdGVwW0luaXRTdGVwW1wiT3BlbkZpcnN0TW9kdWxlXCJdID0gNV0gPSBcIk9wZW5GaXJzdE1vZHVsZVwiO1xyXG4gICAgLyoqIOmmluS4quaooeWdl+aJk+W8gOWujOavle+8jOWIneWni+WMlua1geeoi+WujOavlSAqL1xyXG4gICAgSW5pdFN0ZXBbSW5pdFN0ZXBbXCJJbml0ZWRcIl0gPSA2XSA9IFwiSW5pdGVkXCI7XHJcbn0pKEluaXRTdGVwIHx8IChJbml0U3RlcCA9IHt9KSk7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVzdC9ub2RlX21vZHVsZXMvb2x5bXB1cy1yL2VuZ2luZS9FbmdpbmUuanNcbi8vIG1vZHVsZSBpZCA9IDc4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=